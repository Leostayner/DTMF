cnumpy.core.multiarray
_reconstruct
p1
(cnumpy
ndarray
p2
(I0
tS'b'
tRp3
(I1
(I44100
tcnumpy
dtype
p4
(S'f4'
I0
I1
tRp5
(I3
S'<'
NNNI-1
I-1
I0
tbI00
S'\xdb/5=\x81\x08\x8f<\xd9\xd0\xd0\xbbZ\x96\xd6\xbc\xdf\x9e)\xbd\xda\xe9W\xbd\xa2\xc3z\xbd\xd7Z\x8a\xbd\xf9\x02\x94\xbd\x8f)\x99\xbdVD\x97\xbdM\xe1\x8b\xbd\x0f/i\xbd\xd68!\xbd\x07L\x8a\xbcV\xd9\t<LF\r=\x08\x90q=F\xcd\xa2=\x1eQ\xc1=\x8b\x9b\xd0=\x13\x05\xcd=\xdcs\xb7=\x9fp\x93==\x1cL=3n\xd9<\xeb/\x84;\x17R\x8a\xbc\xd9\xa2\x13\xbd\xe0W^\xbd\x98\xf9\x93\xbd\xc0W\xb8\xbd\xf7\x8f\xdf\xbd$-\x04\xbe\xc0\xad\x13\xbe\xe0\xe6\x1d\xbeIP$\xbel\x8b\'\xbe\xa9\xc3)\xbe\xb8\xe3(\xbel$#\xbe\x11\x8a\x18\xbe\xab{\x08\xbe\xbcB\xe6\xbd\x8a\x8e\xb0\xbd\x9c\xf2X\xbd)\xf9Q\xbc\x9c\x0c\x02=v\xee\xa0=\xd4\x03\x00>\xc8\xe6*>\x87\x83N>\'\x94j>:\x93~>\xc6\'\x85>\xe2\x9b\x87>`\xc0\x86>ni\x82>\xa3\nu>\xb2\xd9\\>\xc3\xfb;>\xcc(\x14>C\xa4\xd0=Z\x0el=\xe5\xe5y<\xcc\x89\xba\xbc\xd3\xb3h\xbdmO\xb2\xbd&B\xea\xbdK\xa8\x0e\xbe\xf5D&\xbe\x03E>\xbe\xaemV\xbe\xad\x04l\xbe\xfd]|\xbe\xbb\xf4\x81\xbe\xfe\xa0\x7f\xbeT\x81o\xbe\xa9\xf1S\xbe(\x94.\xbex\x14\x03\xbe!s\xa9\xbd\xc7\xd1\x1b\xbd\x95K=;a9\x19=\x0f\xee\x82=\x18\xb5\xa8=y\xa2\xbe=\xda\x1e\xc8=\xcb\xad\xcf=\xfc5\xdb=h\xa8\xea=\xf6i\xfc=\xf8,\x04>\xb2\x1c\x04>GV\xf9=<\xc7\xda=q\xdf\xad=R\x8cj=)\x9e\xd7<x|y\xbb6\xdd\xec\xbc-\xc6C\xbd\xd6\xabp\xbd\x07\xccx\xbdRbi\xbd\x9f@M\xbd\x87\x03*\xbd\xa80\x04\xbd\t\x8f\xb6\xbcdM3\xbc2v4;\xd2\xe0\x9d<hD =\xf2\x93|=\xa7V\xad=\xcc\xf3\xd8=\x8a\x97\xfd=\x9a\xc0\x0b>sX\x12>$\xb4\x12>\x17;\x0c>\x95y\xfd=ET\xd5=B\xf5\xa2=b\xa4S=\r\x10\xac<(\x135\xbcV1/\xbd\xe0V\x96\xbd\x123\xd1\xbdj>\x03\xbe\xd6E\x1b\xbe\x9d/0\xbe\x89\x8fA\xbe\xe4wO\xbe\x9e\x1fW\xbe\xbd\xd4W\xbe\x15\rS\xbe\xad(I\xbeM?;\xbe=9)\xbe9\xba\x12\xbe\x1e\xd8\xf0\xbd\xbb\x0e\xb6\xbdroj\xbd\x94c\xb6\xbcp\x1d\x8a<\xd5\xafr=B;\xd0=\n\xac\x11>\x93\xca7>\xf3\x7fW>\xa6\xe2o>\xe3\xc8\x80>\x10\x11\x86>A\x7f\x87>No\x84>\x13^y>\n\xa1a>\x06\xd6B>\x81\xa8\x1d>\xa1\xc9\xe5=\xf5\xa1\x8b=\xa2\x9a\xd1<\x9e/i\xbc\xe2nL\xbd\xfe\x93\xa3\xbd-\x1f\xd6\xbd<\xf2\xfe\xbd\xd2~\x10\xbe\x1b? \xbet\x15/\xbe\x1d\xfd<\xbeckH\xbe\xb2\xa5M\xbe\xb2\xceI\xbe+\xe3;\xbev;$\xbe=\x11\x05\xbe?\x19\xc2\xbd\x9e\xc8j\xbd\xfaS\xaf\xbc\x8c\x13\x1f<\x1b+\r=\x98\xc8R=\xb4\xb4v=<\x9f~=Q\xa1r=\xa0j[=\xfc\xb9G=!\x1aA=70A=\x9a\xb4?=\xce\x010=\xa2\xbf\x08="J\x9b<\x94V\xf19\x01\xdd\xad\xbcS\xed6\xbd\x89\xf6\x8b\xbd\x1f\xc4\xb5\xbd\xd9`\xcf\xbdT\xa3\xd3\xbd\xe5\xc9\xc3\xbd:<\xa4\xbd\xf9\xdes\xbd\x17\x92\x16\xbdO\xcfU\xbc\r\xcfA<_\x19\x17=s\x98{=_\xd3\xad=\x83s\xda=\x13\x1a\x02>\x81\x04\x15>#\xd6$>\xe0\xa60>\xe6\x178>B\x87:>\xcd\x836>R\x0f,>\xbd\x84\x1b>v\x1c\x05>\xdfA\xd4=7\x90\x95=\xbcx\x1f=\xe8\xa7\x1f;\xe1\xc8\x12\xbd\xaf_\x96\xbd\xc9)\xde\xbd\xb5\xb7\x0f\xbe\x0e\xcc,\xbeE\xecF\xbe\xdb\x14^\xbe\x17\xc9p\xbe\xf1\x08~\xbe\xc4\x9a\x82\xbe\x15\xd0\x82\xbe\xd9f~\xbe\xb0\xf5n\xbe\x18\xb3V\xbe\tC4\xbe\x0b\x97\t\xbe}\xae\xb4\xbdd\xb2(\xbd\xf1\x19T;u\xe94=\x08\x0f\xa6=o\xd9\xe6=\x14\x9c\x0e>\x99<%>\xa6\x948>\xd6\x89K>\x7f\xc3]>\x91\x82l>!Av>Y\xeaw>\x1a\xden>\xb3\xffZ>\xad\x0b=>\x9c\x0e\x17>\x86\xed\xd7=\xddU}=\xc1\x80\xa8< \xfa}\xbc\x85!9\xbd\xd7\x14\x8d\xbd\x01M\xb2\xbd\xbe\xb9\xcc\xbdY\xc3\xdd\xbdPw\xe9\xbd\xfb\x0b\xf4\xbd"R\xfd\xbd_\xff\x01\xbe\xd8\\\x02\xbe#\x87\xfa\xbd?}\xe2\xbd\xa2\xc0\xbc\xbd\xea\x1e\x8d\xbd@\xe7-\xbdoVi\xbc2\xb1W<\xaeT\x17=\xdf\x8e]=@\x8f\x7f=4\xbd\x7f=2\xfde=;\x8a;=\x94\x10\t=\xe51\x9e<\x9dN\xb4;;\x11\xa9\xbb/\xafd\xbc\x11\x8e\xb8\xbc8\xbb\x08\xbd\x02\x88E\xbdra\x85\xbd1r\xa8\xbd(\xfa\xc9\xbd\x151\xe7\xbd\xb13\xff\xbd\xe0\x10\x07\xbe\x8f\x86\x06\xbe\x15\x81\xfc\xbdk\xb3\xde\xbd\xb6_\xb3\xbd\xe7xx\xbd\xff?\xef\xbcT\xac\xca;\x85_5=\x9a1\xa9=G\x8a\xf3=\xba\xf9\x1a>\x01\xcc6>1\x01M>\x16\xfd]>B\xd6h>j\xcdl>A9j>A\x9f`>cMP>T\xc5:>\'\xdb\x1f>\xe3\xee\xfe=c\xe5\xb5=\x03\xcbO=\xf3\x9eJ<\xban\xcf\xbch\x96\x7f\xbd\xe3\xce\xc7\xbd\x0b\x1d\x05\xbe\xe9\xe3#\xbeb\xad?\xbem]X\xbe(\x14n\xbe\xae=\x7f\xbe\xe1-\x85\xbe\x95\xfa\x86\xbe\xd42\x84\xbe\x80\xf1x\xbe\x80\x06_\xbe\xc2\xbe;\xbe0\xbf\x11\xbed\xbb\xc6\xbd\xb2\xdeO\xbd\xf0V\xc7\xbb\x0f\x15\x14=\xc1<\x97=j\x9e\xd6=#o\x03>\x1d\x83\x14>\x08\x00!>\x9b\xfb+>\xb6g6>\xc5F?>\xe4\xb7D>\xb5\xd4C>\xd6j;>s\xb2+>*\xbd\x14><\xed\xf1=\x82\xd6\xb4=rki=\xb2N\xda<\xdcn4\xbaI\x96\xbe\xbc\xafs&\xbd\xf8\x8b\\\xbd%\x18\x82\xbd\x9cd\x90\xbd\xfa\xff\x99\xbdVA\x9f\xbd\xfb\x00\x9f\xbd/\xf1\x95\xbd\x95]\x81\xbd\xac\tB\xbd\xe1\xe7\xdb\xbcG/J\xbb\x92\xd6\xb3<\xed\x1b==\xb1n\x8a=\xe8Q\xac=\xfa\xa7\xbe=L\x01\xbe=\xee\xc9\xab=\xae\x0e\x8c=9\\H=b\xed\xe6<\xe3\xcb\x02<~\xa43\xbc5\xbd\xe7\xbcB47\xbd?\xd4z\xbd\xbe\x0f\xa1\xbdp\xda\xc9\xbd\xfb\x9e\xef\xbd\x19\x7f\x05\xbe\xe6\xf1\x0f\xbe\xd7#\x17\xbe\x9dy\x1c\xbe\x8dM \xbe\x92\x19 \xbew\xc3\x1a\xbe\xbf\x18\x10\xben8\x00\xbe\x7f\x1b\xd7\xbd\tQ\xa1\xbd\x8f?7\xbd\xd3q\x97\xbb\x15N =f\xa1\xad=\xfa\xbf\x03>\xe13+>FaL>\xb4\x85f>u\xcex>\xd8\x17\x82>\x1a\x8e\x84>\xbd\xd6\x83>\x1c\xef\x7f>\xf6\x8fp>\x9alX>t\x9f7>\xc2"\x10>\x1f\xb3\xc8=,=\\=\x13<E<\x1b\xa5\xd4\xbc\xdb\xe7w\xbdr*\xbb\xbd\xf8\x8a\xf3\xbd\x88\xf0\x12\xbe\xdd\xe0*\xbe\x9dhC\xbe\x9be[\xbe\xe7\xa3p\xbe.8\x80\xbeZ\xcf\x83\xbe@\x1e\x82\xbe^ku\xbe\x01\xe9Z\xbe@l6\xbeB\x81\x0b\xbe\x84\'\xbb\xbd\xcfW?\xbdXA\xb1\xbbo\xea\xf4<y\xd9m=\xee~\xa0=\xba\x1f\xb9=\x18j\xc8=\xe5a\xd6=\x13\xa2\xe5=#)\xf8=\xc5\xeb\x04>\xe1_\n>uJ\n>\xff\xb0\x02>\n\x0c\xe7=\x0fM\xba=S\xd1\x81=[\xa5\t=\xc8b\xad;\xae\xeb\x9d\xbc\xeb\xeb\x1b\xbd\xa8\x80I\xbd\x06\xcf[\xbd^B[\xbdw\x84L\xbd\xad\xd06\xbd\x01\x8c\x1d\xbd\xd1\xdf\xff\xbc\xa0C\xb6\xbc\xafZ(\xbc\x89\x1d\xb1;e\x91\xce<\xbe2D=\xc7\xa8\x91=\x9f#\xbe=\xae\x8c\xe2=T\xce\xfb=_\xd0\x04>*M\x05>\x84~\xfd=\xdf\r\xe2=\xe8f\xb9=\xc1j\x87=\x18\x92\x1c=\xe8?\x08<\xb7k\xaf\xbcx\xb3N\xbd>\xc4\x9f\xbde\xc9\xd3\xbd\x84\x9f\x01\xbe\xb1\xad\x16\xbe\xce\xfb(\xbeV\x019\xbe\xdf\xc9D\xbe1\xe8I\xbes\xaaI\xbe#=E\xbe\xe4\x86=\xbe\xb2d2\xbe`n"\xbe\xdd\x93\r\xbeC\x9c\xe8\xbd\xce\x0c\xae\xbd\xa2\xafX\xbd\xbf\x91\x87\xbc{2\xcb<wu\x8c=\x7f\xa6\xe4=\x8de\x1c>\xe9oA>m\x87^>d\xb4t>\xc83\x82>\x11\xb5\x86>L\xe8\x87>\x80\xec\x84>\xb44{>\x9e\xb0d>+?F>\x87> >o\x03\xe9=M\xb3\x8d=]Z\xd3<\xab\x85s\xbc\xc9-O\xbd\xb6e\xa4\xbd\xbc\xc8\xd5\xbdC\x85\xfe\xbd\xb7.\x11\xbe\x8b\xdd!\xbexS2\xbeZ"B\xbeW\xe0N\xbe\xc7\xb2T\xbe\xba\xd8P\xbe\xa1\x94B\xbe\xf7`*\xbe<w\n\xbe\xbe\x02\xcb\xbdQ\x91y\xbd\xf9\xed\xc6\xbc\xd5~\x00<\x05B\n=_KU=\x18p\x7f=\x90\xd9\x86=S\x05\x84=3zx=R\xe1n=\xbe\xd0q=\xb3xz=X%\x7f=Wls=\x00?P=IA\x17=\xb4\x88\x97<\x88\xc3t\xbb\x9f\x0e\xe8\xbc6\x7fY\xbdS+\x98\xbd3\xd0\xb2\xbdTZ\xb8\xbd\xa7d\xaa\xbd\xe6\x1f\x8d\xbdX\x9fN\xbdH\x0b\xfa\xbc\xfaW\x1d\xbc\xa4\x9fH<~\x04\x0c=\xc1me=LL\x9e=\xed5\xc8=\xc1\xe4\xf0=k\x03\x0b>\x7f\xaf\x1a>\xd4\xdd&>\xc2\xb1.>\x11P1>\xb9~->0\xdd">\x00\xbd\x11>\xe6\xdc\xf5=k\xdf\xbe=<L\x7f=\xd3O\xe6<Q\x8d\r\xbc=\x81<\xbd\xa6Y\xa7\xbdRG\xea\xbd\xf7\xd9\x12\xbe\xc0G-\xbe\xaf\xfdD\xbe\x94PY\xbe[oi\xbe\xf4\x8et\xbe\x0cDz\xbe\x1a\x04z\xbe\x99\x17s\xbe\x11\x81d\xbe\x82?K\xbe\xaf\xae\'\xbe6\x96\xfa\xbd:\xa9\x9e\xbd\'L\x08\xbd\x81\xcd\r< \xe8E=:w\xac=oi\xec=\xb9w\x11>lI(>\n\x1f=>7\xc9Q>\x04\x87d>+\xe4s>\xdf\x06~>\xea\x01\x7f>y>u>I\xd8`>\xa8lB>l\x10\x1c>\xf4\xaf\xe1=-k\x89=\x98\x99\xd9<*!\x16\xbc\xd4\xda"\xbdNl\x85\xbd\xc7o\xad\xbdm_\xc9\xbd\xd5\xf4\xdb\xbd\xb2\x12\xea\xbd*>\xf6\xbd\xda\xb3\x00\xbe5;\x05\xbe\xafG\x06\xbeEd\x01\xbe>\xee\xe9\xbd\x05d\xc4\xbd\xb3\n\x95\xbdNi;\xbd6\xa4\x8b\xbc\xd0\xe38< \xd8\x12=O,Z=\xbd\x08\x80=Z\xbc\x83=\xc9\x91t=\'\x13O=\x15n\x1f=\xad\xff\xcf<\xcbrV<\x0c<\x85;\x8b?\x81\xbb&\xbeG\xbc\xce\xc4\xbf\xbc\x02\xc3\x1f\xbd\x13\x93e\xbd\xcb\xdf\x95\xbdQ\x8f\xb7\xbd\xa2\xd0\xd4\xbd\xecS\xed\xbd\xe38\xfb\xbd\x83\x8d\xf8\xbd\xf6\x91\xe7\xbd\xeb\xb4\xc9\xbd_\xd8\x9e\xbd\xdd\xc1R\xbdd\xa9\xae\xbcY\xc2J<\xe2YE=\xe8\x06\xac=\xf4\xf6\xf0=L\xe7\x16>\xa3\x120>\x184D>\xd6kS>\xc1o\\>\xf3U_>\xbf~\\>AiS>\x85\x8dD>Nf0>tA\x16>6\x93\xec=\xd6\xdf\xa3=&-+=\xe4t>;S\xac\x12\xbd\x15\xae\x97\xbd\x16I\xe1\xbd\x05w\x12\xbe- 1\xbe\xd0\xf8K\xbeJ\x8ec\xbe\x14\x9dw\xbezu\x83\xbe\x85\xfc\x87\xbe/\xda\x88\xbe\xe5\x95\x85\xbe\xf6\xe2z\xbeD\x9c`\xbe\x8c\xae=\xbeM\x13\x14\xbe\x8bN\xcd\xbd\x18\'`\xbd<\xf9\x18\xbc\x00+\n=\x06\x87\x93=\xbd?\xd4=\x00y\x02>\xa4\x03\x14>\xc6f!>\xf3Q->Zi8>@\x82A>\x0c\xb6F>W\xa4E>\xee\x16=>\xb0l,>\x07\xc1\x14>\x17\x9a\xf0=\xf7\x1b\xb0=\x94\xa1X=\xbcC\xab<?\xe0\x00\xbcew\x00\xbd\xa25J\xbd\xd0\x87\x80\xbd\\Y\x94\xbd*\x02\xa3\xbd\xd0\x1d\xae\xbd\x91L\xb5\xbdX\xff\xb6\xbd\xb0b\xb0\xbd*|\x9e\xbd\x01R\x81\xbd\x0c 4\xbd\x0e/\xac\xbc\x86\xd3n;Y\xf7\xe6<\xef\xb1P=\xe3\x9c\x8d=&\xdb\xa2=\xcb\xe8\xa5==\x00\x98=\x9d\xecw=\xfe\xd7.=\xe1\x8b\xbf<\xa8\x88\x89;\xf0@c\xbc6\x97\xf8\xbc\x8bK<\xbddb}\xbd\xb5\xb6\xa3\xbd\xd7\xdc\xc8\xbd\xea\x15\xe6\xbd\xbb\xa0\xfd\xbd\x1er\x08\xbe\xa1\xe3\x10\xbe\xf5\x87\x18\xbe\xd4Y\x1d\xbeE\xdb\x1d\xbe\x9e\x1b\x19\xbe\x01\xef\x0e\xbe\xf7\xfe\xff\xbd\xbd\x81\xd6\xbd\xe7\xa8\x9c\xbd\xcc\xec\'\xbd\x0e4D8m\xfa8=\x08\xce\xb9=\x174\x08>\xa0h.>_\x11N>\xfe\xd8e>xEv>S\xf8\x7f>\x02\xb5\x81>%\xd9\x80>\x14uy>\xbbgi>d\'Q>4\xfa0>\xdd|\n>\x03\xfb\xbe=x\xb9O=qG$<\\T\xe6\xbc\x86\xa2\x81\xbd\x9fq\xc3\xbd\x94\xfc\xfc\xbd \xb7\x18\xbe\xe3y2\xbe\x9f\x93K\xbeM<c\xbe_8w\xbe\x89q\x82\xbeV*\x85\xbe\x7f\xc3\x82\xbe\xab\xa3t\xbe\xf0\xbeW\xbeq\x931\xbei\x8c\x05\xbe\xea\xb5\xad\xbdbm#\xbd{)\xcd:\r\xba\x18=\xaf\xc9\x87=\xdb\x0c\xb3=\xaeU\xcd=\xe9r\xdf=>\x88\xef=\xaa\x0e\x00>x\xb5\t>\xab(\x12>\xc08\x17>{z\x16>\xa2y\r>\xf7}\xf9=\x96F\xc9=\xdc\xc6\x8d=#\xa7\x1f=.%+<5\xe4p\xbcKG\t\xbd\xbc\xc08\xbd\xaepQ\xbdd\x8cV\xbd\\\x8cN\xbd\xf5\x92@\xbd\x12\x1b/\xbd\x8f\x06\x1c\xbd\x88\xfa\x02\xbd\xcfV\xb5\xbc0$\xe7\xbb\t[Y<\x99&\x18=\x90V}=B\x17\xae=z\xf4\xd4=\xaa\xe5\xef=\xae\x83\xff=+\x01\x01>\xfcQ\xf5=\x99\x81\xd9=\xc6\xb5\xb0=Qz|=\xf3y\n=\xd4W\xa8;\x17\xe2\xba\xbc\x9a\xa8K\xbd05\x9a\xbd\x98\xda\xcb\xbd{c\xfa\xbd\xfaY\x12\xbe\xdb\xd1%\xbebV6\xbe8L@\xbeG?D\xbe\x0b\xd8C\xbe\x1aP@\xbe\x08\xed:\xbe\xb4B1\xbel\x1a"\xbe\xf6\xf2\r\xbe\x8d\x9c\xe9\xbd\xfb\xf1\xae\xbd\x06\x8bV\xbd\xaee[\xbc\xc7\x81\xfb<\xa2\x1c\x9d=tA\xfb=\xfd\xb0)>\x1f3N>S\x1dj>E_~>|\x98\x85>\xeb\xfc\x88>&)\x89>\xa90\x85>\xa7\xdaz>A\x9ec>\x03\xe5C>\xf4\xa2\x1c>\x0c#\xe1=K\xe3\x86=\xf9`\xbb<U\xa0\x8b\xbc\x9d_T\xbd\xd09\xa6\xbd(\xd9\xd7\xbdW<\x01\xbe\xf7\\\x14\xbe\xa0\xc2&\xbe=\x889\xbe\xcegK\xbe;\xecX\xbe>A^\xbe\xfe\xf7X\xbe\xf2\xfcG\xbe\x16\xa1,\xbe\xa9U\t\xbe\xab\x13\xc2\xbd&\x0b_\xbd\xc9`\x86\xbcY\xcc\x89<\\Q1=U\x1b~=;l\x94=\x14\xe0\x9b=P\x04\x9a=D\xc3\x93=X\x06\x92=\xac3\x97=Ym\x9f=\xfc\x10\xa5=y[\xa0=Ba\x8e=\xd4\x8f^=f\xd7\t=\xaf\x9f\x13<\x93H\x96\xbc\xf6\x17:\xbd:\'\x8b\xbd4T\xa7\xbdJ\xb3\xae\xbde\x82\xa2\xbd\xe84\x86\xbdR\x81D\xbd\xb6\xf2\xee\xbc_\xaf \xbci\'\x1d<\x8b\xb9\xed<.\xaeG=\xbfp\x8d=\xe3\xf8\xb7=\x02\x94\xe2=\xbe\xd4\x04>E\'\x15>}\xd3!>M\xcc)>\x03W,>\xbco(>8\x91\x1d>\xf7u\x0c>\xde\xd1\xeb=\xf7m\xb5=qmm=C\xb8\xc4<\x02\x87K\xbc\xd5\xc1I\xbdo\x85\xac\xbd\xfb\x0b\xef\xbd\xca\xb0\x15\xbe\xad\x0c1\xbe\xc7uI\xbe\x93\xd2]\xbe\xfb\x97m\xbe\x936x\xbe@ }\xbe\x9f\xfd|\xbe\xb2\x16v\xbe\x92\xe7c\xbe{\x13G\xbe\x1a\x8b"\xbe\r(\xf2\xbd5\xc8\x9d\xbd\xcc:\x15\xbd\xf9\xdcZ;\r-)=T\x93\x9d=\xf3\x17\xe0=\x15\x19\r>\xf3\xa1\'>\xda\xf6@>>\x17X>\x99\x91l>c\x8f|>\nP\x82>\xab)\x81>8\xedt>\x83Z\\>\xf4\x03:>4\xd6\x10>\x13\x80\xc8=)\xce`=*\xd2p<\x9a\x0b\xb3\xbc\xa4\x9c[\xbd\x92\xc6\xa2\xbd;\x9c\xca\xbdF7\xe7\xbd\xa8\xeb\xfb\xbd{,\x06\xbe\xda\xfd\r\xbe\x0e\xd6\x15\xbe\xbbm\x1c\xbe\xcei\x1e\xbeI2\x19\xbe\xc2w\x0c\xbe\xb3\xfe\xf0\xbdLF\xbc\xbd\xb5\xb2}\xbd\x12\xee\xf3\xbc\xba\xda\xc8:I\\\xe4<\x9d\xa6@=G\x17p=z\xa3~=\x0f#o=G\xe2K=\x9c\xa1\x1b=\xf3L\xd1<\x9a\xc3\x84<QU\x1d<\\Om;\x02\xa6\x83\xbb\xa6\x16\x85\xbc\xdf\x11\x05\xbd\xd7\x88M\xbd<\\x88=\\xf2\\xac\\xd1=\\xe9\\xea\\x06>\\xac\\x12\\x1f>\\x0f\\x8c1>.\\x9eA>\\x80\\xf6T>\\xc2\\xc3h>\\x87\\x8cx>\\xbd\\x1f\\x81>\\xca\\x83\\x80>y\\xf2r>\\xd7gY>I"6>5\\xc2\\x0b>\\xd7\\xce\\xbb=\\xa8\\x1eC=Ix\\x00<\\xac\\xd5\\xd3\\xbc\\x80\\xcd\\\\\\xbd\\x07\\t\\x9e\\xbd\\xa0\\xb6\\xc3\\xbd\\x89\\xb1\\xdc\\xbd\\xd4C\\xe9\\xbd9b\\xf1\\xbd\\xdf\\xd2\\xf9\\xbd\\xbcZ\\x01\\xbeff\\x04\\xbe\\xcc~\\x02\\xbe\\x89:\\xf4\\xbd:\\x94\\xd4\\xbd#\\x89\\xa9\\xbd\\xe3\\x9aq\\xbd\\xab\\x03\\x02\\xbd\\xff\\xfd\\xde\\xba\\xcd\\x88\\xe1<\\xd3\\xe2S=\\x10\\xf9\\x87=\\x87\\xb4\\x8e=\\xaf2\\x84=>\\x98^=Mg*=\\x90\\xf3\\xdd<\\xe6\\xd4*<$>D\\xbb8\\x1f2\\xbc\\xa2&\\x8c\\xbc \\xf3\\xbe\\xbc\\x91\\xc2\\x0e\\xbd\\xad\\xbcY\\xbd\\xc9\\xdc\\x93\\xbdL\\x90\\xb9\\xbd\\xc3\\xf3\\xda\\xbd\\xc4\\x9e\\xf5\\xbd>\\x81\\x06\\xbe\\xc8u\\x0b\\xbe\\xd1\\x10\\x06\\xbe4\\x14\\xf4\\xbd\\x0cR\\xcf\\xbd\\xcb?\\x9f\\xbd\\xe6\\xe8P\\xbd\\x1f\\x89\\x9a\\xbc\\xf6u\\xa0<&5z=TE\\xcf=\\xe2\\x18\\x0c>V\\x0b*>\\x18pA>\\xe2\\x05U>\\xf3\\xf2c>,\\xa0k>\\xb7\\xa0l>\\x14\\xd9f>\\xea\\xeeZ>Q\\x05J>\\x9d\\x973>\\x06b\\x16>^\\x97\\xe5=\\x15E\\x96=\\x13\\xa4\\t=9$\\x91\\xbbP\\xb3,\\xbd\\xa4\\xb1\\xa4\\xbdZ\\x86\\xed\\xbd\\xa3N\\x18\\xbe<.6\\xbe) O\\xbe\\xb1\\\'f\\xbe\\xbfS{\\xbe\\x9e\\x93\\x85\\xbe\\x1f\\xa2\\x89\\xbe\\xeeP\\x89\\xbe\\x837\\x84\\xbe`\\xf6s\\xbe\\xb0\\\\U\\xbe4\\x90.\\xbe\\xe7\\xcd\\x01\\xbe\\x00i\\xa3\\xbd\\x10\\x17\\n\\xbdb\\xee$<VyV=!\\x86\\xb8=\\xba\\xfa\\xf5=I\\xe0\\x10>\\x12\\xe1\\x1d>\\xc56\\\'>\\x9f\\xf11>\\x1d/=>\\xed)G>\\x80\\xaaK>[8F>9\\xd08>i;$>\\xb7\\xcc\\x08>\\xe2\\x00\\xd6==\\x14\\x97=\\x8c\\xc5(=g\\xa6)<Y\\xb4\\x88\\xbcV\\xff\\x1c\\xbd\\xa0\\xae[\\xbd\\x15\\x17\\x83\\xbd\\x84\\xbb\\x91\\xbd\\xfa$\\x9d\\xbd\\xd5\\x1d\\xa5\\xbd\\xd6K\\xa9\\xbdB&\\xa8\\xbd\\n`\\x9c\\xbd\\xa4V\\x83\\xbd\\xa7\\xf8;\\xbd\\xd3;\\xbd\\xbc\\xc8\\x1b\\n;OT\\xe2<s\\x95U=\\x96\\xfe\\x97=\\xbe\\xde\\xba=D\\xca\\xcc=\\xe0\\xe2\\xc7=j\\x9c\\xab=\\xe1x~=\\xf1\\x87\\x18=d>Y<\\xa1x\\xe9\\xbbPW\\xbe\\xbc\\xe2\\x81\\x1a\\xbdH\\x82Z\\xbd\\x9c\\x13\\x8f\\xbd\\xb2(\\xbb\\xbdJW\\xec\\xbd\\xff\\xc1\\x06\\xbe\\xbaL\\x11\\xbeOH\\x18\\xbe_\\xdc\\x1b\\xbe\\xf6m!\\xbe\\x0f\\x9c%\\xbe\\x9fM#\\xbe\\xd9\\xcf\\x1c\\xbex\\x13\\x11\\xbe)0\\x00\\xbe\\x86]\\xd7\\xbd=f\\x9c\\xbd\\xe6\\xb7\\x19\\xbd\\xbfb\\xde;\\x05Ed=\\xd96\\xd9=\\xdf\\xc9\\x19>\\xdd\\xe6>>iQ\\\\>\\xa9\\x8do>\\xc2\\xdcz>@?\\x81>\\xed \\x83>\\x8c\\x05\\x83>\\x9f\\x1d\\x80>s\\xf4o>\\r\\xc7S>\\x14E.>D(\\x02>\\xb0\\xb1\\xa4=\\xc6\\x1f\\x13=w\\x1e\\x85\\xbb\\x12\\xba\\\'\\xbd\\x82\\x81\\x96\\xbd\\xab4\\xd2\\xbd\\x82\\xb0\\x03\\xbe\\xda6\\x1b\\xbe\\xb8\\x914\\xbes\\xc1O\\xbe7\\x14i\\xbe\\x8ed~\\xbe(\\xd3\\x85\\xbe\\xbf\\xd1\\x86\\xbeQ\\xdf\\x81\\xbe\\xd1\\xf6l\\xbe\\x1a\\x03J\\xbel\\xc4\\x1f\\xbe\\xa0\\xf7\\xe4\\xbd\\x9df\\x89\\xbdS\\xaf\\xc3\\xbc\\x99\\x14\\x8b<\\n*X=\\xfd`\\xa6=\\xa1\\x87\\xcc= w\\xd9=\\x192\\xdc=\\xc1e\\xe4=\\xd96\\xf3=\\xca\\\'\\x05>\\x12\\x1a\\x10>\\xd4B\\x14>\\xa2T\\x11>\\x11M\\x06>\\xc8\\xd4\\xe5=.\\x04\\xb2=\\xb0\\x13f=\\x87.\\xbe<\\xd90\\xde\\xbb\\x9a\\xab\\x01\\xbd\\xd6\\xe5H\\xbd\\xa7\\xacf\\xbd\\x83\\xf1e\\xbd|\\x10V\\xbd\\x1d\\xf4;\\xbd\\x13\\xb3 \\xbdI\\xaf\\t\\xbd\\xbc\\x8b\\xe4\\xbc>\\x9f\\xa5\\xbc\\x8c\\xb2\\x03\\xbcg\\xa0.<\\xb2t\\x0f=\\x87\\xbaz=\\xf7V\\xaf=\\x03\\x11\\xd9=BF\\xf7=X(\\x05>\\xe3<\\n>2>\\t>tx\\x00>\\xeb\\xfa\\xde=\\x1b\\xb9\\xae=\\xe8Bn=G\\xcd\\xe6<N\\xfcw\\xbb\\x8f\\xfa\\x0e\\xbd\\tx\\x84\\xbd.\\xe6\\xba\\xbd2e\\xea\\xbd\\xd9.\\x0c\\xbe7)!\\xbe\\xc8\\xba4\\xbe\\x11\\x14F\\xbe\\xa8\\xa2N\\xbe\\x82\\x0eP\\xbeL\\x9aM\\xbe\\x7f\\xefF\\xbe\\xcf\\xf4>\\xbe\\t\\xe82\\xbe\\xf6a\\x1f\\xbe\\x1c\\xec\\x07\\xbeq\\xdb\\xda\\xbd\\xdb\\x99\\x9f\\xbd-\\xce?\\xbd\\xe1\\x03\\x0c\\xbcX\\xd7\\x1a=\\xf7\\x15\\xaf=\\xdcm\\x07>J\\x1c3>\\xd9yT><\\x0cm>~*\\x7f>\\xd5\\xea\\x84>\\xa0\\x8c\\x87>j\\xec\\x86>*\\xe6\\x81>O\\x9er>\\xa4\\xd3Y>N\\x088>\\xfd\\xf9\\r>$\\x83\\xbe=\\xd2\\x99D=n[\\xad;\\xc8\\xb8\\x0b\\xbdJ\\x91\\x8b\\xbd1\\x19\\xc6\\xbd$j\\xf4\\xbd\\xcb\\x0e\\x0c\\xbe\\xf9/\\x1b\\xbe+\\x87*\\xbe\\x0f\\xac<\\xbe\\xf2\\x95O\\xbe9\\xee\\\\\\xbe8M_\\xbe\\xcd\\xa3T\\xbe$\\xf5=\\xbe\\xa9\\x17\\x1f\\xbe\\x81\\xf5\\xf6\\xbd\\xa4\\xd5\\xa7\\xbd6~.\\xbd!$\\xd3\\xbb&F\\xcc<\\xd4\\xc5I=cc\\x85=\\xc0\\x08\\x94=\\xd2\\\\\\x93=\\x7f\\x12\\x88=\\xa4\\x07r=\\xea\\x93g=\\xd18u=\\x1b*\\x84=\\xd6\\x03\\x88=Y\\xdax=\\x1f9A=j\\xcf\\xf2<\\x8a\\xe5\\x1a<\\xc9Qm\\xbcK\\x02,\\xbd\\x0e\\x1f\\x90\\xbd\\xde\\x05\\xbf\\xbd\\xc5\\xd0\\xd3\\xbd\\xb7\\r\\xcc\\xbd<\\xb4\\xae\\xbd0\\xf5\\x83\\xbd\\x9f\\xb90\\xbdl\\xf8\\xc0\\xbcJ\\xbf;\\xbb\\xf1p\\x9c<1\\x05+=\\xe6_\\x84=\\xb6\\xa9\\xb0=\\xc5\\x0b\\xdc=\\x8d\\x93\\x03>\\x8b\\x1f\\x17>>X\\\'>\\xcd\\xa92>\\xb9-8>\\xbab7>\\xffy/>$\\xf8 >\\x00\\xed\\x0c>\\x888\\xe9=\\xc7s\\xb0=\\xd0\\x8a^=\\xc74\\x9a<t\\x86\\xa6\\xbc)\\x11w\\xbdm\\xe3\\xc7\\xbd\\x8f\\x9d\\x05\\xbe\\x0c{"\\xbe\\xcd\\\'<\\xbe$WS\\xbeo\\xb1f\\xbe\\xc8\\xcds\\xbe\\xc6\\xa4z\\xbe\\xc3J}\\xbeSc{\\xbe\\xa0\\x81t\\xbe\\x14\\xa4d\\xbe \\xb4E\\xbe\\xacp\\x1b\\xbe\\x7f\\xc9\\xd6\\xbd:Xj\\xbd\\x80\\x7fo\\xbc\\xa4S\\xce<\\x8b\\xd5\\x83=\\xc0#\\xcc=\\xb7;\\x05>T\\x1f\\x1e>\\x9491>\\x0clE>\\xfd\\xd8[>\\x9d\\tp>\\xfa;\\x80>\\xde]\\x84>r\\xff\\x81>,3s>\\xceHW>\\x1bD1>9#\\x05>\\xac\\xb3\\xae=eN.=c\\xa5\\x9a;\\xaa\\x9d\\xe9\\xbc\\xceEn\\xbd\\xe9\\xbc\\xaa\\xbd\\xca \\xd1\\xbd\\xd4\\xa7\\xe7\\xbd\\x8f\\x12\\xf5\\xbd\\r\\xeb\\xfe\\xbdYu\\x04\\xbe\\xeb\\x9d\\n\\xbe\\xdc[\\x0e\\xbe~T\\r\\xbe\\x10\\xd8\\x04\\xbe\\xc0=\\xe8\\xbd\\xa3\\x96\\xbe\\xbd\\xde_\\x8c\\xbd\\xb2\\x8f\\x1f\\xbd \\xdd\\xeb\\xbb\\\\\\xdc\\xc1<{4H=\\x00\\xd1\\x82=\\xaf@\\x8e=:i\\x8a=..p=\\x9f^9=\\xc9\\xe0\\xeb<\\xfd#F<U\\xf1\\xf9:\\xf6{\\\\\\xbb\\x04\\x96\\x05\\xbc\\xd9qx\\xbc)C\\xf8\\xbc\\xd6vN\\xbd`\\xc5\\x8d\\xbd\\x06\\x94\\xb3\\xbd>t\\xd5\\xbd\\xcb\\xe8\\xf3\\xbd\\xe0\\x14\\x07\\xbe\\x83h\\n\\xbe,\\x8a\\x03\\xbe\\xed\\x16\\xec\\xbd\\\'\\xb8\\xc4\\xbd\\xd1\\x03\\x96\\xbd\\x97\\xa1@\\xbd\\xb6Kx\\xbc#\\t\\xb3<\\x07Mz=\\xcf\\xd4\\xcb=4h\\t>\\x9c\\xa3&>\\xa9\\xdc>>\\x13\\xedR>/\\xab`>#bg>EBg>\\xd6\\xf7`>\\xd4>U>\\xb1QD>\\xc2\\xc8->\\x8b^\\x10>w\\x95\\xda=\\xb1\\xc9\\x8d=Y\\xbf\\xfd<\\x9d\\x08\\xd1\\xbb?\\x9b7\\xbd\\xb9\\xdb\\xaa\\xbdF\\xee\\xf4\\xbd\\x81\\xe1\\x1c\\xbe\\x88\\x7f:\\xbe\\xff\\xdcS\\xbe\\x08lk\\xbeA0\\x7f\\xbe_@\\x86\\xbez\\x17\\x89\\xbe\\xb1\\xdb\\x87\\xbe\\x9b\\x15\\x82\\xbeTxn\\xbe5\\xe5N\\xbe\\xe2v\\\'\\xbeT\\x95\\xf5\\xbd\\xab\\xb1\\x98\\xbd-*\\xf4\\xbc\\x9b\\xd9|<\\x13Ht=&\\xfa\\xc8=\\xb5\\xfc\\x02>y\\x13\\x17>\\xedC#>zl.>m\\x10;>H\\xb8G>\\xab7R>\\xaf\\x08U>\\x91\\xe1N>\\x83EA>y\\xee*>\\x8c8\\x0f>\\xf8\\x9c\\xe1=\\xbd\\x0f\\x9d=\\xcd\\xad+=\\x85[\\x12<\\xf1l\\xa3\\xbc\\x93\\xeb,\\xbdM\\x88k\\xbd\\xcdi\\x8a\\xbd\\x0b\\x80\\x99\\xbd\\xc7\\xeb\\xa4\\xbd\\x1d\\x0e\\xad\\xbd\\x7f\\xce\\xb1\\xbdG\\xbb\\xb0\\xbdH7\\xa5\\xbd\\x92\\x97\\x8c\\xbdH\\xa0Q\\xbd\\xab\\xfb\\xf0\\xbcp\\xf7\\xb1\\xbbk8\\x9c<m\\x8f3=\\xeai\\x89=;\\xa7\\xaf=\\xaf\\x95\\xc4=c\\x9b\\xc1=g\\xc7\\xa7=\\xca\\x87}=\\xbd\\xee\\x1e=i^\\x87<\\x82\\xc4\\xf0\\xba6\\xcd\\x88\\xbc\\x1cI\\x00\\xbd\\xd0\\xac=\\xbd\\xa3)\\x85\\xbd\\xb3\\x85\\xb6\\xbdK)\\xdf\\xbda\\xa2\\xf9\\xbda\\xdc\\x06\\xbe\\x1a\\xa0\\r\\xbe\\xa0\\xd2\\x15\\xbe\\xf1\\x19\\x1f\\xbeN\\xcc"\\xbe\\x89\\xfa \\xbe\\xdb\\xa7\\x19\\xbel\\xc4\\x0c\\xbe"\\x81\\xfb\\xbd\\xa5\\xfc\\xd0\\xbdw9\\x91\\xbd[\\x8d\\x03\\xbd\\x9f\\xb1_<7#\\x84=m5\\xe7=:\\xe1\\x1e>\\x87\\x91C>\\x1bx^>&vp>\\x07\\x1f}>\\xabW\\x82>l/\\x84>\\r\\xf0\\x83>=\\\'\\x7f>\\xe1Hl>O\\xc4N>\\x0b](>\\xbc\\xc3\\xf7=\\xb0\\x96\\x9a=gm\\x06=\\xe0e\\xd8\\xbb\\xae\\x08/\\xbd\\xc4\\x12\\x9c\\xbd\\x85\\x03\\xda\\xbdM\\xdb\\x07\\xbe\\x12\\x9b"\\xbe\\x92,>\\xbe\\x94\\xf9X\\xbe^\\xbdq\\xbe\\xb2\\x91\\x82\\xbek^\\x88\\xbe\\xb1_\\x89\\xbei\\\'\\x84\\xbe\\xc8\\xeao\\xbe\\x15(L\\xbec\\xa2!\\xbe<\\x14\\xe9\\xbd\\x97\\xdb\\x8f\\xbd\\xb5\\x9c\\xdd\\xbc\\x13\\no<\\x98!T=\\xa8\\xa4\\xa9=\\xb0\\x18\\xd1={X\\xdf=\\x9e\\x9b\\xe6=\\xb2\\xee\\xef=\\x91M\\x00>\\xa7\\xdf\\x0c>)\\xef\\x16>\\xdd\\x14\\x1b>v\\xef\\x17>/\\xe7\\n>\\x1f,\\xec=7\\x01\\xb6=\\x86.i=H\\x0f\\xca<\\x91\\x9f\\x9b\\xbb^\\xc0\\xf4\\xbc\\xd1T@\\xbd\\x16\\xc7d\\xbd\\xcd\\xedp\\xbd\\xd1\\x8ei\\xbd\\xd0\\xe4U\\xbd4*?\\xbd3\\xaf,\\xbd\\xf1\\x08\\x1d\\xbdd\\xe3\\x03\\xbd\\xe3D\\xa7\\xbc\\x03_D\\xbaJ,\\xce<d[V=\\xf0\\xba\\x9d=H\\xb9\\xc6=\\xba\\xf7\\xe3=\\xc23\\xf8= D\\x02>\\x0c\\xf8\\x01>X\\xfe\\xf2= \\x11\\xd1=6r\\xa1=L\\xa4R=\\xc6\\x8c\\xaf<\\x8f\\xd6\\x12\\xbc:\\x0e\\x1c\\xbd\\xeeT\\x84\\xbdA\\x04\\xb4\\xbd\\xf6.\\xe2\\xbd*\\xa4\\x07\\xbe$\\xc6\\x1d\\xbe\\x02:4\\xbe\\xc85C\\xbe\\xa15H\\xbe\\x90\\xc5H\\xbeZTE\\xbe\\x16oA\\xbe\\xc6\\x13=\\xbe%D1\\xbe\\xba\\x8c\\x1e\\xbe\\xa2\\xad\\x07\\xbeh?\\xd9\\xbd\\x8dY\\xa0\\xbdm`>\\xbd\\x85v\\x9c\\xbb\\xfbW1=\\xf1\\xd9\\xbe=\\x8fZ\\x12>g\\x8a=>/\\x11]>\\x80\\xaft>G\\x1d\\x82>\\x18O\\x86>4\\xae\\x88>S\\xce\\x87>a\\x1e\\x83>\\x94zv>\\x0c\\n]>3\\xe78>\\x8f\\xfd\\x0c>Th\\xbb=\\xa3\\xc1<=t\\x8e\\\\;\\xa8\\x1d\\x10\\xbdo\\xbf\\x8d\\xbd.\\x0b\\xc8\\xbd\\xe1\\xb5\\xf6\\xbd\\xffM\\x0e\\xbe\\x9d\\x90\\x1e\\xbe\\x99\\xf70\\xbe\\x1d\\xb2F\\xbe\\xaf\\xdcZ\\xbe\\xb8mh\\xbe\\xddMj\\xbe\\x9et^\\xbe\\xfbHG\\xbe\\x19\\x97\\\'\\xbe\\x05o\\x01\\xbev\\x8b\\xb0\\xbd/\\xf7>\\xbd\\x0e\\xbd\\\'\\xbcc\\x8d\\xa8<\\x80\\x99:=\\x17D\\x82=1\\xde\\x94=\\x15D\\x99=o\\xd0\\x90=\\x81\\x92\\x82=G}\\x80=S\\x95\\x8a=\\x15\\x84\\x97=\\xa7h\\x9f=\\xf0\\xfe\\x95=\\x8b\\xd5v=\\xebR0=B\\xd6\\xb2<\\xac\\xf2]\\xbb\\xf8\\x1f\\x03\\xbd|\\x9b}\\xbd@-\\xaf\\xbd\\x19+\\xc5\\xbd\\x13\\x8c\\xc0\\xbd;Z\\xa5\\xbd\\xd1\\xabx\\xbd\\xd3\\xbb%\\xbdxt\\xb2\\xbc\\xc8\\xc09\\xbb\\xc0\\x8c\\x85<\\xf3\\xee\\x11=\\xd1Td="L\\x9c=j\\xf5\\xc7=\\x9dZ\\xf4=pM\\x0e>\\\'\\x93\\x1e>\\xd6\\xa6)>;\\x00/>\\xc9\\x99.>o\\xc6&>\\xa4&\\x18>d\\x83\\x04>\\xb6j\\xd7=+\\xcc\\x9c=\\x18|6=\\xa8L\\x0c<\\\'\\x82\\xf5\\xbc\\x94\\xfa\\x89\\xbd0b\\xd1\\xbd\\xc7\\x86\\x08\\xbe\\x80r$\\xbe\\xaam>\\xbe\\xf3bT\\xbe\\x1d\\xfdd\\xbeZ!q\\xbex\\xb5w\\xbe!\\x97{\\xbe\\xbc\\x02~\\xbe\\x11+v\\xbe1\\xad_\\xbe\\x99c=\\xbe\\xd0\\xe8\\x11\\xbeT\\xf8\\xc9\\xbdHjo\\xbd\\xa8L\\xa0\\xbc\\x03t\\x99<\\xf6Tg="6\\xbf=*}\\xff=\\xb1\\xf6\\x19>\\x8e\\xba2>\\xce\\x8eJ>Qtb>\\xf4\\xa0y>\\xe6\\xfb\\x84>\\x89\\xc2\\x87>1{\\x84>\\xb9au>\\xe7^V>-\\x88/>*F\\x04>I\\xd5\\xb0=\\x16\\xcf:=\\x0bj\\xe5;|[\\xef\\xbc\\xf5\\xc0|\\xbd\\xa1S\\xb4\\xbd\\xa8\\xe1\\xd9\\xbd\\xd3\\xa0\\xf2\\xbd\\x8c3\\x01\\xbe$u\\x07\\xbe?\\x04\\x0f\\xbe\\xef\\x9b\\x16\\xbe\\xd0\\xd9\\x1b\\xbex\\xba\\x1b\\xbe\\xfd\\xe8\\x13\\xbe\\x16\\x08\\x05\\xbe{n\\xde\\xbdC\\xed\\xa4\\xbd\\xf4\\x83E\\xbd31o\\xbc\\xc93\\x89<L\\x93)=p n=\\x8dl\\x8a=-2\\x8b=9\\x9dt=m\\x86?=59\\xff<\\x99\\xc4\\x93<\\xe1)I<\\xa8\\x88 <\\xac\\xd9\\xd4;\\xb2\\xf8\\xcb\\xba\\x97\\xcd\\x8f\\xbc\\xbf\\xc3\\x15\\xbd\\xf1\\x95a\\xbd$v\\x96\\xbd\\x99d\\xba\\xbd\\xc8:\\xdc\\xbdH9\\xf5\\xbd\\x89\\x80\\xfc\\xbdc:\\xf1\\xbd\\xfb\\xab\\xd7\\xbd$\\x1b\\xb3\\xbdB\\xb4\\x82\\xbdE\\x85\\x14\\xbd}\\xeb\\xae\\xbbe\\xa8\\xf7<\\x94\\x1c\\x89=\\x829\\xd1=M\\xdf\\t>DQ%>\\x87\\xc1;>d\\x85M>\\x04\\xbfX>\\xd0=^>7\\x08_>\\xc4VZ>\\x8b\\xb0O>Q\\xe0?>=\\xc6)>,\\xde\\x0c>\\xc2?\\xd6="\\x86\\x8b=\\xb9&\\xfa<\\x08z\\xea\\xbb\\x87\\x97=\\xbd\\xb3=\\xae\\xbd\\xb9\\x1b\\xf9\\xbd\\xdc\\t\\x1f\\xbed\\xf8<\\xbe\\xeb\\xdeV\\xbe\\xa9\\x7fm\\xbe\\xc21\\x7f\\xbe!\\x86\\x85\\xbe\\xe4R\\x88\\xbe\\xc3B\\x87\\xbe9{\\x81\\xbe\\xd1Qm\\xbe\\xea"N\\xbe\\x1fc\\\'\\xbeK\\x02\\xf9\\xbd\\x843\\x9c\\xbd\\xa0\\x88\\xe1\\xbcD4\\xae<\\xb9\\xd3\\x88=\\xc4\\r\\xd6=v\\x98\\x06>\\xffU\\x19>\\xdc\\xbc&>\\x9b_3>n\\xabA>\\xa4nO>\\xc8\\xacY>\\x16C^>?\\x9eZ>~-M>\\x1e\\xd37>\\xdf"\\x1c>\\xf5\\x8c\\xf5=;\\t\\xab=\\x8b\\xef:=\\x06\\xca\\x1c<O\\x93\\xad\\xbc\\x90\\x065\\xbdq=v\\xbd\\x1d\\x10\\x92\\xbd\\x87x\\xa3\\xbd\\xac\\xaf\\xb1\\xbdl\\x15\\xbc\\xbd\\xa27\\xc2\\xbd\\x8eN\\xc2\\xbd$\\xf8\\xb8\\xbd\\x0c\\xd2\\xa4\\xbd+X\\x85\\xbdg\\x049\\xbd\\xb8\\x1f\\xb7\\xbcax.;\\xca_\\xeb<<\\xa6Y=\\xfd#\\x95=K\\xf5\\xac=L\\x0c\\xaf=\\xd0U\\x9c=;\\xf8r=?\\xfd\\x1b=\\x03\\xd0\\x96<*\\xf51;\\x19U8\\xbc\\xbb\\x0b\\xc4\\xbcK~!\\xbd\\xd2\\xb9x\\xbd)\\x88\\xa2\\xbdJ\\xf1\\xbd\\xbd\\x15y\\xd4\\xbd\\xde\\xc0\\xe5\\xbd\\x0fJ\\xfc\\xbdg\\xe4\\x0b\\xbeBo\\x15\\xbe\\x81\\r\\x1a\\xbe\\xc0\\xe4\\x18\\xbe\\xf8\\x16\\x11\\xbe\\xa1\\xd0\\x06\\xbe/!\\xf0\\xbd]\\x9f\\xbf\\xbd\\xc5Q\\x7f\\xbd\\xc8\\xb3\\xbe\\xbc\\xfa\\xa0\\xc2<\\x11\\x9a\\x93=\\xa6\\xf6\\xef=\\xd9\\xef!>zCC>w\\x9bZ>/\\x13l>K\\xd0w>Mm~>\\xf7T\\x81>\\x0eZ\\x80>\\x13\\xc2u>\\xe3~b>\\x1c\\xf7E>\\xb2L!>\\xdfJ\\xef=\\xb8\\xd2\\x98=\\x05\\x12\\x06=\\xf4R\\xe3\\xbbI\\xec4\\xbd\\x05\\xca\\xa1\\xbd\\xea\\x86\\xde\\xbd\\xcf\\x90\\x0b\\xbeD\\xf9\\\'\\xbe\\xdb\\x05B\\xbe\\xeae[\\xbe\\x1b2r\\xbe#\\xaf\\x81\\xbe\\xc2\\xbf\\x87\\xbey\\xdf\\x88\\xbeo\\xd3\\x82\\xbe\\xb5\\xdbl\\xbe\\xa1\\x9aI\\xbe\\x7f9 \\xbe\\xa0\\xdb\\xe9\\xbd\\xcb\\xd6\\x8f\\xbd\\xc0\\xf7\\xd3\\xbc\\x18\\xae\\x84<ABa=l\\xf8\\xae=b\\xf8\\xd3=\\xc4\\xf3\\xea=\\xd2|\\xfb=\\x9e\\x04\\x05>\\\'d\\x0f>\\xcb\\x12\\x1a>\\xcb\\x9e">\\x9a\\xc4\\\'>\\x8d\\x90#>\\x08\\xa8\\x15>{\\x0f\\x00>I4\\xc5=\\xb6!\\x85=J\\x0e\\x0e=\\xcfO\\xba;\\xab"\\x92\\xbcB\\xaa\\r\\xbd\\xfc\\x83=\\xbd\\xc4cV\\xbd\\xe4\\xbdY\\xbd\\x13*Q\\xbd\\xc1\\xcdG\\xbd\\xac\\xc1D\\xbd6\\x81D\\xbdb\\x836\\xbd\\x15\\xe9\\t\\xbd]xq\\xbcn\\x91-<P]\\x1c=\\x96\\xfb\\x82=\\xef\\x93\\xaf=\\xc5$\\xd0=J\\xd8\\xe7=GF\\xf6=\\x1e2\\xf5=\\x1a\\xd0\\xe3=_\\xd4\\xc1=s\\xea\\x90=a\\xa9+=\\xfb\\x85><%\\xb9\\x86\\xbc\\x0cH)\\xbd\\xfe<\\x80\\xbd\\x8fZ\\xa9\\xbd\\x1c\\xe0\\xd5\\xbd\\xc6\\x15\\x01\\xbe\\x83\\xfe\\x17\\xbe&\\xb4-\\xbe\\xfe\\xe69\\xbe\\xe6\\\\>\\xbe4\\xbc>\\xbeL <\\xbe\\xbb\\x87;\\xbe?\\xde8\\xbe\\xc4\\x1f.\\xbe\\\\\\xcb\\x1d\\xbe\\x01-\\x08\\xbe\\x89Y\\xdb\\xbd\\xc5\\xac\\xa2\\xbd\\xd4\\xa69\\xbdj\\xa8\\x04\\xbb\\xc2\\xfa:=\\xf2\\x12\\xc6=f\\xa9\\x16>\\x04\\xac?>\\xbdv]>\\xa0\\x84r>\\xdcS~>\\xa5\\xe6\\x82>\\xbaN\\x85>0k\\x84>\\xaa\\x93\\x80>L}q>\\n|U>\\xcc_/>Th\\x02>,\\xde\\xa5=\\x9bV\\x13=\\r\\xfe\\xcc\\xbb0,3\\xbd Q\\x9c\\xbd\\xbb\\xd2\\xd3\\xbd\\x85\\x94\\x00\\xbe\\x8ft\\x13\\xbes\\x9c$\\xbeR\\xd18\\xbe\\x08\\x90O\\xben1d\\xbe\\x7f\\x04r\\xbe\\x12\\x91s\\xbe\\xdc~g\\xbeXlO\\xbe\\xbf\\xb1-\\xbe\\xe5b\\x05\\xbeQ\\xb6\\xb4\\xbd\\xe0\\xffC\\xbdL\\xad)\\xbc\\x85\\xec\\xbb<\\xbd\\xceM=>Y\\x8f=\\xd6|\\xa4=Dy\\xa8=8\\xce\\x9e==\\x1f\\x95=\\x06\\x9c\\x99=_\\xb5\\xa8=\\x85\\xb4\\xbb=\\x82B\\xc6=Ka\\xbd=\\x88\\xed\\xa4=]\\x93\\x7f=\\xb5\\xc5 =\\x88"O<\\ne\\x90\\xbc\\x11\\xc5A\\xbd\\xd0\\x13\\x8e\\xbdB\\x92\\xa5\\xbd\\x06H\\xa4\\xbd\\xc8\\xea\\x8a\\xbd\\xe7\\x80M\\xbd\\xfa\\r\\x07\\xbdP\\xcf\\x8c\\xbc\\xbf\\xd5\\\'\\xbbO\\xa2H<\\xaa\\xcb\\xed<\\xc7ND=\\x0cp\\x8c=\\xe4\\x87\\xba=*\\x0f\\xe8=\\xb9%\\x08>\\xb7\\x96\\x18>\\x1f\\xb4#>\\xd7\\xa6)>\\xb7m)>\\x8c}!>\\xc1\\xa8\\x13>\\xa0o\\x00>\\xe1\\xe3\\xce=\\x84\\r\\x94=\\xeb\\xe0$=\\x8f#\\x9c;\\xe0\\x18\\x04\\xbdo\\x0f\\x8b\\xbdi"\\xcf\\xbd\\x9b$\\x06\\xbe\\xc4\\x80!\\xbe\\xa789\\xbeD\\x06L\\xbey\\x82Z\\xbe\\xbe\\xcac\\xbe\\xb3Ij\\xbe;7p\\xbe\\xa7\\xccn\\xbe\\xa8\\xd7a\\xbe_\\xe2I\\xbe\\xd5V(\\xbe&\\x0e\\x03\\xbe\\x9c\\xce\\xbb\\xbd\\\'\\\'c\\xbd\\x988\\xa1\\xbc\\x19#\\x8b<\\xf7Dc=\\xf6\\x1e\\xbd=l\\x15\\x01>9\\xab >\\xd8\\xd9;>>3U>\\x822n>{+\\x81>&g\\x87>)\\xbe\\x88>\\x1a\\xa8\\x83>\\xf7gp>\\xf7\\xc0O>\\x9f\\x8a(>\\x1e\\x84\\xfc=\\xc7\\xd2\\xa7=\\xce\\x9c&=D\\xc2\\xc78\\xdeo\\x1a\\xbd\\xfa:\\x90\\xbdJ\\x11\\xc5\\xbd\\r\\xb4\\xeb\\xbd\\xcb\\xaf\\x02\\xbe\\xd2\\x93\\x0b\\xbeP\\xc7\\x13\\xbe\\xa3\\xc3\\x1c\\xbeR\\xc9%\\xbe\\xa0\\xdf+\\xbevi,\\xbe(&%\\xbeRt\\x14\\xbeD\\x18\\xf6\\xbdTE\\xb6\\xbd\\x8e\\x86_\\xbd\\x1a8\\xa7\\xbc\\xbb\\x1f/<f\\x84\\x15=\\x10\\xeec=:\\xae\\x88=\\xac~\\x89=\\x03\\x90p=\\xc6;>=\\xca\\xb9\\x02=\\x171\\xae<\\xadK\\x94<\\x9d>\\x88<\\xf0\\x0e^<\\x00\\xb1\\x92;\\x10 Q\\xbcM1\\x03\\xbd\\xe08Q\\xbd\\x8bg\\x91\\xbdx\\x85\\xb7\\xbd\\xaa\\xaa\\xda\\xbd\\xb0m\\xf6\\xbd?\\xfc\\xfe\\xbd^a\\xf4\\xbdB\\xb9\\xdb\\xbd\\x7f\\x95\\xb2\\xbd\\x90\\xec{\\xbd\\x97\\xd5\\r\\xbd\\xcfT\\x90\\xbb\\xaa7\\xec<\\xfel~=^\\xb6\\xc3=\\xb8G\\x01>\\x94-\\x1b>G\\x960>\\x8f\\xb2@>\\xb8\\xdeJ>L\\x97P>.aR>;\\xb8N>\\x86\\xd4D>D\\xfe4>yz\\x1e>E\\x94\\x02>\\xe4x\\xc5=\\xf6\\xe2|=<\\xe0\\xd3<\\x0c\\xf0D\\xbc\\x80\\x13W\\xbd\\xc0Q\\xbd\\xbd\\xf5\\xc6\\x05\\xbex829R\\\\xcb\\\\x829\\\\xde,\\\\x809\\\\xc9\\\\xba\\\\x8b9\\\\xb2k\\\\xa69+\\\\xb8\\\\xdd9@\\\\xdb\\\\x05:y\\\\xcc!:\\\\rt9:\\\\xeb\\\\xa4=:\\\\xd7gA:A\\\\xbaD:3BZ:\\\\x84uu:\\\\xaf\\\\xb3\\\\x83:\\\\x99;\\\\x8b:\\\\xd1\\\\xea\\\\x8a:\\\\xd3\\\\x9c\\\\x8c:rP\\\\x92:<W\\\\x99:\\\\xdd\\\\x0f\\\\xa0:\\\\xf1\\\\x82\\\\x9d:\\\\xffc\\\\x9e:\\\\xfd\\\\xf9\\\\x9d:\\\\xe6u\\\\x9e:\\\\x87\\\\x98\\\\xa4:\\\\xb7\\\\x1d\\\\xad:\\\\xf0Q\\\\xb5:\\\\xf6I\\\\xb4:\\\\x88\\\\xa8\\\\xae:?$\\\\xa7:4\\\\xc1\\\\xa2:7\\\\xaa\\\\xa5:\\\\nY\\\\xa6:{\\\\xce\\\\xa3:i\\\\xba\\\\x9f:\\\\xe5H\\\\x98:\\\\xd8\\\\x11\\\\x90:\\\\xf0~\\\\x86:\\\\x18\\\\n\\\\x80:u\\\\xf5o:\\\\xef\\\\xce`:\\\\x01\\\\xdfa:N\\\\xae[:9\\\\xcfM:\\\\x92\\\\x1e::P\\\\x00$:\\\\xcc\\\\x8f\\\\x1b:\\\\x1e\\\\x8c\\\\x10:\\\\xaf#\\\\x00:"\\\\xea\\\\xf79wg\\\\xdf9)\\\\x9c\\\\xb89\\\\xf8\\\\xca\\\\x909\\\\xd2~%9?i[8O0\\\\xdd\\\\xb7\\\\x1f}\\\\xf1\\\\xb8?6P\\\\xb97\\\\xc1\\\\x90\\\\xb9z%\\\\xc5\\\\xb9\\\\xees\\\\xf4\\\\xb9\\\\xab\\\\xbd\\\\x0f\\\\xba\\\\xc8\\\\x88\\\\x1f\\\\xba\\\\xfdp+\\\\xbaMw8\\\\xba\\\\xd6\\\\xd1F\\\\xbaG=^\\\\xba\\\\x8egr\\\\xba\\\\x9b\\\\xad\\\\x85\\\\xba\\\\xfdI\\\\x97\\\\xba\\\\xa1l\\\\xa0\\\\xbam\\\\xdf\\\\xa9\\\\xba\\\\xbc\\\\x08\\\\xb8\\\\xba\\\\x815\\\\xbf\\\\xba\\\\xb7\\\\xb8\\\\xc4\\\\xbaz:\\\\xc8\\\\xba!\\\\x92\\\\xcc\\\\xba\\\\x96\\\\xa9\\\\xd0\\\\xba\\\\xe6\\\\x17\\\\xd3\\\\xba\\\\x01\\\\xce\\\\xd7\\\\xba\\\\x1c\\\\xc7\\\\xda\\\\xba\\\\x8c%\\\\xe2\\\\xba{\\\\xcb\\\\xeb\\\\xba\\\\xd3\\\\xc9\\\\xf4\\\\xba\\\\xec\\\\x04\\\\xfe\\\\xba\\\\xfe\\\\x10\\\\x02\\\\xbb\\\\xfb\\\\xa4\\\\x02\\\\xbbB\\\\xdd\\\\x04\\\\xbbi\\\\xae\\\\x06\\\\xbb\\\\x80\\\\xe5\\\\x06\\\\xbbd\\\\x9c\\\\x07\\\\xbbp\\\\x87\\\\x07\\\\xbb\\\\x02\\\\xd4\\\\n\\\\xbb9o\\\\x0e\\\\xbb\\\\xba%\\\\r\\\\xbb\\\\x9an\\\\x0b\\\\xbb\\\\xda\\\\x10\\\\n\\\\xbbL\\\\xae\\\\x06\\\\xbb\\\\x9e\\\\x9e\\\\x03\\\\xbb\\\\xd1\\\\\\\\\\\\x00\\\\xbb\\\\x06]\\\\xf9\\\\xba\\\\xceg\\\\xf6\\\\xba\\\\xe9?\\\\xf3\\\\xba\\\\x01\\\\xed\\\\xf1\\\\xba1\\\\\\\\\\\\xef\\\\xba\\\\xb0\\\\r\\\\xe5\\\\xba:p\\\\xe2\\\\xba\\\\xca\\\\x11\\\\xe1\\\\xba\\\\x07\\\\xcc\\\\xe0\\\\xba\\\\x82\\\\xe9\\\\xdf\\\\xba9\\\\xc9\\\\xd1\\\\xba\\\\xfe\\\\xff\\\\xc3\\\\xba\\\\xa7\\\\x0f\\\\xb5\\\\xbaZ\\\\x80\\\\xa7\\\\xba\\\\xa1g\\\\xa5\\\\xba\\\\xed\\\\xa7\\\\xa5\\\\xba\\\\x9eg\\\\x9f\\\\xba\\\\x07\\\\\\\'\\\\x94\\\\xba\\\\xfb\\\\xb2\\\\x82\\\\xba\\\\xec\\\\x7fc\\\\xba\\\\xd5\\\\xa7U\\\\xba\\\\xa0\\\\xfbL\\\\xba\\\\x9aHE\\\\xbap\\\\xa56\\\\xba\\\\x88\\\\x80\\\\x18\\\\xba\\\\xcd\\\\x1e\\\\xf2\\\\xb9\\\\x7f\\\\x84\\\\xc5\\\\xb9m\\\\xb6\\\\x99\\\\xb9\\\\x17\\\\x03\\\\x92\\\\xb9|\\\\xaf~\\\\xb9\\\\xff?%\\\\xb9\\\\xe2\\\\xf3\\\\x05\\\\xb9\\\\xf5UQ\\\\xb8K-\\\\xde\\\\xb6f\\\\xef \\\\xb6\\\\x04\\\\x04*8\\\\xd5H\\\\xad\\\\xb7A"\\\\x92\\\\xb8\\\\xa7\\\\xb1\\\\xdb\\\\xb7#f\\\\x947\\\\xd4\\\\xea\\\\xbb8S\\\\x1a79N\\\\xf4\\\\x829\\\\x19\\\\xa3\\\\xa19\\\\x8co\\\\xbd9P\\\\x98\\\\xbe9\\\\x01\\\\x82\\\\xc09\\\\x8a\\\\x9d\\\\xdd96\\\\xce\\\\xf99\\\\xd5\\\\x17\\\\x0e:\\\\xf5z\\\\x1c:$V#:\\\\x8f{\\\\\\\':\\\\xad\\\\x13$:\\\\x0eN :\\\\xc1(#:m%6:\\\\x06\\\\xa5Z:\\\\xb4\\\\xffr:\\\\xec\\\\xa8s:4\\\\xffm:H\\\\x07g:\\\\x83sa:\\\\xeb+a:,\\\\x9fe:\\\\x82\\\\xcaw:<\\\\xe7\\\\x82:\\\\x9dl\\\\x84:l\\\\xa0\\\\x84:L.|:0\\\\x83x:\\\\xa94}:`q{:\\\\x90\\\\x8c{:X\\\\xad}:L\\\\x1e\\\\x80:\\\\x04n\\\\x80:J\\\\xce\\\\x85:\\\\xba\\\\x89\\\\x87:\\\\x88G\\\\x89:0\\\\x82\\\\x8e:y\\\\xd3\\\\x8d:\\\\x7f\\\\x8f\\\\x8d:l`\\\\x85:\\\\xeb\\\\x07u:\\\\x17Zm:\\\\xf3m[:\\\\\\\' O:\\\\x82\\\\xa7M:\\\\x11eN:/\\\\x9fS:\\\\x93\\\\x14M:\\\\xc9\\\\x81@:\\\\x8d\\\\xa19:\\\\xa8\\\\xdb::\\\\x0b\\\\x10<:Y\\\\x17>:t\\\\\\\\@:\\\\xc6\\\\xf0+:H\\\\x1e#:\\\\x1a\\\\r):vs":\\\\xd8\\\\x1e#:E\\\\xa0$:L\\\\xa2 :\\\\xc4\\\\x0c\\\\x1a:\\\\xbc\\\\xb7\\\\x07:\\\\x80\\\\x1e\\\\xfa9A\\\\x1c\\\\xf99\\\\xf4]\\\\xff9\\\\xe2\\\\x1f\\\\n:\\\\xed\\\\xf5\\\\x14:\\\\xb3\\\\xb3\\\\x11:#\\\\xc0\\\\x01:\\\\x84S\\\\xfe9\\\\xdf\\\\xb6\\\\x03:\\\\xfc\\\\xa9\\\\x0e:,\\\\xba\\\\x0f:1o\\\\xf89\\\\xf8\\\\xa5\\\\xde9\\\\xf0\\\\xf5\\\\xc49\\\\x0b\\\\x92\\\\xc29\\\\xca\\\\xb4\\\\xda9\\\\xabc\\\\xfc9\\\\xf5\\\\x89\\\\x0c:\\\\xabZ\\\\x08:7\\\\xc2\\\\x04:~\\\\xf8\\\\xfa9g"\\\\xfb9\\\\xf1[\\\\t:\\\\xbb\\\\xcc\\\\x06:\\\\x0e;\\\\x00:\\\\xd6\\\\xf4\\\\xdd9\\\\xc1*\\\\xc49g\\\\xfd\\\\xbf9\\\\xc8\\\\xa0\\\\xc29F\\\\xbc\\\\xd99\\\\x8a\\\\xc5\\\\xee9\\\\xb3\\\\x8a\\\\xfd9w\\\\xf4\\\\xed9\\\\xb9o\\\\xe69\\\\x16&\\\\xf19\\\\xf7\\\\xd2\\\\xfa9oT\\\\x07:X\\\\x91\\\\x08:\\\\x17T\\\\x0c:\\\\xd86\\\\x07:\\\\xaf\\\\x15\\\\xf59n\\\\xd8\\\\xf89\\\\xfb\\\\xc9\\\\x05:\\\\xb6q\\\\x16:!\\\\xf6 :\\\\xb6\\\\xfa":%\\\\xc9\\\\x1b::G\\\\x10:\\\\xfa\\\\xa7\\\\t:K<\\\\x00:\\\\x82\\\\xbf\\\\xf79x\\\\xb6\\\\xe59(\\\\x91\\\\xda9\\\\xc0\\\\xa1\\\\xca9\\\\xb3\\\\xd3\\\\xc39 \\\\xef\\\\xc09\\\\x85\\\\x94\\\\xb89\\\\xbf\\\\xe9\\\\xc49\\\\xcc\\\\xf8\\\\xc29"X\\\\xd29^\\\\xf2\\\\xd69\\\\xf1\\\\xd6\\\\xc39\\\\xf9_\\\\xc29\\\\x05\\\\t\\\\xa59lA\\\\x869\\\\xe8\\\\xd6E9\\\\x0c\\\\xb0\\\\x009\\\\xd3\\\\x05%9\\\\xe5)P9\\\\xdd\\\\xecv9\\\\xde[J9\\\\xa0\\\\x88\\\\x069X\\\\x9e\\\\xde8\\\\xcd\\\\xb2;8\\\\xac\\\\xe3\\\\xb47S%\\\\x9a7L\\\\x1aK\\\\xb7\\\\xb5\\\\xe8\\\\xb3\\\\xb7\\\\xca\\\\xb0\\\\xdc\\\\xb5\\\\x1b\\\\xa6\\\\xa07\\\\xd0\\\\xa6\\\\xbe\\\\xb7\\\\xa2\\\\xd5\\\\xba\\\\xb88S\\\\x0e\\\\xb9\\\\xf4^m\\\\xb9}\\\\xb9k\\\\xb9\\\\xdc\\\\xc03\\\\xb97\\\\xc2\\\\x03\\\\xb9\\\\xb7\\\\xb8\\\\xc4\\\\xb8B\\\\xbc \\\\xb9"\\\\xe4V\\\\xb98\\\\xc6H\\\\xb9`\\\\x15\\\\xef\\\\xb8\\\\xd4\\\\xd3\\\\x92\\\\xb7/o\\\\x0b8\\\\xfd8\\\\x90\\\\xb6\\\\xfd\\\\x8b\\\\x82\\\\xb8%\\\\xcb3\\\\xb8\\\\x01h\\\\x10\\\\xb8A9\\\\xa6\\\\xb7\\\\x8bIy6<P\\\\x85\\\\xb7\\\\xd0RH8\\\\x1fb\\\\xd88\\\\xec?\\\\xbd8H\\\\\\\\\\\\xd38\\\\xbal\\\\xee8R\\\\x15G9/~\\\\xa69m\\\\\\\\\\\\xcb9\\\\xc6\\\\xe3\\\\xc59\\\\xf5\\\\xfe\\\\xb99\\\\x15\\\\xe6\\\\xbb9\\\\xa7\\\\xb8\\\\xc79\\\\x00\\\\x0e\\\\x00:W\\\\x93\\\\x11:x\\\\x90\\\\x14:J\\\\xee\\\\x1e:\\\\xd1\\\\x80\\\\t:\\\\x9e\\\\xb1\\\\xf79\\\\xe0\\\\x8e\\\\x05:\\\\xa0r\\\\x07:\\\\xdc*\\\\x18:8\\\\xf3\\\\x1e:F\\\\xf2\\\\x16:\\\\x1c\\\\xe3\\\\x17:\\\\xc2\\\\xe3\\\\x14:\\\\xad\\\\xf5\\\\x1c:\\\\xfd(0:VA6:6k-:\\\\xa8d*:5\\\\xf9!:\\\\x1e\\\\xfd\\\\x13:\\\\x8b\\\\xc7\\\\x1a:e-$:\\\\xc6\\\\x15(:\\\\xef():!\\\\x87!:%\\\\x13$:?X+:\\\\xa0B,:S\\\\xeb):\\\\xa3\\\\x9f&:\\\\xb6\\\\xce\\\\x1c:\\\\x109\\\\n:\\\\x1e9\\\\x05:\\\\x90;\\\\x00:\\\\x8a\\\\xb2\\\\xfd94\\\\x00\\\\xeb9\\\\x14\\\\xfc\\\\xc59\\\\xbeG\\\\xa19\\\\xc7\\\\xd3R9\\\\x9b6\\\\xf38\\\\xa5c\\\\xd9\\\\xb5I\\\\x10\\\\x00\\\\xb9\\\\xbezL\\\\xb9tf\\\\x85\\\\xb9{[|\\\\xb9k\\\\xa0\\\\x9c\\\\xb9h\\\\r\\\\xe4\\\\xb9\\\\xf1\\\\x8c\\\\x0b\\\\xba\\\\\\\\\\\\xcb%\\\\xba\\\\x95\\\\xe4/\\\\xba=7:\\\\xba\\\\xf9vB\\\\xba`\\\\xc0G\\\\xba\\\\xb4\\\\x9fR\\\\xba\\\\x96-e\\\\xba\\\\xfb\\\\x82\\\\x83\\\\xba\\\\xed\\\\x0e\\\\x8f\\\\xba\\\\rx\\\\x9a\\\\xba<\\\\xd3\\\\xa0\\\\xba\\\\xbd4\\\\xa0\\\\xba%\\\\xc5\\\\xa5\\\\xba\\\\x19\\\\x91\\\\xac\\\\xba\\\\xffS\\\\xb9\\\\xba]\\\\xdd\\\\xc4\\\\xbag|\\\\xcb\\\\xba\\\\x06\\\\xc5\\\\xcd\\\\xbai\\\\x1e\\\\xca\\\\xbaN\\\\xa7\\\\xc7\\\\xba9:\\\\xc4\\\\xba\\\\x1c7\\\\xc3\\\\xba\\\\xc0\\\\xa2\\\\xc6\\\\xba\\\\xfb\\\\x89\\\\xcc\\\\xba\\\\xb4\\\\xf6\\\\xd0\\\\xbawE\\\\xce\\\\xba\\\\x9e{\\\\xd0\\\\xba\\\\xcf\\\\xf0\\\\xd1\\\\xba\\\\xadY\\\\xd2\\\\xba\\\\x0b-\\\\xd5\\\\xba\\\\xbc\\\\x14\\\\xcf\\\\xba<f\\\\xc8\\\\xba#U\\\\xc3\\\\xba\\\\x10\\\\xb5\\\\xbf\\\\xba\\\\xd8\\\\x9a\\\\xb9\\\\xbao\\\\xf4\\\\xb0\\\\xba;\\\\xa8\\\\xb1\\\\xba{8\\\\xb4\\\\xbah\\\\x9a\\\\xb0\\\\xba\\\\x06\\\\xf2\\\\xa8\\\\xba\\\\x958\\\\xa2\\\\xba\\\\xe0\\\\xdb\\\\xa0\\\\xba\\\\xa8,\\\\x9d\\\\xba\\\\xc7\\\\xca\\\\x97\\\\xba\\\\x0e\\\\x10\\\\x92\\\\xbaY\\\\xdf\\\\x88\\\\xba\\\\x9d\\\\xfdz\\\\xba\\\\xfd\\\\xd6d\\\\xba\\\\xd6\\\\xe6U\\\\xba~\\\\xabG\\\\xba\\\\x8d\\\\x07A\\\\xbaC)5\\\\xba\\\\x07\\\\xab \\\\xbav\\\\xa2\\\\x12\\\\xba\\\\xf3\\\\xa9\\\\xf6\\\\xb9\\\\x8fb\\\\xbc\\\\xb9\\\\xdb\\\\xd5\\\\x7f\\\\xb9\\\\x02E5\\\\xb9[\\\\xbd?\\\\xb9\\\\xb7)\\\\x15\\\\xb9\\\\x18\\\\x88\\\\x8c\\\\xb8\\\\x12\\\\xca\\\\xf87\\\\xe7?\\\\\\\'9<nt9\\\\xc4\\\\x0b\\\\xa49}\\\\x9a\\\\xd19\\\\xcd\\\\xfb\\\\xf69U\\\\xfe\\\\x0b:\\\\xc0\\\\t\\\\x1f:\\\\xcbm4:\\\\x84\\\\xd3?:\\\\xaa@L:\\\\xa4\\\\x8fU:JBV:6XY:h\\\\x80]:\\\\x94 l:\\\\xaa\\\\xa2\\\\x82:\\\\x0b\\\\t\\\\x8d:\\\\xbe.\\\\x95:H\\\\x9b\\\\x93:\\\\x80h\\\\x93:\\\\x94\\\\xb3\\\\x95:\\\\xdf\\\\x8e\\\\x9b:\\\\x97\\\\xbc\\\\xa9:j\\\\xbf\\\\xb0:\\\\x89\\\\xc3\\\\xad:E\\\\xb9\\\\xa9:\\\\x80"\\\\xab:\\\\xde\\\\xaf\\\\xb1: \\\\xd8\\\\xb8:\\\\xf9\\\\x17\\\\xba:\\\\xc1i\\\\xb6:\\\\x06~\\\\xac:O/\\\\x9e:\\\\xb1\\\\x07\\\\x91:\\\\xfdn\\\\x8d:"\\\\xcd\\\\x8d:X\\\\xa3\\\\x90:\\\\xa2\\\\xc2\\\\x95:\\\\x11\\\\x9a\\\\x98:\\\\x1b\\\\xbb\\\\x99:\\\\xdb\\\\x18\\\\x95:\\\\xcf@\\\\x91:6\\\\xe4\\\\x89:\\\\xcf@\\\\x83:\\\\xf8;\\\\x83:h\\\\xdf\\\\x81:\\\\xd1m\\\\x80:x y:A\\\\xebk:\\\\xb0\\\\x7fc:\\\\xf2\\\\x0c\\\\x8a8\\\\xc6\\\\xf5\\\\x7f8^\\\\xbe\\\\\\\'8\\\\xf8A\\\\xc67",n6V\\\\x05e\\\\xb7\\\\\\\'\\\\xeb\\\\x15\\\\xb8:\\\\x8e0\\\\xb8\\\\x8a\\\\x80]\\\\xb8}\\\\xa6\\\\x91\\\\xb8qgc\\\\xb8!t\\\\x8b\\\\xb8Ip\\\\xa3\\\\xb8\\\\x94\\\\x04:\\\\xb8\\\\xf9\\\\xa3>\\\\xb8Z+\\\\xc4\\\\xb6\\\\xe2>\\\\x057Np\\\\xc5\\\\xb7vt\\\\x17\\\\xb8\\\\xfb\\\\xc5m\\\\xb8\\\\xef\\\\x87\\\\x97\\\\xb8\\\\x1c\\\\x18\\\\xd5\\\\xb8\\\\xd4b\\\\xdc\\\\xb8M\\\\x07\\\\x04\\\\xb9Q\\\\xdd\\\\x0c\\\\xb9&\\\\xa6\\\\x1d\\\\xb9mho\\\\xb9\\\\x9c\\\\x86\\\\x85\\\\xb9\\\\xec\\\\xc3\\\\xab\\\\xb9\\\\xaf\\\\x1e\\\\xca\\\\xb9\\\\xa0]\\\\xd7\\\\xb95g\\\\xed\\\\xb9\\\\x19\\\\xf2\\\\xdc\\\\xb9WS\\\\xd7\\\\xb9\\\\xd1J\\\\xcb\\\\xb9\\\\xa40\\\\xb7\\\\xb9\\\\xa0W\\\\xb4\\\\xb9\\\\xd0/\\\\xa9\\\\xb9\\\\xd3L\\\\xa2\\\\xb9\\\\xd4\\\\x83\\\\xa2\\\\xb9\\\\xca\\\\xc6\\\\xa1\\\\xb9}\\\\xfc\\\\x98\\\\xb9\\\\xa2S\\\\x92\\\\xb9\\\\xb3_\\\\x87\\\\xb9\\\\x80S\\\\x86\\\\xb92\\\\xe5\\\\x8d\\\\xb9\\\\x85N\\\\x88\\\\xb9\\\\x07D\\\\x8e\\\\xb9x\\\\x99\\\\x9b\\\\xb9\\\\xffz\\\\xa4\\\\xb9Nv\\\\xa2\\\\xb9Y\\\\xea\\\\x89\\\\xb9\\\\x11K^\\\\xb9\\\\xfa\\\\\\\'E\\\\xb9\\\\x88\\\\xdb\\\\x08\\\\xb9\\\\xd0\\\\x12\\\\xcf\\\\xb8\\\\xddk\\\\x17\\\\xb9\\\\xeee$\\\\xb9\\\\x87\\\\xb97\\\\xb9XqS\\\\xb9n\\\\xc4t\\\\xb9\\\\x96\\\\x07|\\\\xb9tCj\\\\xb9\\\\xea\\\\xc5\\\\x92\\\\xb9K\\\\x19\\\\xac\\\\xb9<\\\\x17\\\\xcd\\\\xb9\\\\x1d>\\\\xf1\\\\xb9\\\\xa9q\\\\xf6\\\\xb97(\\\\x02\\\\xba\\\\xa6\\\\x9f\\\\n\\\\xba\\\\xadO\\\\x12\\\\xba\\\\x16\\\\xb5\\\\x15\\\\xba81\\\\x16\\\\xba(\\\\xa3\\\\x1a\\\\xba\\\\xfbg\\\\x16\\\\xba\\\\xc4\\\\xc3\\\\x1b\\\\xbaFW \\\\xba\\\\x06\\\\xf8"\\\\xba\\\\\\\\F$\\\\xba\\\\xc4\\\\xe0 \\\\xba\\\\xd2=&\\\\xba\\\\x9f\\\\x1a"\\\\xba\\\\x94\\\\xef\\\\x1c\\\\xba\\\\xd0\\\\xf7\\\\x1a\\\\xba\\\\xfbK\\\\x19\\\\xba\\\\xe6Y\\\\x1d\\\\xba\\\\xd2\\\\xec\\\\x1f\\\\xba\\\\x10\\\\xda!\\\\xba\\\\x86\\\\x83&\\\\xba\\\\xf6o&\\\\xbar\\\\xee&\\\\xbag\\\\xf9\\\\x1f\\\\xbaiA\\\\x13\\\\xba2q\\\\x0c\\\\xba\\\\xdd\\\\xa8\\\\x04\\\\xba\\\\xe5\\\\x80\\\\xfa\\\\xb9\\\\x92\\\\xb0\\\\xf7\\\\xb9\\\\xcf\\\\xd6\\\\xfb\\\\xb9\\\\xb1\\\\x88\\\\x02\\\\xba\\\\xd1!\\\\xff\\\\xb9\\\\xb9\\\\\\\\\\\\x05\\\\xba\\\\xe2\\\\xe1\\\\x11\\\\xba\\\\xd2\\\\xee\\\\x1a\\\\xba\\\\xda1$\\\\xba\\\\xb1\\\\xdf(\\\\xba\\\\x8720\\\\xba\\\\x85\\\\xe2/\\\\xba\\\\xc9\\\\xe42\\\\xba\\\\xa2\\\\xa8$\\\\xba\\\\x04,\\\\x13\\\\xbaNV\\\\x14\\\\xba4\\\\xeb\\\\xf8\\\\xb9\\\\xd7M\\\\xe4\\\\xb9\\\\x1f\\\\xf3\\\\xdb\\\\xb96\\\\x7f\\\\xc4\\\\xb9\\\\xc8-\\\\xd4\\\\xb9R\\\\x90\\\\xd2\\\\xb9@\\\\xd4\\\\xcb\\\\xb9\\\\x95;\\\\xc4\\\\xb9b3\\\\xc5\\\\xb9\\\\xab"\\\\xc8\\\\xb9\\\\xb9*\\\\xd4\\\\xb9\\\\\\\\\\\\xe0\\\\xd2\\\\xb9\\\\xc4\\\\x83\\\\xb3\\\\xb9\\\\r\\\\x8b\\\\xa7\\\\xb9T\\\\xa6\\\\x91\\\\xb9\\\\xb3V\\\\x7f\\\\xb9\\\\x98\\\\x1al\\\\xb9\\\\xe4\\\\x87n\\\\xb9\\\\xc8D\\\\x89\\\\xb9\\\\xd0t\\\\x87\\\\xb9X\\\\x0eM\\\\xb9]=\\\\xfb\\\\xb8\\\\x07\\\\xcb\\\\xa4\\\\xb8C\\\\x0f\\\\x1e\\\\xb7\\\\xcdi38\\\\x0c\\\\x12\\\\x958\\\\xf4y\\\\xa98\\\\xb1\\\\x8a\\\\xb08\\\\x00\\\\x0c\\\\x049\\\\xaf\\\\x80\\\\x199nzI9<\\\\xde\\\\x899fK\\\\xad9 \\\\xb1\\\\xc994\\\\x87\\\\xd79e\\\\xd8\\\\xf098\\\\xcc\\\\x06:l\\\\xb6\\\\x13:\\\\xc0\\\\xce\\\\x1e:\\\\xbc\\\\xe3":\\\\x88\\\\xa6#:\\\\x90\\\\xea%:#z&:A\\\\x9e(:\\\\xb2\\\\x156:a\\\\x81::\\\\xe7K;:A\\\\x9a;:c\\\\xf00::\\\\x9e.:\\\\xe3\\\\x1b-:\\\\xeaH#:_c!:\\\\xeaX$:*\\\\x9d!:\\\\x05\\\\xed :\\\\xf6>\\\\x1f:\\\\x0ft\\\\x1a:<\\\\t":\\\\xe7\\\\xcc*:D\\\\xca2:\\\\x9e\\\\x94;:dP>:%\\\\x80>:7\\\\xb8B:\\\\xf7sJ:\\\\x9fcH:\\\\xca\\\\x05G:\\\\x84\\\\xe1C:\\\\xed\\\\x13G:JFO:Z\\\\xcdJ:\\\\xb3NM:\\\\xc7\\\\x11W:\\\\x9d\\\\xc0S:\\\\xa0iL:\\\\x8a\\\\xc9J:W\\\\xc6M:\\\\xa0\\\\x8bM:\\\\xfd\\\\x81M:(\\\\xe9K:}dA:\\\\x0c\\\\x08<:@\\\\xf25:\\\\x08\\\\xc20:E\\\\xf9\\\\\\\':f.\\\\\\\':\\\\xa5\\\\xbd1:\\\\xdd<2:M|?:\\\\x84\\\\xbcE:\\\\xe2\\\\x93A:\\\\xe7\\\\xe2H:\\\\xd4\\\\x07M:\\\\x16\\\\x9eF:\\\\n/;:\\\\xee\\\\xf46:\\\\x8c\\\\xb00:z\\\\x03*:\\\\x07\\\\xf6":\\\\xa1[\\\\x18:t\\\\x99\\\\x1b:\\\\x8f\\\\xf6!:\\\\x18\\\\xf0!:\\\\x1f\\\\xc5\\\\x1f:\\\\xa3\\\\xf8\\\\x13:\\\\xb3\\\\xc5\\\\x08:Jf\\\\x01:\\\\xf3\\\\xf9\\\\xee9\\\\x16\\\\x90\\\\xe59\\\\x7f\\\\x1a\\\\xd49f\\\\x90\\\\xd49t\\\\x93\\\\xe59\\\\xc2\\\\xac\\\\xd49;\\\\x86\\\\xc39x\\\\x8b\\\\xba9\\\\x17|\\\\xa69f\\\\xeb\\\\xa49[)\\\\xa09/\\\\xc9\\\\x8d9\\\\xee\\\\x18\\\\x889\\\\xc9yh9\\\\xa1359+\\\\x12\\\\x189\\\\x1aY\\\\x069B\\\\x81\\\\xf18\\\\x00\\\\xb0\\\\xcb8\\\\x0c\\\\r\\\\x009\\\\xa9F\\\\x0c9\\\\x17\\\\xbb\\\\x189\\\\n\\\\x8389:\\\\x17\\\\x1a9\\\\x0b\\\\xfa/9\\\\x82\\\\xf7P9\\\\x18\\\\xb899\\\\xec\\\\\\\'%9C3\\\\xe68\\\\xe9\\\\xa5\\\\xc48T\\\\x95\\\\xcf8\\\\xd3\\\\x89\\\\xd785\\\\xd6\\\\xd98o\\\\xb4\\\\xb88(\\\\x1a\\\\x049\\\\x9cZ\\\\x1e9%\\\\x8b!9\\\\t\\\\x94=9\\\\x91V.9\\\\x10\\\\xcb\\\\r9]\\\\xa6\\\\xbe8\\\\x88@p8\\\\x82\\\\xfd07\\\\xe1\\\\x19S\\\\xb8T\\\\x9a\\\\xaa\\\\xb8.w\\\\x0c\\\\xb9De"\\\\xb9\\\\xe8\\\\xde(\\\\xb9\\\\\\\\"k\\\\xb9`\\\\xa8\\\\x8a\\\\xb9\\\\xd6M\\\\x97\\\\xb9\\\\x07\\\\xf7\\\\xb1\\\\xb9\\\\x1e-\\\\xb0\\\\xb9\\\\x80.\\\\xac\\\\xb9\\\\xa4\\\\xf4\\\\xbc\\\\xb9d\\\\x8e\\\\xbf\\\\xb9\\\\xd3\\\\x0e\\\\xbf\\\\xb9\\\\x02\\\\x86\\\\xbe\\\\xb9\\\\x88\\\\x9e\\\\xab\\\\xb9d\\\\xf5\\\\x9e\\\\xb9\\\\xdb\\\\x08\\\\x95\\\\xb9u\\\\x94\\\\x9d\\\\xb9\\\\xa1:\\\\xae\\\\xb9\\\\xde\\\\x86\\\\xb2\\\\xb9\\\\x85\\\\x08\\\\xbc\\\\xb9@\\\\xb1\\\\xc1\\\\xb9W\\\\x96\\\\xcd\\\\xb9\\\\x03\\\\r\\\\xdb\\\\xb9\\\\xe1\\\\xea\\\\xe7\\\\xb9U\\\\x16\\\\xec\\\\xb9\\\\xf1\\\\x8b\\\\xe9\\\\xb9p\\\\xb5\\\\xee\\\\xb9\\\\xad4\\\\xfe\\\\xb9$#\\\\x03\\\\xba\\\\x1f\\\\xd5\\\\x02\\\\xbat\\\\xcb\\\\xf6\\\\xb9\\\\xbfo\\\\xf3\\\\xb9\\\\xcf\\\\xb0\\\\xfd\\\\xb9}\\\\xb4\\\\x03\\\\xba\\\\xee\\\\x88\\\\x06\\\\xba7\\\\xd6\\\\x05\\\\xba1\\\\xa2\\\\x06\\\\xba\\\\x14\\\\xf2\\\\n\\\\xba}\\\\xb1\\\\x0e\\\\xba\\\\x9e\\\\x94\\\\x0c\\\\xba\\\\xb3\\\\xdc\\\\xff\\\\xb9\\\\\\\\\\\\x0b\\\\xe2\\\\xb9\\\\xd2\\\\xf1\\\\xc4\\\\xb9\\\\x91\\\\xdf\\\\x9a\\\\xb9\\\\x90N\\\\x80\\\\xb9M\\\\x06s\\\\xb9\\\\xe6p\\\\x8b\\\\xb95\\\\xb5\\\\xa5\\\\xb9\\\\x190\\\\xbe\\\\xb9\\\\x8a\\\\xbe\\\\xca\\\\xb9\\\\x01-\\\\xd8\\\\xb9\\\\x8d\\\\xb4\\\\xed\\\\xb9\\\\x9b\\\\xc7\\\\xf0\\\\xb9\\\\xcf\\\\xe2\\\\xec\\\\xb9\\\\xe5Z\\\\xed\\\\xb9\\\\xd1\\\\x12\\\\xeb\\\\xb9\\\\xa6*\\\\xed\\\\xb9Q\\\\x01\\\\xf1\\\\xb9\\\\x9a\\\\xfd\\\\xfa\\\\xb9\\\\x9c@\\\\x01\\\\xba\\\\xf1r\\\\xfd\\\\xb9\\\\xd2W\\\\xfd\\\\xb9i\\\\xa5\\\\xe8\\\\xb9+*\\\\xda\\\\xb9\\\\x96\\\\xfc\\\\xd2\\\\xb9\\\\xed{\\\\xbb\\\\xb9\\\\xfc\\\\xbe\\\\xb9\\\\xb9\\\\xbf\\\\x14\\\\xb5\\\\xb9i\\\\xb6\\\\xa8\\\\xb9\\\\xbdO\\\\x99\\\\xb9;\\\\xf2\\\\x89\\\\xb9Y\\\\x8b\\\\x8b\\\\xb9\\\\xebIv\\\\xb9J\\\\xc3d\\\\xb9}QC\\\\xb9\\\\xc5\\\\x19\\\\x0b\\\\xb9\\\\xe2\\\\x9e\\\\xd4\\\\xb8\\\\t\\\\x99\\\\xb2\\\\xb8\\\\xeevm\\\\xb8s\\\\xeb\\\\xc65\\\\xfa\\\\x1f\\\\x1a8Z\\\\xe4E85<\\\\x948h\\\\x01\\\\x868X\\\\xc9 7\\\\x1aO^\\\\xb8\\\\xd5\\\\x8d\\\\xd0\\\\xb8Q\\\\xec\\\\xef\\\\xb8% \\\\x11\\\\xb9\\\\xd0\\\\x92/\\\\xb9IL\\\\x17\\\\xb9U\\\\x85\\\\x05\\\\xb9\\\\x80\\\\x8a\\\\x02\\\\xb9\\\\xa6X\\\\xc1\\\\xb8\\\\xd7k\\\\xbf\\\\xb8\\\\x8e{\\\\xaf\\\\xb8\\\\x8a\\\\x19\\\\x85\\\\xb8\\\\x16\\\\x1f\\\\xa7\\\\xb8\\\\xaf9y\\\\xb8cuM\\\\xb8\\\\xb3\\\\xf5\\\\x8b\\\\xb8\\\\x92+W\\\\xb8\\\\x1f+Q\\\\xb8\\\\xd7\\\\xe0P\\\\xb8\\\\x07\\\\x99U\\\\xb8\\\\x15\\\\xfd\\\\x90\\\\xb8\\\\xd6\\\\xd1\\\\xc6\\\\xb8\\\\xb6\\\\x0b\\\\xc9\\\\xb8\\\\xa74\\\\xcf\\\\xb8\\\\xc3\\\\xd3\\\\xf7\\\\xb8PT\\\\xd7\\\\xb8\\\\x19d\\\\xeb\\\\xb8\\\\xb5Q\\\\xc9\\\\xb8\\\\xfe\\\\xfeE\\\\xb8k\\\\x06\\\\x19\\\\xb8\\\\x85b\\\\xba7:\\\\xc2\\\\x9c8I|\\\\xcb8\\\\n~\\\\x089\\\\x7f/+9)Z892\\\\x0e\\\\x199\\\\x8ac\\\\xe08pS\\\\xc78p4\\\\x9a8\\\\x1c\\\\x1d\\\\xbd7}\\\\xca\\\\x05\\\\xb8MSx\\\\xb8\\\\xd6\\\\xff\\\\\\\\\\\\xb8\\\\xdb\\\\xc28\\\\xb8A\\\\t\\\\xf4\\\\xb7\\\\xb162\\\\xb8\\\\x17\\\\x05\\\\xa1\\\\xb8k\\\\xbb\\\\xfb\\\\xb8\\\\xaaE^\\\\xb9\\\\x8bc\\\\x93\\\\xb9\\\\x95K\\\\x9d\\\\xb9\\\\xb9V\\\\xaa\\\\xb9!!\\\\xb5\\\\xb9\\\\xe3^\\\\xc6\\\\xb9#r\\\\xc6\\\\xb9\\\\x99\\\\xc0\\\\xc5\\\\xb9\\\\t-\\\\xc9\\\\xb9\\\\xb3\\\\x12\\\\xc1\\\\xb9Q\\\\x98\\\\xcb\\\\xb9r(\\\\xcb\\\\xb9\\\\xce\\\\xba\\\\xc0\\\\xb9\\\\xf0\\\\x98\\\\xc2\\\\xb9\\\\xf3\\\\x80\\\\xc6\\\\xb9\\\\xc0J\\\\xdf\\\\xb9\\\\x00 \\\\xf6\\\\xb9\\\\xc5m\\\\x01\\\\xba\\\\\\\\%\\\\x10\\\\xba\\\\xabC\\\\x13\\\\xba\\\\x0fF\\\\x14\\\\xba\\\\x98C\\\\x1f\\\\xbaO\\\\xf1&\\\\xbaO\\\\x81&\\\\xbaV#*\\\\xba\\\\xbbt,\\\\xba\\\\xc3\\\\xd8)\\\\xba\\\\x0f7/\\\\xba\\\\xc6\\\\xfe5\\\\xba\\\\x1bwB\\\\xba\\\\xcd(G\\\\xbaA\\\\x1eF\\\\xbaZ\\\\xc4D\\\\xba\\\\x9e\\\\xc6A\\\\xba\\\\xc4\\\\xbdC\\\\xba\\\\xa16E\\\\xba\\\\xf9!I\\\\xba\\\\xdcD?\\\\xbaV\\\\x0b9\\\\xbaq\\\\xfb.\\\\xba\\\\xfe\\\\x1b \\\\xbak (\\\\xba@\\\\xf9&\\\\xba\\\\x94\\\\xf1+\\\\xba\\\\xe7S=\\\\xbaD\\\\xfcI\\\\xbaH&P\\\\xba\\\\x87\\\\xd3C\\\\xbaq\\\\xfb=\\\\xba\\\\xdb\\\\x192\\\\xba\\\\xd9\\\\xea,\\\\xba\\\\x1d\\\\x7f*\\\\xba\\\\x8b\\\\x90#\\\\xbaF\\\\xdf-\\\\xba\\\\x039$\\\\xba\\\\xb7\\\\xc8\\\\x1e\\\\xbaL\\\\xb9\\\\x1d\\\\xba\\\\x1f|\\\\x1b\\\\xba\\\\x93f \\\\xbaX\\\\xe9\\\\x1b\\\\xbap\\\\x01\\\\x19\\\\xba\\\\xe0l\\\\x12\\\\xba\\\\x19\\\\x83\\\\x19\\\\xba\\\\x8d\\\\x11\\\\x18\\\\xba\\\\xe1\\\\x1a\\\\x0b\\\\xba),\\\\x08\\\\xbaZ\\\\xe0\\\\xfd\\\\xb9\\\\xf9\\\\xd8\\\\xe5\\\\xb9x\\\\x8a\\\\xe3\\\\xb9^\\\\x16\\\\xd4\\\\xb9\\\\x08Q\\\\xbe\\\\xb9\\\\xef\\\\xf3\\\\xc3\\\\xb9?\\\\xfc\\\\xb7\\\\xb9_C\\\\xc0\\\\xb9y\\\\xa2\\\\xc3\\\\xb9!\\\\xe8\\\\xc1\\\\xb9g\\\\x9e\\\\xd3\\\\xb9Bj\\\\xcf\\\\xb9\\\\x87\\\\xb9\\\\xd8\\\\xb9h\\\\x81\\\\xdf\\\\xb9\\\\xab]\\\\xe4\\\\xb9\\\\xe7!\\\\x05\\\\xba\\\\x89.\\\\n\\\\xba?\\\\x8c\\\\x14\\\\xba\\\\xe0G$\\\\xba\\\\xfdn!\\\\xba\\\\\\\\\\\\x91\\\\x1f\\\\xbaMd\\\\x1b\\\\xba\\\\xe6\\\\x14\\\\x12\\\\xba\\\\t<\\\\x00\\\\xba\\\\xbc\\\\xc3\\\\xe8\\\\xb9\\\\xa4\\\\xff\\\\xcc\\\\xb9!\\\\xcf\\\\xa2\\\\xb9\\\\xac\\\\x0c\\\\x94\\\\xb9\\\\xcd\\\\xda\\\\x8c\\\\xb9)\\\\x95\\\\x8f\\\\xb9t\\\\xec\\\\x90\\\\xb9\\\\xbc\\\\xbfo\\\\xb9R\\\\xfe[\\\\xb9xDv\\\\xb9\\\\xb9\\\\xdb\\\\x87\\\\xb93X\\\\x84\\\\xb9\\\\x93\\\\xc6\\\\x84\\\\xb9|9~\\\\xb9*[S\\\\xb9\\\\xf3i_\\\\xb9\\\\x92,f\\\\xb9\\\\x0btt\\\\xb9\\\\xc9\\\\xe1\\\\x91\\\\xb9\\\\xed\\\\x1d\\\\x93\\\\xb9(\\\\xf5\\\\x99\\\\xb9Z\\\\x0c\\\\x93\\\\xb9\\\\xda~\\\\x94\\\\xb9\\\\xc83\\\\x89\\\\xb9\\\\x87S\\\\x0e\\\\xb9-\\\\x91Q\\\\xb8\\\\xcb\\\\xf4\\\\x188\\\\xc5p\\\\xca8\\\\x94\\\\x9d\\\\x0c9\\\\xea"f9\\\\x1cS\\\\x869G\\\\x93\\\\xa19g\\\\xab\\\\xb19\\\\x03bvx$osht\\\\x06\\\\x00\\\\x00\\\\x00arcsint\\\\x07\\\\x00\\\\x00\\\\x00arcsinht\\\\x06\\\\x00\\\\x00\\\\x00arctant\\\\x07\\\\x00\\\\x00\\\\x00arctan2t\\\\x07\\\\x00\\\\x00\\\\x00arctanht\\\\x06\\\\x00\\\\x00\\\\x00argmaxt\\\\x06\\\\x00\\\\x00\\\\x00argmint\\\\x07\\\\x00\\\\x00\\\\x00argsortt\\\\x06\\\\x00\\\\x00\\\\x00aroundR\\\\n\\\\x00\\\\x00\\\\x00t\\\\n\\\\x00\\\\x00\\\\x00asanyarrayt\\\\x07\\\\x00\\\\x00\\\\x00asarrayt\\\\x0b\\\\x00\\\\x00\\\\x00bitwise_andt\\\\n\\\\x00\\\\x00\\\\x00bitwise_ort\\\\x0b\\\\x00\\\\x00\\\\x00bitwise_xorR\\\\x08\\\\x00\\\\x00\\\\x00t\\\\x04\\\\x00\\\\x00\\\\x00ceilt\\\\x06\\\\x00\\\\x00\\\\x00chooset\\\\x04\\\\x00\\\\x00\\\\x00clipt\\\\x11\\\\x00\\\\x00\\\\x00common_fill_valuet\\\\x08\\\\x00\\\\x00\\\\x00compresst\\\\n\\\\x00\\\\x00\\\\x00compressedt\\\\x0b\\\\x00\\\\x00\\\\x00concatenatet\\\\t\\\\x00\\\\x00\\\\x00conjugatet\\\\x04\\\\x00\\\\x00\\\\x00copyt\\\\x03\\\\x00\\\\x00\\\\x00cost\\\\x04\\\\x00\\\\x00\\\\x00cosht\\\\x05\\\\x00\\\\x00\\\\x00countt\\\\x07\\\\x00\\\\x00\\\\x00cumprodt\\\\x06\\\\x00\\\\x00\\\\x00cumsumt\\\\x12\\\\x00\\\\x00\\\\x00default_fill_valuet\\\\x04\\\\x00\\\\x00\\\\x00diagt\\\\x08\\\\x00\\\\x00\\\\x00diagonalt\\\\x04\\\\x00\\\\x00\\\\x00difft\\\\x06\\\\x00\\\\x00\\\\x00dividet\\\\x04\\\\x00\\\\x00\\\\x00dumpt\\\\x05\\\\x00\\\\x00\\\\x00dumpst\\\\x05\\\\x00\\\\x00\\\\x00emptyt\\\\n\\\\x00\\\\x00\\\\x00empty_liket\\\\x05\\\\x00\\\\x00\\\\x00equalt\\\\x03\\\\x00\\\\x00\\\\x00expR\\\\x13\\\\x00\\\\x00\\\\x00t\\\\x04\\\\x00\\\\x00\\\\x00fabst\\\\x06\\\\x00\\\\x00\\\\x00filledt\\\\x0b\\\\x00\\\\x00\\\\x00fix_invalidt\\\\x0c\\\\x00\\\\x00\\\\x00flatten_maskt\\\\x18\\\\x00\\\\x00\\\\x00flatten_structured_arrayt\\\\x05\\\\x00\\\\x00\\\\x00floort\\\\x0c\\\\x00\\\\x00\\\\x00floor_dividet\\\\x04\\\\x00\\\\x00\\\\x00fmodt\\\\n\\\\x00\\\\x00\\\\x00frombuffert\\\\x08\\\\x00\\\\x00\\\\x00fromflext\\\\x0c\\\\x00\\\\x00\\\\x00fromfunctiont\\\\x07\\\\x00\\\\x00\\\\x00getdatat\\\\x07\\\\x00\\\\x00\\\\x00getmaskt\\\\x0c\\\\x00\\\\x00\\\\x00getmaskarrayt\\\\x07\\\\x00\\\\x00\\\\x00greatert\\\\r\\\\x00\\\\x00\\\\x00greater_equalt\\\\x0b\\\\x00\\\\x00\\\\x00harden_maskt\\\\x05\\\\x00\\\\x00\\\\x00hypott\\\\x08\\\\x00\\\\x00\\\\x00identityt\\\\x03\\\\x00\\\\x00\\\\x00idst\\\\x07\\\\x00\\\\x00\\\\x00indicest\\\\x05\\\\x00\\\\x00\\\\x00innert\\\\x0c\\\\x00\\\\x00\\\\x00innerproductt\\\\x04\\\\x00\\\\x00\\\\x00isMAt\\\\r\\\\x00\\\\x00\\\\x00isMaskedArrayt\\\\x07\\\\x00\\\\x00\\\\x00is_maskt\\\\t\\\\x00\\\\x00\\\\x00is_maskedt\\\\x07\\\\x00\\\\x00\\\\x00isarrayt\\\\n\\\\x00\\\\x00\\\\x00left_shiftt\\\\x04\\\\x00\\\\x00\\\\x00lesst\\\\n\\\\x00\\\\x00\\\\x00less_equalt\\\\x04\\\\x00\\\\x00\\\\x00loadt\\\\x05\\\\x00\\\\x00\\\\x00loadst\\\\x03\\\\x00\\\\x00\\\\x00logt\\\\x05\\\\x00\\\\x00\\\\x00log10t\\\\x04\\\\x00\\\\x00\\\\x00log2t\\\\x0b\\\\x00\\\\x00\\\\x00logical_andt\\\\x0b\\\\x00\\\\x00\\\\x00logical_nott\\\\n\\\\x00\\\\x00\\\\x00logical_ort\\\\x0b\\\\x00\\\\x00\\\\x00logical_xort\\\\t\\\\x00\\\\x00\\\\x00make_maskt\\\\x0f\\\\x00\\\\x00\\\\x00make_mask_descrt\\\\x0e\\\\x00\\\\x00\\\\x00make_mask_nonet\\\\x07\\\\x00\\\\x00\\\\x00mask_ort\\\\x06\\\\x00\\\\x00\\\\x00maskedt\\\\x0c\\\\x00\\\\x00\\\\x00masked_arrayt\\\\x0c\\\\x00\\\\x00\\\\x00masked_equalt\\\\x0e\\\\x00\\\\x00\\\\x00masked_greatert\\\\x14\\\\x00\\\\x00\\\\x00masked_greater_equalt\\\\r\\\\x00\\\\x00\\\\x00masked_insidet\\\\x0e\\\\x00\\\\x00\\\\x00masked_invalidt\\\\x0b\\\\x00\\\\x00\\\\x00masked_lesst\\\\x11\\\\x00\\\\x00\\\\x00masked_less_equalt\\\\x10\\\\x00\\\\x00\\\\x00masked_not_equalt\\\\r\\\\x00\\\\x00\\\\x00masked_objectt\\\\x0e\\\\x00\\\\x00\\\\x00masked_outsidet\\\\x13\\\\x00\\\\x00\\\\x00masked_print_optiont\\\\x10\\\\x00\\\\x00\\\\x00masked_singletont\\\\r\\\\x00\\\\x00\\\\x00masked_valuest\\\\x0c\\\\x00\\\\x00\\\\x00masked_wheret\\\\x03\\\\x00\\\\x00\\\\x00maxt\\\\x07\\\\x00\\\\x00\\\\x00maximumt\\\\x12\\\\x00\\\\x00\\\\x00maximum_fill_valuet\\\\x04\\\\x00\\\\x00\\\\x00meant\\\\x03\\\\x00\\\\x00\\\\x00mint\\\\x07\\\\x00\\\\x00\\\\x00minimumt\\\\x12\\\\x00\\\\x00\\\\x00minimum_fill_valuet\\\\x03\\\\x00\\\\x00\\\\x00modt\\\\x08\\\\x00\\\\x00\\\\x00multiplyt\\\\x05\\\\x00\\\\x00\\\\x00mvoidt\\\\x04\\\\x00\\\\x00\\\\x00ndimt\\\\x08\\\\x00\\\\x00\\\\x00negativet\\\\x06\\\\x00\\\\x00\\\\x00nomaskt\\\\x07\\\\x00\\\\x00\\\\x00nonzerot\\\\t\\\\x00\\\\x00\\\\x00not_equalt\\\\x04\\\\x00\\\\x00\\\\x00onest\\\\x05\\\\x00\\\\x00\\\\x00outert\\\\x0c\\\\x00\\\\x00\\\\x00outerproductt\\\\x05\\\\x00\\\\x00\\\\x00powert\\\\x04\\\\x00\\\\x00\\\\x00prodt\\\\x07\\\\x00\\\\x00\\\\x00productt\\\\x03\\\\x00\\\\x00\\\\x00ptpt\\\\x03\\\\x00\\\\x00\\\\x00putt\\\\x07\\\\x00\\\\x00\\\\x00putmaskt\\\\x04\\\\x00\\\\x00\\\\x00rankt\\\\x05\\\\x00\\\\x00\\\\x00ravelt\\\\t\\\\x00\\\\x00\\\\x00remaindert\\\\x06\\\\x00\\\\x00\\\\x00repeatt\\\\x07\\\\x00\\\\x00\\\\x00reshapet\\\\x06\\\\x00\\\\x00\\\\x00resizet\\\\x0b\\\\x00\\\\x00\\\\x00right_shiftt\\\\x05\\\\x00\\\\x00\\\\x00roundt\\\\x06\\\\x00\\\\x00\\\\x00round_t\\\\x0e\\\\x00\\\\x00\\\\x00set_fill_valuet\\\\x05\\\\x00\\\\x00\\\\x00shapet\\\\x03\\\\x00\\\\x00\\\\x00sint\\\\x04\\\\x00\\\\x00\\\\x00sinht\\\\x04\\\\x00\\\\x00\\\\x00sizet\\\\x0b\\\\x00\\\\x00\\\\x00soften_maskt\\\\x08\\\\x00\\\\x00\\\\x00sometruet\\\\x04\\\\x00\\\\x00\\\\x00sortt\\\\x04\\\\x00\\\\x00\\\\x00sqrtt\\\\x07\\\\x00\\\\x00\\\\x00squeezet\\\\x03\\\\x00\\\\x00\\\\x00stdt\\\\x08\\\\x00\\\\x00\\\\x00subtractt\\\\x03\\\\x00\\\\x00\\\\x00sumt\\\\x08\\\\x00\\\\x00\\\\x00swapaxest\\\\x04\\\\x00\\\\x00\\\\x00taket\\\\x03\\\\x00\\\\x00\\\\x00tant\\\\x04\\\\x00\\\\x00\\\\x00tanht\\\\x05\\\\x00\\\\x00\\\\x00tracet\\\\t\\\\x00\\\\x00\\\\x00transposet\\\\x0b\\\\x00\\\\x00\\\\x00true_dividet\\\\x03\\\\x00\\\\x00\\\\x00vart\\\\x05\\\\x00\\\\x00\\\\x00wheret\\\\x05\\\\x00\\\\x00\\\\x00zerost\\\\x18\\\\x00\\\\x00\\\\x00MaskedArrayFutureWarningc\\\\x00\\\\x00\\\\x00\\\\x00\\\\x00\\\\x00\\\\x00\\\\x00\\\\x01\\\\x00\\\\x00\\\\x00B`\\\\x01\\\\x00s\\\\x08\\\\x00\\\\x00\\\\x00e\\\\x00\\\\x00Z\\\\x01\\\\x00RS(\\\\x00\\\\x00\\\\x00\\\\x00(\\\\x02\\\\x00\\\\x00\\\\x00t\\\\x08\\\\x00\\\\x00\\\\x00__name__t\\\\n\\\\x00\\\\x00\\\\x00__module__(\\\\x00\\\\x00\\\\x00\\\\x00(\\\\x00\\\\x00\\\\x00\\\\x00(\\\\x00\\\\x00\\\\x00\\\\x00s,\\\\x00\\\\x00\\\\x00lib/python2.7/site-packages/numpy/ma/core.pyR\\\\xc1\\\\x00\\\\x00\\\\x00Z\\\\x00\\\\x00\\\\x00s\\\\x02\\\\x00\\\\x00\\\\x00\\\\x06\\\\x01c\\\\x02\\\\x00\\\\x00\\\\x00\\\\x03\\\\x00\\\\x00\\\\x00\\\\x03\\\\x00\\\\x00\\\\x00C`\\\\x01\\\\x00s4\\\\x00\\\\x00\\\\x00|\\\\x00\\\\x00d\\\\x01\\\\x00k\\\\x08\\\\x00r\\\\x10\\\\x00d\\\\x01\\\\x00S|\\\\x01\\\\x00d\\\\x01\\\\x00k\\\\x08\\\\x00r \\\\x00|\\\\x00\\\\x00Sd\\\\x02\\\\x00}\\\\x02\\\\x00|\\\\x02\\\\x00|\\\\x00\\\\x00|\\\\x01\\\\x00f\\\\x02\\\\x00\\\\x16S(\\\\x03\\\\x00\\\\x00\\\\x00s9\\\\x00\\\\x00\\\\x00\\\\n    Adds a Notes section to an existing docstring.\\\\n\\\\n    Ns(\\\\x00\\\\x00\\\\x00\\\\n    %s\\\\n\\\\n    Notes\\\\n    -----\\\\n    %s\\\\n    (\\\\x01\\\\x00\\\\x00\\\\x00t\\\\x04\\\\x00\\\\x00\\\\x00None(\\\\x03\\\\x00\\\\x00\\\\x00t\\\\n\\\\x00\\\\x00\\\\x00initialdoct\\\\x04\\\\x00\\\\x00\\\\x00notet\\\\x06\\\\x00\\\\x00\\\\x00newdoc(\\\\x00\\\\x00\\\\x00\\\\x00(\\\\x00\\\\x00\\\\x00\\\\x00s,\\\\x00\\\\x00\\\\x00lib/python2.7/site-packages/numpy/ma/core.pyt\\\\x08\\\\x00\\\\x00\\\\x00doc_note^\\\\x00\\\\x00\\\\x00s\\\\x0c\\\\x00\\\\x00\\\\x00\\\\x00\\\\x05\\\\x0c\\\\x01\\\\x04\\\\x01\\\\x0c\\\\x01\\\\x04\\\\x07\\\\x06\\\\x01c\\\\x01\\\\x00\\\\x00\\\\x00\\\\x02\\\\x00\\\\x00\\\\x00\\\\x05\\\\x00\\\\x00\\\\x00C`\\\\x01\\\\x00s4\\\\x00\\\\x00\\\\x00y\\\\x16\\\\x00t\\\\x00\\\\x00t\\\\x01\\\\x00|\\\\x00\\\\x00\\\\x83\\\\x01\\\\x00\\\\x8c\\\\x00\\\\x00}\\\\x01\\\\x00Wn\\\\x17\\\\x00\\\\x04t\\\\x02\\\\x00k\\\\n\\\\x00r/\\\\x00\\\\x01\\\\x01\\\\x01d\\\\x01\\\\x00}\\\\x01\\\\x00n\\\\x01\\\\x00X|\\\\x01\\\\x00S(\\\\x02\\\\x00\\\\x00\\\\x00s%\\\\x00\\\\x00\\\\x00\\\\n    Get the signature from obj\\\\n\\\\n    t\\\\x00\\\\x00\\\\x00\\\\x00(\\\\x03\\\\x00\\\\x00\\\\x00R\\\\r\\\\x00\\\\x00\\\\x00R\\\\x0c\\\\x00\\\\x00\\\\x00t\\\\t\\\\x00\\\\x00\\\\x00TypeError(\\\\x02\\\\x00\\\\x00\\\\x00t\\\\x03\\\\x00\\\\x00\\\\x00objt\\\\x03\\\\x00\\\\x00\\\\x00sig(\\\\x00\\\\x00\\\\x00\\\\x00(\\\\x00\\\\x00\\\\x00\\\\x00s,\\\\x00\\\\x00\\\\x00lib/python2.7/site-packages/numpy/ma/core.pyt\\\\x14\\\\x00\\\\x00\\\\x00get_object_signatureq\\\\x00\\\\x00\\\\x00s\\\\n\\\\x00\\\\x00\\\\x00\\\\x00\\\\x05\\\\x03\\\\x01\\\\x16\\\\x01\\\\r\\\\x01\\\\n\\\\x01c\\\\x00\\\\x00\\\\x00\\\\x00\\\\x00\\\\x00\\\\x00\\\\x00\\\\x01\\\\x00\\\\x00\\\\x00B`\\\\x01\\\\x00s\\\\x0e\\\\x00\\\\x00\\\\x00e\\\\x00\\\\x00Z\\\\x01\\\\x00d\\\\x00\\\\x00Z\\\\x02\\\\x00RS(\\\\x01\\\\x00\\\\x00\\\\x00s1\\\\x00\\\\x00\\\\x00\\\\n    Class for masked array related errors.\\\\n\\\\n    (\\\\x03\\\\x00\\\\x00\\\\x00R\\\\xc2\\\\x00\\\\x00\\\\x00R\\\\xc3\\\\x00\\\\x00\\\\x00t\\\\x07\\\\x00\\\\x00\\\\x00__doc__(\\\\x00\\\\x00\\\\x00\\\\x00(\\\\x00\\\\x00\\\\x00\\\\x00(\\\\x00\\\\x00\\\\x00\\\\x00s,\\\\x00\\\\x00\\\\x00lib/python2.7/site-packages/numpy/ma/core.pyR\\\\x14\\\\x00\\\\x00\\\\x00\\\\x82\\\\x00\\\\x00\\\\x00s\\\\x04\\\\x00\\\\x00\\\\x00\\\\x06\\\\x04\\\\x06\\\\x01c\\\\x00\\\\x00\\\\x00\\\\x00\\\\x00\\\\x00\\\\x00\\\\x00\\\\x01\\\\x00\\\\x00\\\\x00B`\\\\x01\\\\x00s\\\\x0e\\\\x00\\\\x00\\\\x00e\\\\x00\\\\x00Z\\\\x01\\\\x00d\\\\x00\\\\x00Z\\\\x02\\\\x00RS(\\\\x01\\\\x00\\\\x00\\\\x00s)\\\\x00\\\\x00\\\\x00\\\\n    Class for mask related errors.\\\\n\\\\n    (\\\\x03\\\\x00\\\\x00\\\\x00R\\\\xc2\\\\x00\\\\x00\\\\x00R\\\\xc3\\\\x00\\\\x00\\\\x00R\\\\xce\\\\x00\\\\x00\\\\x00(\\\\x00\\\\x00\\\\x00\\\\x00(\\\\x00\\\\x00\\\\x00\\\\x00(\\\\x00\\\\x00\\\\x00\\\\x00s,\\\\x00\\\\x00\\\\x00lib/python2.7/site-packages/numpy/ma/core.pyR\\\\x15\\\\x00\\\\x00\\\\x00\\\\x8a\\\\x00\\\\x00\\\\x00s\\\\x04\\\\x00\\\\x00\\\\x00\\\\x06\\\\x04\\\\x06\\\\x01t\\\\x01\\\\x00\\\\x00\\\\x00bg@\\\\x8c\\\\xb5x\\\\x1d\\\\xaf\\\\x15Dy\\\\x00\\\\x00\\\\x00\\\\x00\\\\x00\\\\x00\\\\x00\\\\x00\\\\x00\\\\x00\\\\x00\\\\x00\\\\x00\\\\x00\\\\x00\\\\x00t\\\\x01\\\\x00\\\\x00\\\\x00ct\\\\x01\\\\x00\\\\x00\\\\x00fi?B\\\\x0f\\\\x00t\\\\x01\\\\x00\\\\x00\\\\x00it\\\\x01\\\\x00\\\\x00\\\\x00?t\\\\x01\\\\x00\\\\x00\\\\x00Os\\\\x03\\\\x00\\\\x00\\\\x00N/At\\\\x01\\\\x00\\\\x00\\\\x00St\\\\x01\\\\x00\\\\x00\\\\x00us\\\\x03\\\\x00\\\\x00\\\\x00???t\\\\x01\\\\x00\\\\x00\\\\x00Vt\\\\x01\\\\x00\\\\x00\\\\x00Ut\\\\x01\\\\x00\\\\x00\\\\x00Yt\\\\x01\\\\x00\\\\x00\\\\x00Mt\\\\x01\\\\x00\\\\x00\\\\x00Wt\\\\x01\\\\x00\\\\x00\\\\x00Dt\\\\x01\\\\x00\\\\x00\\\\x00ht\\\\x01\\\\x00\\\\x00\\\\x00mt\\\\x01\\\\x00\\\\x00\\\\x00st\\\\x02\\\\x00\\\\x00\\\\x00mst\\\\x02\\\\x00\\\\x00\\\\x00ust\\\\x02\\\\x00\\\\x00\\\\x00nst\\\\x02\\\\x00\\\\x00\\\\x00pst\\\\x02\\\\x00\\\\x00\\\\x00fst\\\\x02\\\\x00\\\\x00\\\\x00ast\\\\x03\\\\x00\\\\x00\\\\x00NaTs\\\\x03\\\\x00\\\\x00\\\\x00M8[t\\\\x01\\\\x00\\\\x00\\\\x00]s\\\\x03\\\\x00\\\\x00\\\\x00m8[t\\\\x08\\\\x00\\\\x00\\\\x00float128c\\\\x01\\\\x00\\\\x00\\\\x00\\\\x02\\\\x00\\\\x00\\\\x00\\\\x03\\\\x00\\\\x00\\\\x00C`\\\\x01\\\\x00sJ\\\\x01\\\\x00\\\\x00t\\\\x00\\\\x00|\\\\x00\\\\x00d\\\\x01\\\\x00\\\\x83\\\\x02\\\\x00r$\\\\x00t\\\\x01\\\\x00d\\\\x0c\\\\x00|\\\\x00\\\\x00j\\\\x03\\\\x00\\\\x83\\\\x02\\\\x00}\\\\x01\\\\x00n"\\\\x01t\\\\x04\\\\x00|\\\\x00\\\\x00t\\\\x05\\\\x00j\\\\x03\\\\x00\\\\x83\\\\x02\\\\x00r\\\\xa1\\\\x00|\\\\x00\\\\x00j\\\\x06\\\\x00r^\\\\x00t\\\\x07\\\\x00j\\\\x08\\\\x00|\\\\x00\\\\x00j\\\\x06\\\\x00d\\\\x02\\\\x00\\\\x19j\\\\t\\\\x00d\\\\x03\\\\x00\\\\x83\\\\x02\\\\x00}\\\\x01\\\\x00qF\\\\x01|\\\\x00\\\\x00j\\\\t\\\\x00d\\\\x04\\\\x00k\\\\x06\\\\x00r\\\\x89\\\\x00t\\\\x07\\\\x00j\\\\x08\\\\x00|\\\\x00\\\\x00j\\\\n\\\\x00d\\\\x05\\\\x00\\\\x1fd\\\\x03\\\\x00\\\\x83\\\\x02\\\\x00}\\\\x01\\\\x00qF\\\\x01t\\\\x07\\\\x00j\\\\x08\\\\x00|\\\\x00\\\\x00j\\\\t\\\\x00d\\\\x03\\\\x00\\\\x83\\\\x02\\\\x00}\\\\x01\\\\x00n\\\\xa5\\\\x00t\\\\x04\\\\x00|\\\\x00\\\\x00t\\\\x0b\\\\x00\\\\x83\\\\x02\\\\x00r\\\\xbd\\\\x00t\\\\x07\\\\x00d\\\\x06\\\\x00\\\\x19}\\\\x01\\\\x00n\\\\x89\\\\x00t\\\\x04\\\\x00|\\\\x00\\\\x00t\\\\x0c\\\\x00\\\\x83\\\\x02\\\\x00s\\\\xdb\\\\x00t\\\\x04\\\\x00|\\\\x00\\\\x00t\\\\r\\\\x00\\\\x83\\\\x02\\\\x00r\\\\xe8\\\\x00t\\\\x07\\\\x00d\\\\x07\\\\x00\\\\x19}\\\\x01\\\\x00n^\\\\x00t\\\\x04\\\\x00|\\\\x00\\\\x00t\\\\x0e\\\\x00\\\\x83\\\\x02\\\\x00r\\\\x04\\\\x01t\\\\x07\\\\x00d\\\\x08\\\\x00\\\\x19}\\\\x01\\\\x00nB\\\\x00t\\\\x04\\\\x00|\\\\x00\\\\x00t\\\\x0f\\\\x00\\\\x83\\\\x02\\\\x00r \\\\x01t\\\\x07\\\\x00d\\\\t\\\\x00\\\\x19}\\\\x01\\\\x00n&\\\\x00t\\\\x04\\\\x00|\\\\x00\\\\x00t\\\\x10\\\\x00\\\\x83\\\\x02\\\\x00r<\\\\x01t\\\\x07\\\\x00d\\\\n\\\\x00\\\\x19}\\\\x01\\\\x00n\\\\n\\\\x00t\\\\x07\\\\x00d\\\\x0b\\\\x00\\\\x19}\\\\x01\\\\x00|\\\\x01\\\\x00S(\\\\r\\\\x00\\\\x00\\\\x00sg\\\\x03\\\\x00\\\\x00\\\\n    Return the default fill value for the argument object.\\\\n\\\\n    The default filling value depends on the datatype of the input\\\\n    array or the type of the input scalar:\\\\n\\\\n       ========  ========\\\\n       datatype  default\\\\n       ========  ========\\\\n       bool      True\\\\n       int       999999\\\\n       float     1.e20\\\\n       complex   1.e20+0j\\\\n       object    \\\\\\\'?\\\\\\\'\\\\n       string    \\\\\\\'N/A\\\\\\\'\\\\n       ========  ========\\\\n\\\\n\\\\n    Parameters\\\\n    ----------\\\\n    obj : ndarray, dtype or scalar\\\\n        The array data-type or scalar for which the default fill value\\\\n        is returned.\\\\n\\\\n    Returns\\\\n    -------\\\\n    fill_value : scalar\\\\n        The default fill value.\\\\n\\\\n    Examples\\\\n    --------\\\\n    >>> np.ma.default_fill_value(1)\\\\n    999999\\\\n    >>> np.ma.default_fill_value(np.array([1.1, 2., np.pi]))\\\\n    1e+20\\\\n    >>> np.ma.default_fill_value(np.dtype(complex))\\\\n    (1e+20+0j)\\\\n\\\\n    t\\\\x05\\\\x00\\\\x00\\\\x00dtypei\\\\x00\\\\x00\\\\x00\\\\x00R\\\\xd3\\\\x00\\\\x00\\\\x00t\\\\x02\\\\x00\\\\x00\\\\x00Mmi\\\\x01\\\\x00\\\\x00\\\\x00R\\\\xd1\\\\x00\\\\x00\\\\x00R\\\\xd2\\\\x00\\\\x00\\\\x00R\\\\xd5\\\\x00\\\\x00\\\\x00R\\\\xd8\\\\x00\\\\x00\\\\x00R\\\\xd0\\\\x00\\\\x00\\\\x00R\\\\xd4\\\\x00\\\\x00\\\\x00N(\\\\x11\\\\x00\\\\x00\\\\x00t\\\\x07\\\\x00\\\\x00\\\\x00hasattrt\\\\x11\\\\x00\\\\x00\\\\x00_check_fill_valueR\\\\xc4\\\\x00\\\\x00\\\\x00R\\\\xe9\\\\x00\\\\x00\\\\x00t\\\\n\\\\x00\\\\x00\\\\x00isinstancet\\\\x02\\\\x00\\\\x00\\\\x00npt\\\\x08\\\\x00\\\\x00\\\\x00subdtypet\\\\x0e\\\\x00\\\\x00\\\\x00default_fillert\\\\x03\\\\x00\\\\x00\\\\x00gett\\\\x04\\\\x00\\\\x00\\\\x00kindt\\\\x03\\\\x00\\\\x00\\\\x00strt\\\\x05\\\\x00\\\\x00\\\\x00floatt\\\\x03\\\\x00\\\\x00\\\\x00intR\\\\x0e\\\\x00\\\\x00\\\\x00R\\\\x11\\\\x00\\\\x00\\\\x00R\\\\x10\\\\x00\\\\x00\\\\x00t\\\\x07\\\\x00\\\\x00\\\\x00complex(\\\\x02\\\\x00\\\\x00\\\\x00R\\\\xcb\\\\x00\\\\x00\\\\x00t\\\\x06\\\\x00\\\\x00\\\\x00defval(\\\\x00\\\\x00\\\\x00\\\\x00(\\\\x00\\\\x00\\\\x00\\\\x00s,\\\\x00\\\\x00\\\\x00lib/python2.7/site-packages/numpy/ma/core.pyRB\\\\x00\\\\x00\\\\x00\\\\xb2\\\\x00\\\\x00\\\\x00s(\\\\x00\\\\x00\\\\x00\\\\x00(\\\\x0f\\\\x01\\\\x15\\\\x01\\\\x12\\\\x01\\\\t\\\\x01\\\\x1f\\\\x01\\\\x0f\\\\x01\\\\x1c\\\\x02\\\\x18\\\\x01\\\\x0f\\\\x01\\\\r\\\\x01\\\\x1e\\\\x01\\\\r\\\\x01\\\\x0f\\\\x01\\\\r\\\\x01\\\\x0f\\\\x01\\\\r\\\\x01\\\\x0f\\\\x01\\\\r\\\\x02\\\\n\\\\x01c\\\\x02\\\\x00\\\\x00\\\\x00\\\\x06\\\\x00\\\\x00\\\\x00\\\\x04\\\\x00\\\\x00\\\\x00C`\\\\x01\\\\x00sX\\\\x00\\\\x00\\\\x00|\\\\x00\\\\x00j\\\\x00\\\\x00}\\\\x02\\\\x00|\\\\x02\\\\x00rP\\\\x00g\\\\x00\\\\x00}\\\\x03\\\\x00x.\\\\x00|\\\\x02\\\\x00D]&\\\\x00}\\\\x04\\\\x00t\\\\x01\\\\x00|\\\\x00\\\\x00|\\\\x04\\\\x00\\\\x19|\\\\x01\\\\x00\\\\x83\\\\x02\\\\x00}\\\\x05\\\\x00|\\\\x03\\\\x00j\\\\x02\\\\x00|\\\\x05\\\\x00\\\\x83\\\\x01\\\\x00\\\\x01q\\\\x1c\\\\x00Wt\\\\x03\\\\x00|\\\\x03\\\\x00\\\\x83\\\\x01\\\\x00S|\\\\x01\\\\x00|\\\\x00\\\\x00\\\\x19S(\\\\x01\\\\x00\\\\x00\\\\x00N(\\\\x04\\\\x00\\\\x00\\\\x00t\\\\x05\\\\x00\\\\x00\\\\x00namest\\\\x1e\\\\x00\\\\x00\\\\x00_recursive_extremum_fill_valueR"\\\\x00\\\\x00\\\\x00t\\\\x05\\\\x00\\\\x00\\\\x00tuple(\\\\x06\\\\x00\\\\x00\\\\x00t\\\\x06\\\\x00\\\\x00\\\\x00ndtypet\\\\x08\\\\x00\\\\x00\\\\x00extremumR\\\\xf8\\\\x00\\\\x00\\\\x00t\\\\x07\\\\x00\\\\x00\\\\x00deflistt\\\\x04\\\\x00\\\\x00\\\\x00namet\\\\x04\\\\x00\\\\x00\\\\x00fval(\\\\x00\\\\x00\\\\x00\\\\x00(\\\\x00\\\\x00\\\\x00\\\\x00s,\\\\x00\\\\x00\\\\x00lib/python2.7/site-packages/numpy/ma/core.pyR\\\\xf9\\\\x00\\\\x00\\\\x00\\\\xf2\\\\x00\\\\x00\\\\x00s\\\\x10\\\\x00\\\\x00\\\\x00\\\\x00\\\\x01\\\\t\\\\x01\\\\x06\\\\x01\\\\x06\\\\x01\\\\r\\\\x01\\\\x13\\\\x01\\\\x11\\\\x01\\\\n\\\\x01c\\\\x01\\\\x00\\\\x00\\\\x00\\\\x02\\\\x00\\\\x00\\\\x00\\\\x03\\\\x00\\\\x00\\\\x00C`\\\\x01\\\\x00s\\\\xa9\\\\x00\\\\x00\\\\x00d\\\\x01\\\\x00}\\\\x01\\\\x00t\\\\x00\\\\x00|\\\\x00\\\\x00d\\\\x02\\\\x00\\\\x83\\\\x02\\\\x00r%\\\\x00t\\\\x01\\\\x00|\\\\x00\\\\x00j\\\\x02\\\\x00t\\\\x03\\\\x00\\\\x83\\\\x02\\\\x00St\\\\x04\\\\x00|\\\\x00\\\\x00t\\\\x05\\\\x00\\\\x83\\\\x02\\\\x00rC\\\\x00t\\\\x03\\\\x00t\\\\x06\\\\x00j\\\\x07\\\\x00d\\\\x03\\\\x00\\\\x19\\\\x19St\\\\x04\\\\x00|\\\\x00\\\\x00t\\\\x08\\\\x00\\\\x83\\\\x02\\\\x00ra\\\\x00t\\\\x03\\\\x00t\\\\x06\\\\x00j\\\\x07\\\\x00d\\\\x04\\\\x00\\\\x19\\\\x19St\\\\x04\\\\x00|\\\\x00\\\\x00t\\\\t\\\\x00\\\\x83\\\\x02\\\\x00r\\\\x7f\\\\x00t\\\\x03\\\\x00t\\\\x06\\\\x00j\\\\x07\\\\x00d\\\\x05\\\\x00\\\\x19\\\\x19St\\\\x04\\\\x00|\\\\x00\\\\x00t\\\\n\\\\x00j\\\\x02\\\\x00\\\\x83\\\\x02\\\\x00r\\\\x99\\\\x00t\\\\x03\\\\x00|\\\\x00\\\\x00\\\\x19St\\\\x0b\\\\x00|\\\\x01\\\\x00\\\\x83\\\\x01\\\\x00\\\\x82\\\\x01\\\\x00d\\\\x06\\\\x00S(\\\\x07\\\\x00\\\\x00\\\\x00sX\\\\x04\\\\x00\\\\x00\\\\n    Return the maximum value that can be represented by the dtype of an object.\\\\n\\\\n    This function is useful for calculating a fill value suitable for\\\\n    taking the minimum of an array with a given dtype.\\\\n\\\\n    Parameters\\\\n    ----------\\\\n    obj : ndarray or dtype\\\\n        An object that can be queried for it\\\\\\\'s numeric type.\\\\n\\\\n    Returns\\\\n    -------\\\\n    val : scalar\\\\n        The maximum representable value.\\\\n\\\\n    Raises\\\\n    ------\\\\n    TypeError\\\\n        If `obj` isn\\\\\\\'t a suitable numeric type.\\\\n\\\\n    See Also\\\\n    --------\\\\n    maximum_fill_value : The inverse function.\\\\n    set_fill_value : Set the filling value of a masked array.\\\\n    MaskedArray.fill_value : Return current fill value.\\\\n\\\\n    Examples\\\\n    --------\\\\n    >>> import numpy.ma as ma\\\\n    >>> a = np.int8()\\\\n    >>> ma.minimum_fill_value(a)\\\\n    127\\\\n    >>> a = np.int32()\\\\n    >>> ma.minimum_fill_value(a)\\\\n    2147483647\\\\n\\\\n    An array of numeric data can also be passed.\\\\n\\\\n    >>> a = np.array([1, 2, 3], dtype=np.int8)\\\\n    >>> ma.minimum_fill_value(a)\\\\n    127\\\\n    >>> a = np.array([1, 2, 3], dtype=np.float32)\\\\n    >>> ma.minimum_fill_value(a)\\\\n    inf\\\\n\\\\n    s(\\\\x00\\\\x00\\\\x00Unsuitable type for calculating minimum.R\\\\xe9\\\\x00\\\\x00\\\\x00t\\\\x06\\\\x00\\\\x00\\\\x00float_t\\\\x04\\\\x00\\\\x00\\\\x00int_t\\\\x04\\\\x00\\\\x00\\\\x00uintN(\\\\x0c\\\\x00\\\\x00\\\\x00R\\\\xeb\\\\x00\\\\x00\\\\x00R\\\\xf9\\\\x00\\\\x00\\\\x00R\\\\xe9\\\\x00\\\\x00\\\\x00t\\\\n\\\\x00\\\\x00\\\\x00min_fillerR\\\\xed\\\\x00\\\\x00\\\\x00R\\\\xf4\\\\x00\\\\x00\\\\x00t\\\\x06\\\\x00\\\\x00\\\\x00ntypest\\\\x08\\\\x00\\\\x00\\\\x00typeDictR\\\\xf5\\\\x00\\\\x00\\\\x00R\\\\x0e\\\\x00\\\\x00\\\\x00R\\\\xee\\\\x00\\\\x00\\\\x00R\\\\xca\\\\x00\\\\x00\\\\x00(\\\\x02\\\\x00\\\\x00\\\\x00R\\\\xcb\\\\x00\\\\x00\\\\x00t\\\\x06\\\\x00\\\\x00\\\\x00errmsg(\\\\x00\\\\x00\\\\x00\\\\x00(\\\\x00\\\\x00\\\\x00\\\\x00s,\\\\x00\\\\x00\\\\x00lib/python2.7/site-packages/numpy/ma/core.pyR\\\\x8f\\\\x00\\\\x00\\\\x00\\\\xfd\\\\x00\\\\x00\\\\x00s\\\\x18\\\\x00\\\\x00\\\\x00\\\\x000\\\\x06\\\\x01\\\\x0f\\\\x01\\\\x10\\\\x01\\\\x0f\\\\x01\\\\x0f\\\\x01\\\\x0f\\\\x01\\\\x0f\\\\x01\\\\x0f\\\\x01\\\\x0f\\\\x01\\\\x12\\\\x01\\\\x08\\\\x02c\\\\x01\\\\x00\\\\x00\\\\x00\\\\x02\\\\x00\\\\x00\\\\x00\\\\x03\\\\x00\\\\x00\\\\x00C`\\\\x01\\\\x00s\\\\xa9\\\\x00\\\\x00\\\\x00d\\\\x01\\\\x00}\\\\x01\\\\x00t\\\\x00\\\\x00|\\\\x00\\\\x00d\\\\x02\\\\x00\\\\x83\\\\x02\\\\x00r%\\\\x00t\\\\x01\\\\x00|\\\\x00\\\\x00j\\\\x02\\\\x00t\\\\x03\\\\x00\\\\x83\\\\x02\\\\x00St\\\\x04\\\\x00|\\\\x00\\\\x00t\\\\x05\\\\x00\\\\x83\\\\x02\\\\x00rC\\\\x00t\\\\x03\\\\x00t\\\\x06\\\\x00j\\\\x07\\\\x00d\\\\x03\\\\x00\\\\x19\\\\x19St\\\\x04\\\\x00|\\\\x00\\\\x00t\\\\x08\\\\x00\\\\x83\\\\x02\\\\x00ra\\\\x00t\\\\x03\\\\x00t\\\\x06\\\\x00j\\\\x07\\\\x00d\\\\x04\\\\x00\\\\x19\\\\x19St\\\\x04\\\\x00|\\\\x00\\\\x00t\\\\t\\\\x00\\\\x83\\\\x02\\\\x00r\\\\x7f\\\\x00t\\\\x03\\\\x00t\\\\x06\\\\x00j\\\\x07\\\\x00d\\\\x05\\\\x00\\\\x19\\\\x19St\\\\x04\\\\x00|\\\\x00\\\\x00t\\\\n\\\\x00j\\\\x02\\\\x00\\\\x83\\\\x02\\\\x00r\\\\x99\\\\x00t\\\\x03\\\\x00|\\\\x00\\\\x00\\\\x19St\\\\x0b\\\\x00|\\\\x01\\\\x00\\\\x83\\\\x01\\\\x00\\\\x82\\\\x01\\\\x00d\\\\x06\\\\x00S(\\\\x07\\\\x00\\\\x00\\\\x00s\\\\\\\\\\\\x04\\\\x00\\\\x00\\\\n    Return the minimum value that can be represented by the dtype of an object.\\\\n\\\\n    This function is useful for calculating a fill value suitable for\\\\n    taking the maximum of an array with a given dtype.\\\\n\\\\n    Parameters\\\\n    ----------\\\\n    obj : {ndarray, dtype}\\\\n        An object that can be queried for it\\\\\\\'s numeric type.\\\\n\\\\n    Returns\\\\n    -------\\\\n    val : scalar\\\\n        The minimum representable value.\\\\n\\\\n    Raises\\\\n    ------\\\\n    TypeError\\\\n        If `obj` isn\\\\\\\'t a suitable numeric type.\\\\n\\\\n    See Also\\\\n    --------\\\\n    minimum_fill_value : The inverse function.\\\\n    set_fill_value : Set the filling value of a masked array.\\\\n    MaskedArray.fill_value : Return current fill value.\\\\n\\\\n    Examples\\\\n    --------\\\\n    >>> import numpy.ma as ma\\\\n    >>> a = np.int8()\\\\n    >>> ma.maximum_fill_value(a)\\\\n    -128\\\\n    >>> a = np.int32()\\\\n    >>> ma.maximum_fill_value(a)\\\\n    -2147483648\\\\n\\\\n    An array of numeric data can also be passed.\\\\n\\\\n    >>> a = np.array([1, 2, 3], dtype=np.int8)\\\\n    >>> ma.maximum_fill_value(a)\\\\n    -128\\\\n    >>> a = np.array([1, 2, 3], dtype=np.float32)\\\\n    >>> ma.maximum_fill_value(a)\\\\n    -inf\\\\n\\\\n    s(\\\\x00\\\\x00\\\\x00Unsuitable type for calculating maximum.R\\\\xe9\\\\x00\\\\x00\\\\x00R\\\\x00\\\\x01\\\\x00\\\\x00R\\\\x01\\\\x01\\\\x00\\\\x00R\\\\x02\\\\x01\\\\x00\\\\x00N(\\\\x0c\\\\x00\\\\x00\\\\x00R\\\\xeb\\\\x00\\\\x00\\\\x00R\\\\xf9\\\\x00\\\\x00\\\\x00R\\\\xe9\\\\x00\\\\x00\\\\x00t\\\\n\\\\x00\\\\x00\\\\x00max_fillerR\\\\xed\\\\x00\\\\x00\\\\x00R\\\\xf4\\\\x00\\\\x00\\\\x00R\\\\x04\\\\x01\\\\x00\\\\x00R\\\\x05\\\\x01\\\\x00\\\\x00R\\\\xf5\\\\x00\\\\x00\\\\x00R\\\\x0e\\\\x00\\\\x00\\\\x00R\\\\xee\\\\x00\\\\x00\\\\x00R\\\\xca\\\\x00\\\\x00\\\\x00(\\\\x02\\\\x00\\\\x00\\\\x00R\\\\xcb\\\\x00\\\\x00\\\\x00R\\\\x06\\\\x01\\\\x00\\\\x00(\\\\x00\\\\x00\\\\x00\\\\x00(\\\\x00\\\\x00\\\\x00\\\\x00s,\\\\x00\\\\x00\\\\x00lib/python2.7/site-packages/numpy/ma/core.pyR\\\\x8b\\\\x00\\\\x00\\\\x00<\\\\x01\\\\x00\\\\x00s\\\\x18\\\\x00\\\\x00\\\\x00\\\\x000\\\\x06\\\\x01\\\\x0f\\\\x01\\\\x10\\\\x01\\\\x0f\\\\x01\\\\x0f\\\\x01\\\\x0f\\\\x01\\\\x0f\\\\x01\\\\x0f\\\\x01\\\\x0f\\\\x01\\\\x12\\\\x01\\\\x08\\\\x02c\\\\x01\\\\x00\\\\x00\\\\x00\\\\x04\\\\x00\\\\x00\\\\x00\\\\x05\\\\x00\\\\x00\\\\x00C`\\\\x01\\\\x00s\\\\x7f\\\\x00\\\\x00\\\\x00g\\\\x00\\\\x00}\\\\x01\\\\x00xl\\\\x00|\\\\x00\\\\x00j\\\\x00\\\\x00D]a\\\\x00}\\\\x02\\\\x00|\\\\x00\\\\x00|\\\\x02\\\\x00\\\\x19}\\\\x03\\\\x00|\\\\x03\\\\x00j\\\\x01\\\\x00r9\\\\x00|\\\\x03\\\\x00j\\\\x01\\\\x00d\\\\x01\\\\x00\\\\x19}\\\\x03\\\\x00n\\\\x00\\\\x00|\\\\x03\\\\x00j\\\\x00\\\\x00r^\\\\x00|\\\\x01\\\\x00j\\\\x02\\\\x00t\\\\x03\\\\x00t\\\\x04\\\\x00|\\\\x03\\\\x00\\\\x83\\\\x01\\\\x00\\\\x83\\\\x01\\\\x00\\\\x83\\\\x01\\\\x00\\\\x01q\\\\x10\\\\x00|\\\\x01\\\\x00j\\\\x02\\\\x00t\\\\x05\\\\x00|\\\\x03\\\\x00\\\\x83\\\\x01\\\\x00\\\\x83\\\\x01\\\\x00\\\\x01q\\\\x10\\\\x00Wt\\\\x03\\\\x00|\\\\x01\\\\x00\\\\x83\\\\x01\\\\x00S(\\\\x02\\\\x00\\\\x00\\\\x00s$\\\\x01\\\\x00\\\\x00\\\\n    Create the default fill value for a structured dtype.\\\\n\\\\n    Parameters\\\\n    ----------\\\\n    dt: dtype\\\\n        The structured dtype for which to create the fill value.\\\\n\\\\n    Returns\\\\n    -------\\\\n    val: tuple\\\\n        A tuple of values corresponding to the default structured fill value.\\\\n\\\\n    i\\\\x00\\\\x00\\\\x00\\\\x00(\\\\x06\\\\x00\\\\x00\\\\x00R\\\\xf8\\\\x00\\\\x00\\\\x00R\\\\xef\\\\x00\\\\x00\\\\x00R"\\\\x00\\\\x00\\\\x00R\\\\xfa\\\\x00\\\\x00\\\\x00t!\\\\x00\\\\x00\\\\x00_recursive_set_default_fill_valueRB\\\\x00\\\\x00\\\\x00(\\\\x04\\\\x00\\\\x00\\\\x00t\\\\x02\\\\x00\\\\x00\\\\x00dtR\\\\xfd\\\\x00\\\\x00\\\\x00R\\\\xfe\\\\x00\\\\x00\\\\x00t\\\\x0b\\\\x00\\\\x00\\\\x00currenttype(\\\\x00\\\\x00\\\\x00\\\\x00(\\\\x00\\\\x00\\\\x00\\\\x00s,\\\\x00\\\\x00\\\\x00lib/python2.7/site-packages/numpy/ma/core.pyR\\\\x08\\\\x01\\\\x00\\\\x00{\\\\x01\\\\x00\\\\x00s\\\\x14\\\\x00\\\\x00\\\\x00\\\\x00\\\\x0f\\\\x06\\\\x01\\\\x10\\\\x01\\\\n\\\\x01\\\\t\\\\x01\\\\x10\\\\x02\\\\t\\\\x01\\\\x06\\\\x01\\\\x16\\\\x02\\\\x17\\\\x01c\\\\x02\\\\x00\\\\x00\\\\x00\\\\x06\\\\x00\\\\x00\\\\x00\\\\x06\\\\x00\\\\x00\\\\x00C`\\\\x01\\\\x00s\\\\xbb\\\\x00\\\\x00\\\\x00t\\\\x00\\\\x00j\\\\x01\\\\x00|\\\\x00\\\\x00t\\\\x02\\\\x00|\\\\x01\\\\x00j\\\\x03\\\\x00\\\\x83\\\\x01\\\\x00\\\\x83\\\\x02\\\\x00}\\\\x00\\\\x00g\\\\x00\\\\x00}\\\\x02\\\\x00x\\\\x8d\\\\x00t\\\\x04\\\\x00|\\\\x00\\\\x00|\\\\x01\\\\x00j\\\\x03\\\\x00\\\\x83\\\\x02\\\\x00D]y\\\\x00\\\\\\\\\\\\x02\\\\x00}\\\\x03\\\\x00}\\\\x04\\\\x00|\\\\x01\\\\x00|\\\\x04\\\\x00\\\\x19}\\\\x05\\\\x00|\\\\x05\\\\x00j\\\\x05\\\\x00rc\\\\x00|\\\\x05\\\\x00j\\\\x05\\\\x00d\\\\x01\\\\x00\\\\x19}\\\\x05\\\\x00n\\\\x00\\\\x00|\\\\x05\\\\x00j\\\\x03\\\\x00r\\\\x8b\\\\x00|\\\\x02\\\\x00j\\\\x06\\\\x00t\\\\x07\\\\x00t\\\\x08\\\\x00|\\\\x03\\\\x00|\\\\x05\\\\x00\\\\x83\\\\x02\\\\x00\\\\x83\\\\x01\\\\x00\\\\x83\\\\x01\\\\x00\\\\x01q4\\\\x00|\\\\x02\\\\x00j\\\\x06\\\\x00t\\\\x00\\\\x00j\\\\t\\\\x00|\\\\x03\\\\x00d\\\\x02\\\\x00|\\\\x05\\\\x00\\\\x83\\\\x01\\\\x01j\\\\n\\\\x00\\\\x83\\\\x00\\\\x00\\\\x83\\\\x01\\\\x00\\\\x01q4\\\\x00Wt\\\\x07\\\\x00|\\\\x02\\\\x00\\\\x83\\\\x01\\\\x00S(\\\\x03\\\\x00\\\\x00\\\\x00s\\\\xc3\\\\x01\\\\x00\\\\x00\\\\n    Create a fill value for a structured dtype.\\\\n\\\\n    Parameters\\\\n    ----------\\\\n    fillvalue: scalar or array_like\\\\n        Scalar or array representing the fill value. If it is of shorter\\\\n        length than the number of fields in dt, it will be resized.\\\\n    dt: dtype\\\\n        The structured dtype for which to create the fill value.\\\\n\\\\n    Returns\\\\n    -------\\\\n    val: tuple\\\\n        A tuple of values corresponding to the structured fill value.\\\\n\\\\n    i\\\\x00\\\\x00\\\\x00\\\\x00R\\\\xe9\\\\x00\\\\x00\\\\x00(\\\\x0b\\\\x00\\\\x00\\\\x00R\\\\xee\\\\x00\\\\x00\\\\x00R\\\\xa6\\\\x00\\\\x00\\\\x00t\\\\x03\\\\x00\\\\x00\\\\x00lenR\\\\xf8\\\\x00\\\\x00\\\\x00t\\\\x03\\\\x00\\\\x00\\\\x00zipR\\\\xef\\\\x00\\\\x00\\\\x00R"\\\\x00\\\\x00\\\\x00R\\\\xfa\\\\x00\\\\x00\\\\x00t\\\\x19\\\\x00\\\\x00\\\\x00_recursive_set_fill_valueR\\\\n\\\\x00\\\\x00\\\\x00t\\\\x04\\\\x00\\\\x00\\\\x00item(\\\\x06\\\\x00\\\\x00\\\\x00t\\\\t\\\\x00\\\\x00\\\\x00fillvalueR\\\\t\\\\x01\\\\x00\\\\x00t\\\\x0c\\\\x00\\\\x00\\\\x00output_valueR\\\\xff\\\\x00\\\\x00\\\\x00R\\\\xfe\\\\x00\\\\x00\\\\x00t\\\\x06\\\\x00\\\\x00\\\\x00cdtype(\\\\x00\\\\x00\\\\x00\\\\x00(\\\\x00\\\\x00\\\\x00\\\\x00s,\\\\x00\\\\x00\\\\x00lib/python2.7/site-packages/numpy/ma/core.pyR\\\\r\\\\x01\\\\x00\\\\x00\\\\x98\\\\x01\\\\x00\\\\x00s\\\\x14\\\\x00\\\\x00\\\\x00\\\\x00\\\\x12\\\\x1b\\\\x01\\\\x06\\\\x01\\\\x1f\\\\x01\\\\n\\\\x01\\\\t\\\\x01\\\\x10\\\\x02\\\\t\\\\x01\\\\x1f\\\\x02&\\\\x01c\\\\x02\\\\x00\\\\x00\\\\x00\\\\x06\\\\x00\\\\x00\\\\x00\\\\x06\\\\x00\\\\x00\\\\x00C`\\\\x01\\\\x00s\\\\xba\\\\x01\\\\x00\\\\x00t\\\\x00\\\\x00j\\\\x01\\\\x00|\\\\x01\\\\x00\\\\x83\\\\x01\\\\x00}\\\\x01\\\\x00|\\\\x01\\\\x00j\\\\x02\\\\x00}\\\\x02\\\\x00|\\\\x00\\\\x00d\\\\t\\\\x00k\\\\x08\\\\x00rW\\\\x00|\\\\x02\\\\x00rH\\\\x00t\\\\x00\\\\x00j\\\\x04\\\\x00t\\\\x05\\\\x00|\\\\x01\\\\x00\\\\x83\\\\x01\\\\x00d\\\\x01\\\\x00|\\\\x01\\\\x00\\\\x83\\\\x01\\\\x01}\\\\x00\\\\x00q\\\\xad\\\\x01t\\\\x06\\\\x00|\\\\x01\\\\x00\\\\x83\\\\x01\\\\x00}\\\\x00\\\\x00nV\\\\x01|\\\\x02\\\\x00r\\\\\\\'\\\\x01g\\\\x00\\\\x00|\\\\x01\\\\x00j\\\\x07\\\\x00D]\\\\x1a\\\\x00}\\\\x03\\\\x00|\\\\x03\\\\x00d\\\\x02\\\\x00\\\\x19|\\\\x03\\\\x00d\\\\x03\\\\x00\\\\x19f\\\\x02\\\\x00^\\\\x02\\\\x00qg\\\\x00}\\\\x04\\\\x00t\\\\x08\\\\x00|\\\\x00\\\\x00t\\\\t\\\\x00t\\\\x00\\\\x00j\\\\n\\\\x00f\\\\x02\\\\x00\\\\x83\\\\x02\\\\x00r\\\\xf1\\\\x00y\\\\x1f\\\\x00t\\\\x00\\\\x00j\\\\x04\\\\x00|\\\\x00\\\\x00d\\\\x04\\\\x00t\\\\x0b\\\\x00d\\\\x01\\\\x00|\\\\x04\\\\x00\\\\x83\\\\x01\\\\x02}\\\\x00\\\\x00Wq$\\\\x01\\\\x04t\\\\x0c\\\\x00k\\\\n\\\\x00r\\\\xed\\\\x00\\\\x01\\\\x01\\\\x01d\\\\x05\\\\x00}\\\\x05\\\\x00t\\\\x0c\\\\x00|\\\\x05\\\\x00|\\\\x00\\\\x00|\\\\x04\\\\x00f\\\\x02\\\\x00\\\\x16\\\\x83\\\\x01\\\\x00\\\\x82\\\\x01\\\\x00q$\\\\x01Xq\\\\xad\\\\x01t\\\\x00\\\\x00j\\\\r\\\\x00|\\\\x00\\\\x00d\\\\x01\\\\x00t\\\\x0e\\\\x00\\\\x83\\\\x01\\\\x01}\\\\x00\\\\x00t\\\\x00\\\\x00j\\\\x04\\\\x00t\\\\x0f\\\\x00|\\\\x00\\\\x00|\\\\x01\\\\x00\\\\x83\\\\x02\\\\x00d\\\\x01\\\\x00|\\\\x01\\\\x00\\\\x83\\\\x01\\\\x01}\\\\x00\\\\x00n\\\\x86\\\\x00t\\\\x08\\\\x00|\\\\x00\\\\x00t\\\\x10\\\\x00\\\\x83\\\\x02\\\\x00r^\\\\x01|\\\\x01\\\\x00j\\\\x11\\\\x00d\\\\x06\\\\x00k\\\\x07\\\\x00r^\\\\x01d\\\\x07\\\\x00}\\\\x05\\\\x00t\\\\x12\\\\x00|\\\\x05\\\\x00|\\\\x01\\\\x00\\\\x16\\\\x83\\\\x01\\\\x00\\\\x82\\\\x01\\\\x00nO\\\\x00y\\\\x1f\\\\x00t\\\\x00\\\\x00j\\\\x04\\\\x00|\\\\x00\\\\x00d\\\\x04\\\\x00t\\\\x0b\\\\x00d\\\\x01\\\\x00|\\\\x01\\\\x00\\\\x83\\\\x01\\\\x02}\\\\x00\\\\x00Wn-\\\\x00\\\\x04t\\\\x13\\\\x00k\\\\n\\\\x00r\\\\xac\\\\x01\\\\x01\\\\x01\\\\x01d\\\\x08\\\\x00}\\\\x05\\\\x00t\\\\x12\\\\x00|\\\\x05\\\\x00|\\\\x00\\\\x00|\\\\x01\\\\x00f\\\\x02\\\\x00\\\\x16\\\\x83\\\\x01\\\\x00\\\\x82\\\\x01\\\\x00n\\\\x01\\\\x00Xt\\\\x00\\\\x00j\\\\x04\\\\x00|\\\\x00\\\\x00\\\\x83\\\\x01\\\\x00S(\\\\n\\\\x00\\\\x00\\\\x00s\\\\xaf\\\\x01\\\\x00\\\\x00\\\\n    Private function validating the given `fill_value` for the given dtype.\\\\n\\\\n    If fill_value is None, it is set to the default corresponding to the dtype\\\\n    if this latter is standard (no fields). If the datatype is flexible (named\\\\n    fields), fill_value is set to a tuple whose elements are the default fill\\\\n    values corresponding to each field.\\\\n\\\\n    If fill_value is not None, its value is forced to the given dtype.\\\\n\\\\n    R\\\\xe9\\\\x00\\\\x00\\\\x00i\\\\x00\\\\x00\\\\x00\\\\x00i\\\\x01\\\\x00\\\\x00\\\\x00R<\\\\x00\\\\x00\\\\x00s"\\\\x00\\\\x00\\\\x00Unable to transform %s to dtype %st\\\\x04\\\\x00\\\\x00\\\\x00OSVUs6\\\\x00\\\\x00\\\\x00Cannot set fill value of string with array of dtype %ss \\\\x00\\\\x00\\\\x00Fill value %s overflows dtype %sN(\\\\x14\\\\x00\\\\x00\\\\x00R\\\\xee\\\\x00\\\\x00\\\\x00R\\\\xe9\\\\x00\\\\x00\\\\x00t\\\\x06\\\\x00\\\\x00\\\\x00fieldsR\\\\xc4\\\\x00\\\\x00\\\\x00R\\\\n\\\\x00\\\\x00\\\\x00R\\\\x08\\\\x01\\\\x00\\\\x00RB\\\\x00\\\\x00\\\\x00t\\\\x05\\\\x00\\\\x00\\\\x00descrR\\\\xed\\\\x00\\\\x00\\\\x00R\\\\x04\\\\x00\\\\x00\\\\x00t\\\\x04\\\\x00\\\\x00\\\\x00voidt\\\\x05\\\\x00\\\\x00\\\\x00Falset\\\\n\\\\x00\\\\x00\\\\x00ValueErrorR0\\\\x00\\\\x00\\\\x00t\\\\x06\\\\x00\\\\x00\\\\x00objectR\\\\r\\\\x01\\\\x00\\\\x00R\\\\x0f\\\\x00\\\\x00\\\\x00t\\\\x04\\\\x00\\\\x00\\\\x00charR\\\\xca\\\\x00\\\\x00\\\\x00t\\\\r\\\\x00\\\\x00\\\\x00OverflowError(\\\\x06\\\\x00\\\\x00\\\\x00t\\\\n\\\\x00\\\\x00\\\\x00fill_valueR\\\\xfb\\\\x00\\\\x00\\\\x00R\\\\x13\\\\x01\\\\x00\\\\x00t\\\\x01\\\\x00\\\\x00\\\\x00_t\\\\x06\\\\x00\\\\x00\\\\x00fdtypet\\\\x07\\\\x00\\\\x00\\\\x00err_msg(\\\\x00\\\\x00\\\\x00\\\\x00(\\\\x00\\\\x00\\\\x00\\\\x00s,\\\\x00\\\\x00\\\\x00lib/python2.7/site-packages/numpy/ma/core.pyR\\\\xec\\\\x00\\\\x00\\\\x00\\\\xb8\\\\x01\\\\x00\\\\x00s6\\\\x00\\\\x00\\\\x00\\\\x00\\\\x0c\\\\x0f\\\\x01\\\\t\\\\x01\\\\x0c\\\\x01\\\\x06\\\\x01\\\\x12\\\\x01\\\\x0c\\\\x02\\\\x0f\\\\x01\\\\x06\\\\x01*\\\\x01\\\\x18\\\\x01\\\\x03\\\\x01\\\\x1f\\\\x01\\\\r\\\\x01\\\\x06\\\\x01\\\\x1d\\\\x02\\\\x15\\\\x01\\\\x15\\\\x01\\\\x0c\\\\x02\\\\x1e\\\\x01\\\\x06\\\\x01\\\\x13\\\\x03\\\\x03\\\\x01\\\\x1f\\\\x01\\\\r\\\\x04\\\\x06\\\\x01\\\\x1a\\\\x01c\\\\x02\\\\x00\\\\x00\\\\x00\\\\x02\\\\x00\\\\x00\\\\x00\\\\x03\\\\x00\\\\x00\\\\x00C`\\\\x01\\\\x00s#\\\\x00\\\\x00\\\\x00t\\\\x00\\\\x00|\\\\x00\\\\x00t\\\\x01\\\\x00\\\\x83\\\\x02\\\\x00r\\\\x1f\\\\x00|\\\\x00\\\\x00j\\\\x02\\\\x00|\\\\x01\\\\x00\\\\x83\\\\x01\\\\x00\\\\x01n\\\\x00\\\\x00d\\\\x01\\\\x00S(\\\\x02\\\\x00\\\\x00\\\\x00s\\\\xc4\\\\x05\\\\x00\\\\x00\\\\n    Set the filling value of a, if a is a masked array.\\\\n\\\\n    This function changes the fill value of the masked array `a` in place.\\\\n    If `a` is not a masked array, the function returns silently, without\\\\n    doing anything.\\\\n\\\\n    Parameters\\\\n    ----------\\\\n    a : array_like\\\\n        Input array.\\\\n    fill_value : dtype\\\\n        Filling value. A consistency test is performed to make sure\\\\n        the value is compatible with the dtype of `a`.\\\\n\\\\n    Returns\\\\n    -------\\\\n    None\\\\n        Nothing returned by this function.\\\\n\\\\n    See Also\\\\n    --------\\\\n    maximum_fill_value : Return the default fill value for a dtype.\\\\n    MaskedArray.fill_value : Return current fill value.\\\\n    MaskedArray.set_fill_value : Equivalent method.\\\\n\\\\n    Examples\\\\n    --------\\\\n    >>> import numpy.ma as ma\\\\n    >>> a = np.arange(5)\\\\n    >>> a\\\\n    array([0, 1, 2, 3, 4])\\\\n    >>> a = ma.masked_where(a < 3, a)\\\\n    >>> a\\\\n    masked_array(data = [-- -- -- 3 4],\\\\n          mask = [ True  True  True False False],\\\\n          fill_value=999999)\\\\n    >>> ma.set_fill_value(a, -999)\\\\n    >>> a\\\\n    masked_array(data = [-- -- -- 3 4],\\\\n          mask = [ True  True  True False False],\\\\n          fill_value=-999)\\\\n\\\\n    Nothing happens if `a` is not a masked array.\\\\n\\\\n    >>> a = range(5)\\\\n    >>> a\\\\n    [0, 1, 2, 3, 4]\\\\n    >>> ma.set_fill_value(a, 100)\\\\n    >>> a\\\\n    [0, 1, 2, 3, 4]\\\\n    >>> a = np.arange(5)\\\\n    >>> a\\\\n    array([0, 1, 2, 3, 4])\\\\n    >>> ma.set_fill_value(a, 100)\\\\n    >>> a\\\\n    array([0, 1, 2, 3, 4])\\\\n\\\\n    N(\\\\x03\\\\x00\\\\x00\\\\x00R\\\\xed\\\\x00\\\\x00\\\\x00R\\\\x17\\\\x00\\\\x00\\\\x00R\\\\xaa\\\\x00\\\\x00\\\\x00(\\\\x02\\\\x00\\\\x00\\\\x00t\\\\x01\\\\x00\\\\x00\\\\x00aR\\\\x1b\\\\x01\\\\x00\\\\x00(\\\\x00\\\\x00\\\\x00\\\\x00(\\\\x00\\\\x00\\\\x00\\\\x00s,\\\\x00\\\\x00\\\\x00lib/python2.7/site-packages/numpy/ma/core.pyR\\\\xaa\\\\x00\\\\x00\\\\x00\\\\xe9\\\\x01\\\\x00\\\\x00s\\\\x06\\\\x00\\\\x00\\\\x00\\\\x00<\\\\x0f\\\\x01\\\\x10\\\\x01c\\\\x01\\\\x00\\\\x00\\\\x00\\\\x02\\\\x00\\\\x00\\\\x00\\\\x03\\\\x00\\\\x00\\\\x00C`\\\\x01\\\\x00s+\\\\x00\\\\x00\\\\x00t\\\\x00\\\\x00|\\\\x00\\\\x00t\\\\x01\\\\x00\\\\x83\\\\x02\\\\x00r\\\\x1b\\\\x00|\\\\x00\\\\x00j\\\\x02\\\\x00}\\\\x01\\\\x00n\\\\x0c\\\\x00t\\\\x03\\\\x00|\\\\x00\\\\x00\\\\x83\\\\x01\\\\x00}\\\\x01\\\\x00|\\\\x01\\\\x00S(\\\\x01\\\\x00\\\\x00\\\\x00sr\\\\x00\\\\x00\\\\x00\\\\n    Return the filling value of a, if any.  Otherwise, returns the\\\\n    default filling value for that type.\\\\n\\\\n    (\\\\x04\\\\x00\\\\x00\\\\x00R\\\\xed\\\\x00\\\\x00\\\\x00R\\\\x17\\\\x00\\\\x00\\\\x00R\\\\x1b\\\\x01\\\\x00\\\\x00RB\\\\x00\\\\x00\\\\x00(\\\\x02\\\\x00\\\\x00\\\\x00R\\\\x1f\\\\x01\\\\x00\\\\x00t\\\\x06\\\\x00\\\\x00\\\\x00result(\\\\x00\\\\x00\\\\x00\\\\x00(\\\\x00\\\\x00\\\\x00\\\\x00s,\\\\x00\\\\x00\\\\x00lib/python2.7/site-packages/numpy/ma/core.pyt\\\\x0e\\\\x00\\\\x00\\\\x00get_fill_value*\\\\x02\\\\x00\\\\x00s\\\\x08\\\\x00\\\\x00\\\\x00\\\\x00\\\\x06\\\\x0f\\\\x01\\\\x0c\\\\x02\\\\x0c\\\\x01c\\\\x02\\\\x00\\\\x00\\\\x00\\\\x04\\\\x00\\\\x00\\\\x00\\\\x02\\\\x00\\\\x00\\\\x00C`\\\\x01\\\\x00s,\\\\x00\\\\x00\\\\x00t\\\\x00\\\\x00|\\\\x00\\\\x00\\\\x83\\\\x01\\\\x00}\\\\x02\\\\x00t\\\\x00\\\\x00|\\\\x01\\\\x00\\\\x83\\\\x01\\\\x00}\\\\x03\\\\x00|\\\\x02\\\\x00|\\\\x03\\\\x00k\\\\x02\\\\x00r(\\\\x00|\\\\x02\\\\x00Sd\\\\x01\\\\x00S(\\\\x02\\\\x00\\\\x00\\\\x00s\\\\x1e\\\\x02\\\\x00\\\\x00\\\\n    Return the common filling value of two masked arrays, if any.\\\\n\\\\n    If ``a.fill_value == b.fill_value``, return the fill value,\\\\n    otherwise return None.\\\\n\\\\n    Parameters\\\\n    ----------\\\\n    a, b : MaskedArray\\\\n        The masked arrays for which to compare fill values.\\\\n\\\\n    Returns\\\\n    -------\\\\n    fill_value : scalar or None\\\\n        The common fill value, or None.\\\\n\\\\n    Examples\\\\n    --------\\\\n    >>> x = np.ma.array([0, 1.], fill_value=3)\\\\n    >>> y = np.ma.array([0, 1.], fill_value=3)\\\\n    >>> np.ma.common_fill_value(x, y)\\\\n    3.0\\\\n\\\\n    N(\\\\x02\\\\x00\\\\x00\\\\x00R!\\\\x01\\\\x00\\\\x00R\\\\xc4\\\\x00\\\\x00\\\\x00(\\\\x04\\\\x00\\\\x00\\\\x00R\\\\x1f\\\\x01\\\\x00\\\\x00R\\\\xcf\\\\x00\\\\x00\\\\x00t\\\\x02\\\\x00\\\\x00\\\\x00t1t\\\\x02\\\\x00\\\\x00\\\\x00t2(\\\\x00\\\\x00\\\\x00\\\\x00(\\\\x00\\\\x00\\\\x00\\\\x00s,\\\\x00\\\\x00\\\\x00lib/python2.7/site-packages/numpy/ma/core.pyR7\\\\x00\\\\x00\\\\x007\\\\x02\\\\x00\\\\x00s\\\\n\\\\x00\\\\x00\\\\x00\\\\x00\\\\x19\\\\x0c\\\\x01\\\\x0c\\\\x01\\\\x0c\\\\x01\\\\x04\\\\x01c\\\\x02\\\\x00\\\\x00\\\\x00\\\\x02\\\\x00\\\\x00\\\\x00\\\\x03\\\\x00\\\\x00\\\\x00C`\\\\x01\\\\x00s_\\\\x00\\\\x00\\\\x00t\\\\x00\\\\x00|\\\\x00\\\\x00d\\\\x01\\\\x00\\\\x83\\\\x02\\\\x00r\\\\x1c\\\\x00|\\\\x00\\\\x00j\\\\x01\\\\x00|\\\\x01\\\\x00\\\\x83\\\\x01\\\\x00St\\\\x02\\\\x00|\\\\x00\\\\x00t\\\\x03\\\\x00\\\\x83\\\\x02\\\\x00r/\\\\x00|\\\\x00\\\\x00St\\\\x02\\\\x00|\\\\x00\\\\x00t\\\\x04\\\\x00\\\\x83\\\\x02\\\\x00rN\\\\x00t\\\\x05\\\\x00j\\\\x06\\\\x00|\\\\x00\\\\x00d\\\\x02\\\\x00\\\\x83\\\\x02\\\\x00St\\\\x05\\\\x00j\\\\x06\\\\x00|\\\\x00\\\\x00\\\\x83\\\\x01\\\\x00Sd\\\\x03\\\\x00S(\\\\x04\\\\x00\\\\x00\\\\x00sn\\\\x03\\\\x00\\\\x00\\\\n    Return input as an array with masked data replaced by a fill value.\\\\n\\\\n    If `a` is not a `MaskedArray`, `a` itself is returned.\\\\n    If `a` is a `MaskedArray` and `fill_value` is None, `fill_value` is set to\\\\n    ``a.fill_value``.\\\\n\\\\n    Parameters\\\\n    ----------\\\\n    a : MaskedArray or array_like\\\\n        An input object.\\\\n    fill_value : scalar, optional\\\\n        Filling value. Default is None.\\\\n\\\\n    Returns\\\\n    -------\\\\n    a : ndarray\\\\n        The filled array.\\\\n\\\\n    See Also\\\\n    --------\\\\n    compressed\\\\n\\\\n    Examples\\\\n    --------\\\\n    >>> x = np.ma.array(np.arange(9).reshape(3, 3), mask=[[1, 0, 0],\\\\n    ...                                                   [1, 0, 0],\\\\n    ...                                                   [0, 0, 0]])\\\\n    >>> x.filled()\\\\n    array([[999999,      1,      2],\\\\n           [999999,      4,      5],\\\\n           [     6,      7,      8]])\\\\n\\\\n    RN\\\\x00\\\\x00\\\\x00R\\\\xd4\\\\x00\\\\x00\\\\x00N(\\\\x07\\\\x00\\\\x00\\\\x00R\\\\xeb\\\\x00\\\\x00\\\\x00RN\\\\x00\\\\x00\\\\x00R\\\\xed\\\\x00\\\\x00\\\\x00R\\\\x04\\\\x00\\\\x00\\\\x00t\\\\x04\\\\x00\\\\x00\\\\x00dictR\\\\xee\\\\x00\\\\x00\\\\x00R\\\\n\\\\x00\\\\x00\\\\x00(\\\\x02\\\\x00\\\\x00\\\\x00R\\\\x1f\\\\x01\\\\x00\\\\x00R\\\\x1b\\\\x01\\\\x00\\\\x00(\\\\x00\\\\x00\\\\x00\\\\x00(\\\\x00\\\\x00\\\\x00\\\\x00s,\\\\x00\\\\x00\\\\x00lib/python2.7/site-packages/numpy/ma/core.pyRN\\\\x00\\\\x00\\\\x00W\\\\x02\\\\x00\\\\x00s\\\\x0e\\\\x00\\\\x00\\\\x00\\\\x00#\\\\x0f\\\\x01\\\\r\\\\x01\\\\x0f\\\\x02\\\\x04\\\\x01\\\\x0f\\\\x01\\\\x10\\\\x02c\\\\x00\\\\x00\\\\x00\\\\x00\\\\x06\\\\x00\\\\x00\\\\x00\\\\x04\\\\x00\\\\x00\\\\x00G`\\\\x01\\\\x00s\\\\xc8\\\\x00\\\\x00\\\\x00t\\\\x00\\\\x00|\\\\x00\\\\x00\\\\x83\\\\x01\\\\x00d\\\\x01\\\\x00k\\\\x02\\\\x00rC\\\\x00|\\\\x00\\\\x00d\\\\x02\\\\x00\\\\x19}\\\\x01\\\\x00t\\\\x01\\\\x00|\\\\x01\\\\x00t\\\\x02\\\\x00\\\\x83\\\\x02\\\\x00r:\\\\x00t\\\\x03\\\\x00|\\\\x01\\\\x00\\\\x83\\\\x01\\\\x00}\\\\x02\\\\x00q\\\\xb1\\\\x00t\\\\x02\\\\x00}\\\\x02\\\\x00nn\\\\x00g\\\\x00\\\\x00|\\\\x00\\\\x00D]\\\\x12\\\\x00}\\\\x03\\\\x00t\\\\x03\\\\x00|\\\\x03\\\\x00\\\\x83\\\\x01\\\\x00^\\\\x02\\\\x00qJ\\\\x00}\\\\x04\\\\x00|\\\\x04\\\\x00d\\\\x02\\\\x00\\\\x19}\\\\x02\\\\x00t\\\\x04\\\\x00|\\\\x02\\\\x00t\\\\x02\\\\x00\\\\x83\\\\x02\\\\x00s\\\\x84\\\\x00t\\\\x02\\\\x00}\\\\x02\\\\x00n\\\\x00\\\\x00x*\\\\x00|\\\\x04\\\\x00d\\\\x01\\\\x00\\\\x1fD]\\\\x1e\\\\x00}\\\\x05\\\\x00t\\\\x04\\\\x00|\\\\x05\\\\x00|\\\\x02\\\\x00\\\\x83\\\\x02\\\\x00r\\\\x8f\\\\x00|\\\\x05\\\\x00}\\\\x02\\\\x00q\\\\x8f\\\\x00q\\\\x8f\\\\x00W|\\\\x02\\\\x00j\\\\x05\\\\x00d\\\\x03\\\\x00k\\\\x02\\\\x00r\\\\xc4\\\\x00t\\\\x02\\\\x00S|\\\\x02\\\\x00S(\\\\x04\\\\x00\\\\x00\\\\x00s\\\\x8d\\\\x00\\\\x00\\\\x00\\\\n    Return the youngest subclass of MaskedArray from a list of (masked) arrays.\\\\n\\\\n    In case of siblings, the first listed takes over.\\\\n\\\\n    i\\\\x01\\\\x00\\\\x00\\\\x00i\\\\x00\\\\x00\\\\x00\\\\x00t\\\\x0e\\\\x00\\\\x00\\\\x00MaskedConstant(\\\\x06\\\\x00\\\\x00\\\\x00R\\\\x0b\\\\x01\\\\x00\\\\x00R\\\\xed\\\\x00\\\\x00\\\\x00R\\\\x17\\\\x00\\\\x00\\\\x00t\\\\x04\\\\x00\\\\x00\\\\x00typet\\\\n\\\\x00\\\\x00\\\\x00issubclassR\\\\xc2\\\\x00\\\\x00\\\\x00(\\\\x06\\\\x00\\\\x00\\\\x00t\\\\x06\\\\x00\\\\x00\\\\x00arrayst\\\\x03\\\\x00\\\\x00\\\\x00arrt\\\\x04\\\\x00\\\\x00\\\\x00rclsR\\\\x1f\\\\x01\\\\x00\\\\x00t\\\\x06\\\\x00\\\\x00\\\\x00arrclst\\\\x03\\\\x00\\\\x00\\\\x00cls(\\\\x00\\\\x00\\\\x00\\\\x00(\\\\x00\\\\x00\\\\x00\\\\x00s,\\\\x00\\\\x00\\\\x00lib/python2.7/site-packages/numpy/ma/core.pyt\\\\x13\\\\x00\\\\x00\\\\x00get_masked_subclass\\\\x85\\\\x02\\\\x00\\\\x00s\\\\x1e\\\\x00\\\\x00\\\\x00\\\\x00\\\\x07\\\\x12\\\\x01\\\\n\\\\x01\\\\x0f\\\\x01\\\\x0f\\\\x02\\\\t\\\\x02\\\\x1f\\\\x01\\\\n\\\\x01\\\\x0f\\\\x01\\\\t\\\\x01\\\\x11\\\\x01\\\\x0f\\\\x01\\\\r\\\\x02\\\\x0f\\\\x01\\\\x04\\\\x01c\\\\x02\\\\x00\\\\x00\\\\x00\\\\x03\\\\x00\\\\x00\\\\x00\\\\x06\\\\x00\\\\x00\\\\x00C`\\\\x01\\\\x00sS\\\\x00\\\\x00\\\\x00y\\\\r\\\\x00|\\\\x00\\\\x00j\\\\x00\\\\x00}\\\\x02\\\\x00Wn,\\\\x00\\\\x04t\\\\x01\\\\x00k\\\\n\\\\x00r;\\\\x00\\\\x01\\\\x01\\\\x01t\\\\x02\\\\x00j\\\\x03\\\\x00|\\\\x00\\\\x00d\\\\x01\\\\x00t\\\\x04\\\\x00d\\\\x02\\\\x00|\\\\x01\\\\x00\\\\x83\\\\x01\\\\x02}\\\\x02\\\\x00n\\\\x01\\\\x00X|\\\\x01\\\\x00sO\\\\x00|\\\\x02\\\\x00j\\\\x05\\\\x00t\\\\x06\\\\x00\\\\x83\\\\x01\\\\x00S|\\\\x02\\\\x00S(\\\\x03\\\\x00\\\\x00\\\\x00sE\\\\x04\\\\x00\\\\x00\\\\n    Return the data of a masked array as an ndarray.\\\\n\\\\n    Return the data of `a` (if any) as an ndarray if `a` is a ``MaskedArray``,\\\\n    else return `a` as a ndarray or subclass (depending on `subok`) if not.\\\\n\\\\n    Parameters\\\\n    ----------\\\\n    a : array_like\\\\n        Input ``MaskedArray``, alternatively a ndarray or a subclass thereof.\\\\n    subok : bool\\\\n        Whether to force the output to be a `pure` ndarray (False) or to\\\\n        return a subclass of ndarray if appropriate (True, default).\\\\n\\\\n    See Also\\\\n    --------\\\\n    getmask : Return the mask of a masked array, or nomask.\\\\n    getmaskarray : Return the mask of a masked array, or full array of False.\\\\n\\\\n    Examples\\\\n    --------\\\\n    >>> import numpy.ma as ma\\\\n    >>> a = ma.masked_equal([[1,2],[3,4]], 2)\\\\n    >>> a\\\\n    masked_array(data =\\\\n     [[1 --]\\\\n     [3 4]],\\\\n          mask =\\\\n     [[False  True]\\\\n     [False False]],\\\\n          fill_value=999999)\\\\n    >>> ma.getdata(a)\\\\n    array([[1, 2],\\\\n           [3, 4]])\\\\n\\\\n    Equivalently use the ``MaskedArray`` `data` attribute.\\\\n\\\\n    >>> a.data\\\\n    array([[1, 2],\\\\n           [3, 4]])\\\\n\\\\n    R<\\\\x00\\\\x00\\\\x00t\\\\x05\\\\x00\\\\x00\\\\x00subok(\\\\x07\\\\x00\\\\x00\\\\x00t\\\\x05\\\\x00\\\\x00\\\\x00_datat\\\\x0e\\\\x00\\\\x00\\\\x00AttributeErrorR\\\\xee\\\\x00\\\\x00\\\\x00R\\\\n\\\\x00\\\\x00\\\\x00R\\\\x16\\\\x01\\\\x00\\\\x00t\\\\x04\\\\x00\\\\x00\\\\x00viewR\\\\x04\\\\x00\\\\x00\\\\x00(\\\\x03\\\\x00\\\\x00\\\\x00R\\\\x1f\\\\x01\\\\x00\\\\x00R.\\\\x01\\\\x00\\\\x00t\\\\x04\\\\x00\\\\x00\\\\x00data(\\\\x00\\\\x00\\\\x00\\\\x00(\\\\x00\\\\x00\\\\x00\\\\x00s,\\\\x00\\\\x00\\\\x00lib/python2.7/site-packages/numpy/ma/core.pyRX\\\\x00\\\\x00\\\\x00\\\\xa0\\\\x02\\\\x00\\\\x00s\\\\x0e\\\\x00\\\\x00\\\\x00\\\\x00+\\\\x03\\\\x01\\\\r\\\\x01\\\\r\\\\x01\\\\x1f\\\\x01\\\\x06\\\\x01\\\\r\\\\x01c\\\\x04\\\\x00\\\\x00\\\\x00\\\\x05\\\\x00\\\\x00\\\\x00\\\\x08\\\\x00\\\\x00\\\\x00C`\\\\x01\\\\x00s\\\\x81\\\\x00\\\\x00\\\\x00t\\\\x00\\\\x00|\\\\x00\\\\x00d\\\\x01\\\\x00|\\\\x02\\\\x00d\\\\x02\\\\x00|\\\\x01\\\\x00d\\\\x03\\\\x00t\\\\x01\\\\x00\\\\x83\\\\x01\\\\x03}\\\\x00\\\\x00t\\\\x02\\\\x00j\\\\x03\\\\x00t\\\\x02\\\\x00j\\\\x04\\\\x00|\\\\x00\\\\x00j\\\\x05\\\\x00\\\\x83\\\\x01\\\\x00\\\\x83\\\\x01\\\\x00}\\\\x04\\\\x00|\\\\x04\\\\x00j\\\\x06\\\\x00\\\\x83\\\\x00\\\\x00sI\\\\x00|\\\\x00\\\\x00S|\\\\x00\\\\x00\\\\x04j\\\\x07\\\\x00|\\\\x04\\\\x00O\\\\x02_\\\\x07\\\\x00|\\\\x03\\\\x00d\\\\x04\\\\x00k\\\\x08\\\\x00rp\\\\x00|\\\\x00\\\\x00j\\\\t\\\\x00}\\\\x03\\\\x00n\\\\x00\\\\x00|\\\\x03\\\\x00|\\\\x00\\\\x00j\\\\x05\\\\x00|\\\\x04\\\\x00<|\\\\x00\\\\x00S(\\\\x05\\\\x00\\\\x00\\\\x00s\\\\x84\\\\x05\\\\x00\\\\x00\\\\n    Return input with invalid data masked and replaced by a fill value.\\\\n\\\\n    Invalid data means values of `nan`, `inf`, etc.\\\\n\\\\n    Parameters\\\\n    ----------\\\\n    a : array_like\\\\n        Input array, a (subclass of) ndarray.\\\\n    mask : sequence, optional\\\\n        Mask. Must be convertible to an array of booleans with the same\\\\n        shape as `data`. True indicates a masked (i.e. invalid) data.\\\\n    copy : bool, optional\\\\n        Whether to use a copy of `a` (True) or to fix `a` in place (False).\\\\n        Default is True.\\\\n    fill_value : scalar, optional\\\\n        Value used for fixing invalid data. Default is None, in which case\\\\n        the ``a.fill_value`` is used.\\\\n\\\\n    Returns\\\\n    -------\\\\n    b : MaskedArray\\\\n        The input array with invalid entries fixed.\\\\n\\\\n    Notes\\\\n    -----\\\\n    A copy is performed by default.\\\\n\\\\n    Examples\\\\n    --------\\\\n    >>> x = np.ma.array([1., -1, np.nan, np.inf], mask=[1] + [0]*3)\\\\n    >>> x\\\\n    masked_array(data = [-- -1.0 nan inf],\\\\n                 mask = [ True False False False],\\\\n           fill_value = 1e+20)\\\\n    >>> np.ma.fix_invalid(x)\\\\n    masked_array(data = [-- -1.0 -- --],\\\\n                 mask = [ True False  True  True],\\\\n           fill_value = 1e+20)\\\\n\\\\n    >>> fixed = np.ma.fix_invalid(x)\\\\n    >>> fixed.data\\\\n    array([  1.00000000e+00,  -1.00000000e+00,   1.00000000e+20,\\\\n             1.00000000e+20])\\\\n    >>> x.data\\\\n    array([  1.,  -1.,  NaN,  Inf])\\\\n\\\\n    R<\\\\x00\\\\x00\\\\x00t\\\\x04\\\\x00\\\\x00\\\\x00maskR.\\\\x01\\\\x00\\\\x00N(\\\\n\\\\x00\\\\x00\\\\x00Rz\\\\x00\\\\x00\\\\x00t\\\\x04\\\\x00\\\\x00\\\\x00TrueR\\\\xee\\\\x00\\\\x00\\\\x00Rr\\\\x00\\\\x00\\\\x00t\\\\x08\\\\x00\\\\x00\\\\x00isfiniteR/\\\\x01\\\\x00\\\\x00R!\\\\x00\\\\x00\\\\x00t\\\\x05\\\\x00\\\\x00\\\\x00_maskR\\\\xc4\\\\x00\\\\x00\\\\x00R\\\\x1b\\\\x01\\\\x00\\\\x00(\\\\x05\\\\x00\\\\x00\\\\x00R\\\\x1f\\\\x01\\\\x00\\\\x00R3\\\\x01\\\\x00\\\\x00R<\\\\x00\\\\x00\\\\x00R\\\\x1b\\\\x01\\\\x00\\\\x00t\\\\x07\\\\x00\\\\x00\\\\x00invalid(\\\\x00\\\\x00\\\\x00\\\\x00(\\\\x00\\\\x00\\\\x00\\\\x00s,\\\\x00\\\\x00\\\\x00lib/python2.7/site-packages/numpy/ma/core.pyRO\\\\x00\\\\x00\\\\x00\\\\xd7\\\\x02\\\\x00\\\\x00s\\\\x12\\\\x00\\\\x00\\\\x00\\\\x001\\\\x1e\\\\x01\\\\x1b\\\\x01\\\\x0c\\\\x01\\\\x04\\\\x01\\\\x0f\\\\x01\\\\x0c\\\\x01\\\\x0c\\\\x01\\\\r\\\\x01t\\\\x14\\\\x00\\\\x00\\\\x00_DomainCheckIntervalc\\\\x00\\\\x00\\\\x00\\\\x00\\\\x00\\\\x00\\\\x00\\\\x00\\\\x01\\\\x00\\\\x00\\\\x00B`\\\\x01\\\\x00s \\\\x00\\\\x00\\\\x00e\\\\x00\\\\x00Z\\\\x01\\\\x00d\\\\x00\\\\x00Z\\\\x02\\\\x00d\\\\x01\\\\x00\\\\x84\\\\x00\\\\x00Z\\\\x03\\\\x00d\\\\x02\\\\x00\\\\x84\\\\x00\\\\x00Z\\\\x04\\\\x00RS(\\\\x03\\\\x00\\\\x00\\\\x00s~\\\\x00\\\\x00\\\\x00\\\\n    Define a valid interval, so that :\\\\n\\\\n    ``domain_check_interval(a,b)(x) == True`` where\\\\n    ``x < a`` or ``x > b``.\\\\n\\\\n    c\\\\x03\\\\x00\\\\x00\\\\x00\\\\x03\\\\x00\\\\x00\\\\x00\\\\x02\\\\x00\\\\x00\\\\x00C`\\\\x01\\\\x00s2\\\\x00\\\\x00\\\\x00|\\\\x01\\\\x00|\\\\x02\\\\x00k\\\\x04\\\\x00r\\\\x1c\\\\x00|\\\\x02\\\\x00|\\\\x01\\\\x00\\\\x02}\\\\x01\\\\x00}\\\\x02\\\\x00n\\\\x00\\\\x00|\\\\x01\\\\x00|\\\\x00\\\\x00_\\\\x00\\\\x00|\\\\x02\\\\x00|\\\\x00\\\\x00_\\\\x01\\\\x00d\\\\x01\\\\x00S(\\\\x02\\\\x00\\\\x00\\\\x00s9\\\\x00\\\\x00\\\\x00domain_check_interval(a,b)(x) = true where x < a or y > bN(\\\\x02\\\\x00\\\\x00\\\\x00R\\\\x1f\\\\x01\\\\x00\\\\x00R\\\\xcf\\\\x00\\\\x00\\\\x00(\\\\x03\\\\x00\\\\x00\\\\x00t\\\\x04\\\\x00\\\\x00\\\\x00selfR\\\\x1f\\\\x01\\\\x00\\\\x00R\\\\xcf\\\\x00\\\\x00\\\\x00(\\\\x00\\\\x00\\\\x00\\\\x00(\\\\x00\\\\x00\\\\x00\\\\x00s,\\\\x00\\\\x00\\\\x00lib/python2.7/site-packages/numpy/ma/core.pyt\\\\x08\\\\x00\\\\x00\\\\x00__init__%\\\\x03\\\\x00\\\\x00s\\\\x08\\\\x00\\\\x00\\\\x00\\\\x00\\\\x02\\\\x0c\\\\x01\\\\x10\\\\x01\\\\t\\\\x01c\\\\x02\\\\x00\\\\x00\\\\x00\\\\x02\\\\x00\\\\x00\\\\x00\\\\x05\\\\x00\\\\x00\\\\x00C`\\\\x01\\\\x00s.\\\\x00\\\\x00\\\\x00t\\\\x00\\\\x00j\\\\x01\\\\x00t\\\\x00\\\\x00j\\\\x02\\\\x00|\\\\x01\\\\x00|\\\\x00\\\\x00j\\\\x03\\\\x00\\\\x83\\\\x02\\\\x00t\\\\x00\\\\x00j\\\\x04\\\\x00|\\\\x01\\\\x00|\\\\x00\\\\x00j\\\\x05\\\\x00\\\\x83\\\\x02\\\\x00\\\\x83\\\\x02\\\\x00S(\\\\x01\\\\x00\\\\x00\\\\x00s\\\\x1a\\\\x00\\\\x00\\\\x00Execute the call behavior.(\\\\x06\\\\x00\\\\x00\\\\x00t\\\\x05\\\\x00\\\\x00\\\\x00umathRs\\\\x00\\\\x00\\\\x00R[\\\\x00\\\\x00\\\\x00R\\\\xcf\\\\x00\\\\x00\\\\x00Rj\\\\x00\\\\x00\\\\x00R\\\\x1f\\\\x01\\\\x00\\\\x00(\\\\x02\\\\x00\\\\x00\\\\x00R9\\\\x01\\\\x00\\\\x00t\\\\x01\\\\x00\\\\x00\\\\x00x(\\\\x00\\\\x00\\\\x00\\\\x00(\\\\x00\\\\x00\\\\x00\\\\x00s,\\\\x00\\\\x00\\\\x00lib/python2.7/site-packages/numpy/ma/core.pyt\\\\x08\\\\x00\\\\x00\\\\x00__call__,\\\\x03\\\\x00\\\\x00s\\\\x04\\\\x00\\\\x00\\\\x00\\\\x00\\\\x02\\\\x18\\\\x01(\\\\x05\\\\x00\\\\x00\\\\x00R\\\\xc2\\\\x00\\\\x00\\\\x00R\\\\xc3\\\\x00\\\\x00\\\\x00R\\\\xce\\\\x00\\\\x00\\\\x00R:\\\\x01\\\\x00\\\\x00R=\\\\x01\\\\x00\\\\x00(\\\\x00\\\\x00\\\\x00\\\\x00(\\\\x00\\\\x00\\\\x00\\\\x00(\\\\x00\\\\x00\\\\x00\\\\x00s,\\\\x00\\\\x00\\\\x00lib/python2.7/site-packages/numpy/ma/core.pyR8\\\\x01\\\\x00\\\\x00\\\\x1c\\\\x03\\\\x00\\\\x00s\\\\x06\\\\x00\\\\x00\\\\x00\\\\x06\\\\x07\\\\x06\\\\x02\\\\t\\\\x07t\\\\n\\\\x00\\\\x00\\\\x00_DomainTanc\\\\x00\\\\x00\\\\x00\\\\x00\\\\x00\\\\x00\\\\x00\\\\x00\\\\x01\\\\x00\\\\x00\\\\x00B`\\\\x01\\\\x00s \\\\x00\\\\x00\\\\x00e\\\\x00\\\\x00Z\\\\x01\\\\x00d\\\\x00\\\\x00Z\\\\x02\\\\x00d\\\\x01\\\\x00\\\\x84\\\\x00\\\\x00Z\\\\x03\\\\x00d\\\\x02\\\\x00\\\\x84\\\\x00\\\\x00Z\\\\x04\\\\x00RS(\\\\x03\\\\x00\\\\x00\\\\x00s\\\\x7f\\\\x00\\\\x00\\\\x00\\\\n    Define a valid interval for the `tan` function, so that:\\\\n\\\\n    ``domain_tan(eps) = True`` where ``abs(cos(x)) < eps``\\\\n\\\\n    c\\\\x02\\\\x00\\\\x00\\\\x00\\\\x02\\\\x00\\\\x00\\\\x00\\\\x02\\\\x00\\\\x00\\\\x00C`\\\\x01\\\\x00s\\\\r\\\\x00\\\\x00\\\\x00|\\\\x01\\\\x00|\\\\x00\\\\x00_\\\\x00\\\\x00d\\\\x01\\\\x00S(\\\\x02\\\\x00\\\\x00\\\\x00s/\\\\x00\\\\x00\\\\x00domain_tan(eps) = true where abs(cos(x)) < eps)N(\\\\x01\\\\x00\\\\x00\\\\x00t\\\\x03\\\\x00\\\\x00\\\\x00eps(\\\\x02\\\\x00\\\\x00\\\\x00R9\\\\x01\\\\x00\\\\x00R?\\\\x01\\\\x00\\\\x00(\\\\x00\\\\x00\\\\x00\\\\x00(\\\\x00\\\\x00\\\\x00\\\\x00s,\\\\x00\\\\x00\\\\x00lib/python2.7/site-packages/numpy/ma/core.pyR:\\\\x01\\\\x00\\\\x00:\\\\x03\\\\x00\\\\x00s\\\\x02\\\\x00\\\\x00\\\\x00\\\\x00\\\\x02c\\\\x02\\\\x00\\\\x00\\\\x00\\\\x02\\\\x00\\\\x00\\\\x00\\\\x04\\\\x00\\\\x00\\\\x00C`\\\\x01\\\\x00s%\\\\x00\\\\x00\\\\x00t\\\\x00\\\\x00j\\\\x01\\\\x00t\\\\x00\\\\x00j\\\\x02\\\\x00t\\\\x00\\\\x00j\\\\x03\\\\x00|\\\\x01\\\\x00\\\\x83\\\\x01\\\\x00\\\\x83\\\\x01\\\\x00|\\\\x00\\\\x00j\\\\x04\\\\x00\\\\x83\\\\x02\\\\x00S(\\\\x01\\\\x00\\\\x00\\\\x00s\\\\x1b\\\\x00\\\\x00\\\\x00Executes the call behavior.(\\\\x05\\\\x00\\\\x00\\\\x00R;\\\\x01\\\\x00\\\\x00Rj\\\\x00\\\\x00\\\\x00R\\\\x19\\\\x00\\\\x00\\\\x00R=\\\\x00\\\\x00\\\\x00R?\\\\x01\\\\x00\\\\x00(\\\\x02\\\\x00\\\\x00\\\\x00R9\\\\x01\\\\x00\\\\x00R<\\\\x01\\\\x00\\\\x00(\\\\x00\\\\x00\\\\x00\\\\x00(\\\\x00\\\\x00\\\\x00\\\\x00s,\\\\x00\\\\x00\\\\x00lib/python2.7/site-packages/numpy/ma/core.pyR=\\\\x01\\\\x00\\\\x00>\\\\x03\\\\x00\\\\x00s\\\\x02\\\\x00\\\\x00\\\\x00\\\\x00\\\\x02(\\\\x05\\\\x00\\\\x00\\\\x00R\\\\xc2\\\\x00\\\\x00\\\\x00R\\\\xc3\\\\x00\\\\x00\\\\x00R\\\\xce\\\\x00\\\\x00\\\\x00R:\\\\x01\\\\x00\\\\x00R=\\\\x01\\\\x00\\\\x00(\\\\x00\\\\x00\\\\x00\\\\x00(\\\\x00\\\\x00\\\\x00\\\\x00(\\\\x00\\\\x00\\\\x00\\\\x00s,\\\\x00\\\\x00\\\\x00lib/python2.7/site-packages/numpy/ma/core.pyR>\\\\x01\\\\x00\\\\x002\\\\x03\\\\x00\\\\x00s\\\\x06\\\\x00\\\\x00\\\\x00\\\\x06\\\\x06\\\\x06\\\\x02\\\\t\\\\x04t\\\\x11\\\\x00\\\\x00\\\\x00_DomainSafeDividec\\\\x00\\\\x00\\\\x00\\\\x00\\\\x00\\\\x00\\\\x00\\\\x00\\\\x02\\\\x00\\\\x00\\\\x00B`\\\\x01\\\\x00s#\\\\x00\\\\x00\\\\x00e\\\\x00\\\\x00Z\\\\x01\\\\x00d\\\\x00\\\\x00Z\\\\x02\\\\x00d\\\\x03\\\\x00d\\\\x01\\\\x00\\\\x84\\\\x01\\\\x00Z\\\\x04\\\\x00d\\\\x02\\\\x00\\\\x84\\\\x00\\\\x00Z\\\\x05\\\\x00RS(\\\\x04\\\\x00\\\\x00\\\\x00s-\\\\x00\\\\x00\\\\x00\\\\n    Define a domain for safe division.\\\\n\\\\n    c\\\\x02\\\\x00\\\\x00\\\\x00\\\\x02\\\\x00\\\\x00\\\\x00\\\\x02\\\\x00\\\\x00\\\\x00C`\\\\x01\\\\x00s\\\\r\\\\x00\\\\x00\\\\x00|\\\\x01\\\\x00|\\\\x00\\\\x00_\\\\x00\\\\x00d\\\\x00\\\\x00S(\\\\x01\\\\x00\\\\x00\\\\x00N(\\\\x01\\\\x00\\\\x00\\\\x00t\\\\t\\\\x00\\\\x00\\\\x00tolerance(\\\\x02\\\\x00\\\\x00\\\\x00R9\\\\x01\\\\x00\\\\x00RA\\\\x01\\\\x00\\\\x00(\\\\x00\\\\x00\\\\x00\\\\x00(\\\\x00\\\\x00\\\\x00\\\\x00s,\\\\x00\\\\x00\\\\x00lib/python2.7/site-packages/numpy/ma/core.pyR:\\\\x01\\\\x00\\\\x00I\\\\x03\\\\x00\\\\x00s\\\\x02\\\\x00\\\\x00\\\\x00\\\\x00\\\\x01c\\\\x03\\\\x00\\\\x00\\\\x00\\\\x03\\\\x00\\\\x00\\\\x00\\\\x03\\\\x00\\\\x00\\\\x00C`\\\\x01\\\\x00si\\\\x00\\\\x00\\\\x00|\\\\x00\\\\x00j\\\\x00\\\\x00d\\\\x00\\\\x00k\\\\x08\\\\x00r\\\\\\\'\\\\x00t\\\\x02\\\\x00j\\\\x03\\\\x00t\\\\x04\\\\x00\\\\x83\\\\x01\\\\x00j\\\\x05\\\\x00|\\\\x00\\\\x00_\\\\x00\\\\x00n\\\\x00\\\\x00t\\\\x02\\\\x00j\\\\x06\\\\x00|\\\\x01\\\\x00\\\\x83\\\\x01\\\\x00t\\\\x02\\\\x00j\\\\x06\\\\x00|\\\\x02\\\\x00\\\\x83\\\\x01\\\\x00\\\\x02}\\\\x01\\\\x00}\\\\x02\\\\x00t\\\\x07\\\\x00j\\\\x08\\\\x00|\\\\x01\\\\x00\\\\x83\\\\x01\\\\x00|\\\\x00\\\\x00j\\\\x00\\\\x00\\\\x14t\\\\x07\\\\x00j\\\\x08\\\\x00|\\\\x02\\\\x00\\\\x83\\\\x01\\\\x00k\\\\x05\\\\x00S(\\\\x01\\\\x00\\\\x00\\\\x00N(\\\\t\\\\x00\\\\x00\\\\x00RA\\\\x01\\\\x00\\\\x00R\\\\xc4\\\\x00\\\\x00\\\\x00R\\\\xee\\\\x00\\\\x00\\\\x00t\\\\x05\\\\x00\\\\x00\\\\x00finfoR\\\\xf4\\\\x00\\\\x00\\\\x00t\\\\x04\\\\x00\\\\x00\\\\x00tinyR0\\\\x00\\\\x00\\\\x00R;\\\\x01\\\\x00\\\\x00R\\\\x19\\\\x00\\\\x00\\\\x00(\\\\x03\\\\x00\\\\x00\\\\x00R9\\\\x01\\\\x00\\\\x00R\\\\x1f\\\\x01\\\\x00\\\\x00R\\\\xcf\\\\x00\\\\x00\\\\x00(\\\\x00\\\\x00\\\\x00\\\\x00(\\\\x00\\\\x00\\\\x00\\\\x00s,\\\\x00\\\\x00\\\\x00lib/python2.7/site-packages/numpy/ma/core.pyR=\\\\x01\\\\x00\\\\x00L\\\\x03\\\\x00\\\\x00s\\\\x08\\\\x00\\\\x00\\\\x00\\\\x00\\\\x04\\\\x0f\\\\x01\\\\x18\\\\x02\\\\x1f\\\\x01N(\\\\x06\\\\x00\\\\x00\\\\x00R\\\\xc2\\\\x00\\\\x00\\\\x00R\\\\xc3\\\\x00\\\\x00\\\\x00R\\\\xce\\\\x00\\\\x00\\\\x00R\\\\xc4\\\\x00\\\\x00\\\\x00R:\\\\x01\\\\x00\\\\x00R=\\\\x01\\\\x00\\\\x00(\\\\x00\\\\x00\\\\x00\\\\x00(\\\\x00\\\\x00\\\\x00\\\\x00(\\\\x00\\\\x00\\\\x00\\\\x00s,\\\\x00\\\\x00\\\\x00lib/python2.7/site-packages/numpy/ma/core.pyR@\\\\x01\\\\x00\\\\x00C\\\\x03\\\\x00\\\\x00s\\\\x06\\\\x00\\\\x00\\\\x00\\\\x06\\\\x04\\\\x06\\\\x02\\\\x0c\\\\x03t\\\\x0e\\\\x00\\\\x00\\\\x00_DomainGreaterc\\\\x00\\\\x00\\\\x00\\\\x00\\\\x00\\\\x00\\\\x00\\\\x00\\\\x01\\\\x00\\\\x00\\\\x00B`\\\\x01\\\\x00s \\\\x00\\\\x00\\\\x00e\\\\x00\\\\x00Z\\\\x01\\\\x00d\\\\x00\\\\x00Z\\\\x02\\\\x00d\\\\x01\\\\x00\\\\x84\\\\x00\\\\x00Z\\\\x03\\\\x00d\\\\x02\\\\x00\\\\x84\\\\x00\\\\x00Z\\\\x04\\\\x00RS(\\\\x03\\\\x00\\\\x00\\\\x00s4\\\\x00\\\\x00\\\\x00\\\\n    DomainGreater(v)(x) is True where x <= v.\\\\n\\\\n    c\\\\x02\\\\x00\\\\x00\\\\x00\\\\x02\\\\x00\\\\x00\\\\x00\\\\x02\\\\x00\\\\x00\\\\x00C`\\\\x01\\\\x00s\\\\r\\\\x00\\\\x00\\\\x00|\\\\x01\\\\x00|\\\\x00\\\\x00_\\\\x00\\\\x00d\\\\x01\\\\x00S(\\\\x02\\\\x00\\\\x00\\\\x00s\\\\\\\'\\\\x00\\\\x00\\\\x00DomainGreater(v)(x) = true where x <= vN(\\\\x01\\\\x00\\\\x00\\\\x00t\\\\x0e\\\\x00\\\\x00\\\\x00critical_value(\\\\x02\\\\x00\\\\x00\\\\x00R9\\\\x01\\\\x00\\\\x00RE\\\\x01\\\\x00\\\\x00(\\\\x00\\\\x00\\\\x00\\\\x00(\\\\x00\\\\x00\\\\x00\\\\x00s,\\\\x00\\\\x00\\\\x00lib/python2.7/site-packages/numpy/ma/core.pyR:\\\\x01\\\\x00\\\\x00]\\\\x03\\\\x00\\\\x00s\\\\x02\\\\x00\\\\x00\\\\x00\\\\x00\\\\x02c\\\\x02\\\\x00\\\\x00\\\\x00\\\\x02\\\\x00\\\\x00\\\\x00\\\\x03\\\\x00\\\\x00\\\\x00C`\\\\x01\\\\x00s\\\\x13\\\\x00\\\\x00\\\\x00t\\\\x00\\\\x00j\\\\x01\\\\x00|\\\\x01\\\\x00|\\\\x00\\\\x00j\\\\x02\\\\x00\\\\x83\\\\x02\\\\x00S(\\\\x01\\\\x00\\\\x00\\\\x00s\\\\x1b\\\\x00\\\\x00\\\\x00Executes the call behavior.(\\\\x03\\\\x00\\\\x00\\\\x00R;\\\\x01\\\\x00\\\\x00Rk\\\\x00\\\\x00\\\\x00RE\\\\x01\\\\x00\\\\x00(\\\\x02\\\\x00\\\\x00\\\\x00R9\\\\x01\\\\x00\\\\x00R<\\\\x01\\\\x00\\\\x00(\\\\x00\\\\x00\\\\x00\\\\x00(\\\\x00\\\\x00\\\\x00\\\\x00s,\\\\x00\\\\x00\\\\x00lib/python2.7/site-packages/numpy/ma/core.pyR=\\\\x01\\\\x00\\\\x00a\\\\x03\\\\x00\\\\x00s\\\\x02\\\\x00\\\\x00\\\\x00\\\\x00\\\\x02(\\\\x05\\\\x00\\\\x00\\\\x00R\\\\xc2\\\\x00\\\\x00\\\\x00R\\\\xc3\\\\x00\\\\x00\\\\x00R\\\\xce\\\\x00\\\\x00\\\\x00R:\\\\x01\\\\x00\\\\x00R=\\\\x01\\\\x00\\\\x00(\\\\x00\\\\x00\\\\x00\\\\x00(\\\\x00\\\\x00\\\\x00\\\\x00(\\\\x00\\\\x00\\\\x00\\\\x00s,\\\\x00\\\\x00\\\\x00lib/python2.7/site-packages/numpy/ma/core.pyRD\\\\x01\\\\x00\\\\x00W\\\\x03\\\\x00\\\\x00s\\\\x06\\\\x00\\\\x00\\\\x00\\\\x06\\\\x04\\\\x06\\\\x02\\\\t\\\\x04t\\\\x13\\\\x00\\\\x00\\\\x00_DomainGreaterEqualc\\\\x00\\\\x00\\\\x00\\\\x00\\\\x00\\\\x00\\\\x00\\\\x00\\\\x01\\\\x00\\\\x00\\\\x00B`\\\\x01\\\\x00s \\\\x00\\\\x00\\\\x00e\\\\x00\\\\x00Z\\\\x01\\\\x00d\\\\x00\\\\x00Z\\\\x02\\\\x00d\\\\x01\\\\x00\\\\x84\\\\x00\\\\x00Z\\\\x03\\\\x00d\\\\x02\\\\x00\\\\x84\\\\x00\\\\x00Z\\\\x04\\\\x00RS(\\\\x03\\\\x00\\\\x00\\\\x00s8\\\\x00\\\\x00\\\\x00\\\\n    DomainGreaterEqual(v)(x) is True where x < v.\\\\n\\\\n    c\\\\x02\\\\x00\\\\x00\\\\x00\\\\x02\\\\x00\\\\x00\\\\x00\\\\x02\\\\x00\\\\x00\\\\x00C`\\\\x01\\\\x00s\\\\r\\\\x00\\\\x00\\\\x00|\\\\x01\\\\x00|\\\\x00\\\\x00_\\\\x00\\\\x00d\\\\x01\\\\x00S(\\\\x02\\\\x00\\\\x00\\\\x00s+\\\\x00\\\\x00\\\\x00DomainGreaterEqual(v)(x) = true where x < vN(\\\\x01\\\\x00\\\\x00\\\\x00RE\\\\x01\\\\x00\\\\x00(\\\\x02\\\\x00\\\\x00\\\\x00R9\\\\x01\\\\x00\\\\x00RE\\\\x01\\\\x00\\\\x00(\\\\x00\\\\x00\\\\x00\\\\x00(\\\\x00\\\\x00\\\\x00\\\\x00s,\\\\x00\\\\x00\\\\x00lib/python2.7/site-packages/numpy/ma/core.pyR:\\\\x01\\\\x00\\\\x00l\\\\x03\\\\x00\\\\x00s\\\\x02\\\\x00\\\\x00\\\\x00\\\\x00\\\\x02c\\\\x02\\\\x00\\\\x00\\\\x00\\\\x02\\\\x00\\\\x00\\\\x00\\\\x03\\\\x00\\\\x00\\\\x00C`\\\\x01\\\\x00s\\\\x13\\\\x00\\\\x00\\\\x00t\\\\x00\\\\x00j\\\\x01\\\\x00|\\\\x01\\\\x00|\\\\x00\\\\x00j\\\\x02\\\\x00\\\\x83\\\\x02\\\\x00S(\\\\x01\\\\x00\\\\x00\\\\x00s\\\\x1b\\\\x00\\\\x00\\\\x00Executes the call behavior.(\\\\x03\\\\x00\\\\x00\\\\x00R;\\\\x01\\\\x00\\\\x00Rj\\\\x00\\\\x00\\\\x00RE\\\\x01\\\\x00\\\\x00(\\\\x02\\\\x00\\\\x00\\\\x00R9\\\\x01\\\\x00\\\\x00R<\\\\x01\\\\x00\\\\x00(\\\\x00\\\\x00\\\\x00\\\\x00(\\\\x00\\\\x00\\\\x00\\\\x00s,\\\\x00\\\\x00\\\\x00lib/python2.7/site-packages/numpy/ma/core.pyR=\\\\x01\\\\x00\\\\x00p\\\\x03\\\\x00\\\\x00s\\\\x02\\\\x00\\\\x00\\\\x00\\\\x00\\\\x02(\\\\x05\\\\x00\\\\x00\\\\x00R\\\\xc2\\\\x00\\\\x00\\\\x00R\\\\xc3\\\\x00\\\\x00\\\\x00R\\\\xce\\\\x00\\\\x00\\\\x00R:\\\\x01\\\\x00\\\\x00R=\\\\x01\\\\x00\\\\x00(\\\\x00\\\\x00\\\\x00\\\\x00(\\\\x00\\\\x00\\\\x00\\\\x00(\\\\x00\\\\x00\\\\x00\\\\x00s,\\\\x00\\\\x00\\\\x00lib/python2.7/site-packages/numpy/ma/core.pyRF\\\\x01\\\\x00\\\\x00f\\\\x03\\\\x00\\\\x00s\\\\x06\\\\x00\\\\x00\\\\x00\\\\x06\\\\x04\\\\x06\\\\x02\\\\t\\\\x04t\\\\x15\\\\x00\\\\x00\\\\x00_MaskedUnaryOperationc\\\\x00\\\\x00\\\\x00\\\\x00\\\\x00\\\\x00\\\\x00\\\\x00\\\\x03\\\\x00\\\\x00\\\\x00B`\\\\x01\\\\x00s/\\\\x00\\\\x00\\\\x00e\\\\x00\\\\x00Z\\\\x01\\\\x00d\\\\x00\\\\x00Z\\\\x02\\\\x00d\\\\x01\\\\x00d\\\\x05\\\\x00d\\\\x02\\\\x00\\\\x84\\\\x02\\\\x00Z\\\\x04\\\\x00d\\\\x03\\\\x00\\\\x84\\\\x00\\\\x00Z\\\\x05\\\\x00d\\\\x04\\\\x00\\\\x84\\\\x00\\\\x00Z\\\\x06\\\\x00RS(\\\\x06\\\\x00\\\\x00\\\\x00s\\\\xc8\\\\x01\\\\x00\\\\x00\\\\n    Defines masked version of unary operations, where invalid values are\\\\n    pre-masked.\\\\n\\\\n    Parameters\\\\n    ----------\\\\n    mufunc : callable\\\\n        The function for which to define a masked version. Made available\\\\n        as ``_MaskedUnaryOperation.f``.\\\\n    fill : scalar, optional\\\\n        Filling value, default is 0.\\\\n    domain : class instance\\\\n        Domain for the function. Should be one of the ``_Domain*``\\\\n        classes. Default is None.\\\\n\\\\n    i\\\\x00\\\\x00\\\\x00\\\\x00c\\\\x04\\\\x00\\\\x00\\\\x00\\\\x04\\\\x00\\\\x00\\\\x00\\\\x05\\\\x00\\\\x00\\\\x00C`\\\\x01\\\\x00si\\\\x00\\\\x00\\\\x00|\\\\x01\\\\x00|\\\\x00\\\\x00_\\\\x00\\\\x00|\\\\x02\\\\x00|\\\\x00\\\\x00_\\\\x01\\\\x00|\\\\x03\\\\x00|\\\\x00\\\\x00_\\\\x02\\\\x00t\\\\x03\\\\x00|\\\\x01\\\\x00d\\\\x01\\\\x00t\\\\x04\\\\x00|\\\\x01\\\\x00\\\\x83\\\\x01\\\\x00\\\\x83\\\\x03\\\\x00|\\\\x00\\\\x00_\\\\x05\\\\x00t\\\\x03\\\\x00|\\\\x01\\\\x00d\\\\x02\\\\x00t\\\\x04\\\\x00|\\\\x01\\\\x00\\\\x83\\\\x01\\\\x00\\\\x83\\\\x03\\\\x00|\\\\x00\\\\x00_\\\\x06\\\\x00|\\\\x03\\\\x00t\\\\x07\\\\x00|\\\\x01\\\\x00<|\\\\x02\\\\x00t\\\\x08\\\\x00|\\\\x01\\\\x00<d\\\\x00\\\\x00S(\\\\x03\\\\x00\\\\x00\\\\x00NR\\\\xce\\\\x00\\\\x00\\\\x00R\\\\xc2\\\\x00\\\\x00\\\\x00(\\\\t\\\\x00\\\\x00\\\\x00R\\\\xd1\\\\x00\\\\x00\\\\x00t\\\\x04\\\\x00\\\\x00\\\\x00fillt\\\\x06\\\\x00\\\\x00\\\\x00domaint\\\\x07\\\\x00\\\\x00\\\\x00getattrR\\\\xf3\\\\x00\\\\x00\\\\x00R\\\\xce\\\\x00\\\\x00\\\\x00R\\\\xc2\\\\x00\\\\x00\\\\x00t\\\\x0c\\\\x00\\\\x00\\\\x00ufunc_domaint\\\\x0b\\\\x00\\\\x00\\\\x00ufunc_fills(\\\\x04\\\\x00\\\\x00\\\\x00R9\\\\x01\\\\x00\\\\x00t\\\\x06\\\\x00\\\\x00\\\\x00mufuncRH\\\\x01\\\\x00\\\\x00RI\\\\x01\\\\x00\\\\x00(\\\\x00\\\\x00\\\\x00\\\\x00(\\\\x00\\\\x00\\\\x00\\\\x00s,\\\\x00\\\\x00\\\\x00lib/python2.7/site-packages/numpy/ma/core.pyR:\\\\x01\\\\x00\\\\x00\\\\x87\\\\x03\\\\x00\\\\x00s\\\\x0e\\\\x00\\\\x00\\\\x00\\\\x00\\\\x01\\\\t\\\\x01\\\\t\\\\x01\\\\t\\\\x01\\\\x1b\\\\x01\\\\x1b\\\\x01\\\\n\\\\x01c\\\\x02\\\\x00\\\\x00\\\\x00\\\\x08\\\\x00\\\\x00\\\\x00\\\\x08\\\\x00\\\\x00\\\\x00O`\\\\x01\\\\x00s)\\\\x01\\\\x00\\\\x00t\\\\x00\\\\x00|\\\\x01\\\\x00\\\\x83\\\\x01\\\\x00}\\\\x04\\\\x00|\\\\x00\\\\x00j\\\\x01\\\\x00d\\\\x04\\\\x00k\\\\t\\\\x00r\\\\x85\\\\x00t\\\\x03\\\\x00j\\\\x04\\\\x00d\\\\x01\\\\x00d\\\\x02\\\\x00d\\\\x03\\\\x00d\\\\x02\\\\x00\\\\x83\\\\x00\\\\x02\\\\x8f\\\\x1a\\\\x00\\\\x01|\\\\x00\\\\x00j\\\\x05\\\\x00|\\\\x04\\\\x00|\\\\x02\\\\x00|\\\\x03\\\\x00\\\\x8e\\\\x01\\\\x00}\\\\x05\\\\x00Wd\\\\x04\\\\x00QXt\\\\x06\\\\x00j\\\\x07\\\\x00|\\\\x05\\\\x00\\\\x83\\\\x01\\\\x00\\\\x0f}\\\\x06\\\\x00|\\\\x06\\\\x00|\\\\x00\\\\x00j\\\\x01\\\\x00|\\\\x04\\\\x00\\\\x83\\\\x01\\\\x00O}\\\\x06\\\\x00|\\\\x06\\\\x00t\\\\x08\\\\x00|\\\\x01\\\\x00\\\\x83\\\\x01\\\\x00O}\\\\x06\\\\x00n!\\\\x00|\\\\x00\\\\x00j\\\\x05\\\\x00|\\\\x04\\\\x00|\\\\x02\\\\x00|\\\\x03\\\\x00\\\\x8e\\\\x01\\\\x00}\\\\x05\\\\x00t\\\\x08\\\\x00|\\\\x01\\\\x00\\\\x83\\\\x01\\\\x00}\\\\x06\\\\x00|\\\\x05\\\\x00j\\\\t\\\\x00s\\\\xbd\\\\x00|\\\\x06\\\\x00r\\\\xb9\\\\x00t\\\\n\\\\x00S|\\\\x05\\\\x00S|\\\\x06\\\\x00t\\\\x0b\\\\x00k\\\\t\\\\x00r\\\\xfa\\\\x00y\\\\x1a\\\\x00t\\\\x03\\\\x00j\\\\x0c\\\\x00|\\\\x05\\\\x00|\\\\x04\\\\x00d\\\\x05\\\\x00|\\\\x06\\\\x00\\\\x83\\\\x02\\\\x01\\\\x01Wq\\\\xfa\\\\x00\\\\x04t\\\\r\\\\x00k\\\\n\\\\x00r\\\\xf6\\\\x00\\\\x01\\\\x01\\\\x01q\\\\xfa\\\\x00Xn\\\\x00\\\\x00|\\\\x05\\\\x00j\\\\x0e\\\\x00t\\\\x0f\\\\x00|\\\\x01\\\\x00\\\\x83\\\\x01\\\\x00\\\\x83\\\\x01\\\\x00}\\\\x07\\\\x00|\\\\x06\\\\x00|\\\\x07\\\\x00_\\\\x10\\\\x00|\\\\x07\\\\x00j\\\\x11\\\\x00|\\\\x01\\\\x00\\\\x83\\\\x01\\\\x00\\\\x01|\\\\x07\\\\x00S(\\\\x06\\\\x00\\\\x00\\\\x00s-\\\\x00\\\\x00\\\\x00\\\\n        Execute the call behavior.\\\\n\\\\n        RF\\\\x00\\\\x00\\\\x00t\\\\x06\\\\x00\\\\x00\\\\x00ignoreR7\\\\x01\\\\x00\\\\x00NR\\\\xbf\\\\x00\\\\x00\\\\x00(\\\\x12\\\\x00\\\\x00\\\\x00RX\\\\x00\\\\x00\\\\x00RI\\\\x01\\\\x00\\\\x00R\\\\xc4\\\\x00\\\\x00\\\\x00R\\\\xee\\\\x00\\\\x00\\\\x00t\\\\x08\\\\x00\\\\x00\\\\x00errstateR\\\\xd1\\\\x00\\\\x00\\\\x00R;\\\\x01\\\\x00\\\\x00R5\\\\x01\\\\x00\\\\x00RY\\\\x00\\\\x00\\\\x00R\\\\x93\\\\x00\\\\x00\\\\x00Ry\\\\x00\\\\x00\\\\x00R\\\\x95\\\\x00\\\\x00\\\\x00t\\\\x06\\\\x00\\\\x00\\\\x00copytoR\\\\xca\\\\x00\\\\x00\\\\x00R1\\\\x01\\\\x00\\\\x00R-\\\\x01\\\\x00\\\\x00R6\\\\x01\\\\x00\\\\x00t\\\\x0c\\\\x00\\\\x00\\\\x00_update_from(\\\\x08\\\\x00\\\\x00\\\\x00R9\\\\x01\\\\x00\\\\x00R\\\\x1f\\\\x01\\\\x00\\\\x00t\\\\x04\\\\x00\\\\x00\\\\x00argst\\\\x06\\\\x00\\\\x00\\\\x00kwargst\\\\x01\\\\x00\\\\x00\\\\x00dR \\\\x01\\\\x00\\\\x00R\\\\xde\\\\x00\\\\x00\\\\x00t\\\\r\\\\x00\\\\x00\\\\x00masked_result(\\\\x00\\\\x00\\\\x00\\\\x00(\\\\x00\\\\x00\\\\x00\\\\x00s,\\\\x00\\\\x00\\\\x00lib/python2.7/site-packages/numpy/ma/core.pyR=\\\\x01\\\\x00\\\\x00\\\\x90\\\\x03\\\\x00\\\\x00s,\\\\x00\\\\x00\\\\x00\\\\x00\\\\x05\\\\x0c\\\\x02\\\\x0f\\\\x02\\\\x19\\\\x01\\\\x1b\\\\x02\\\\x10\\\\x01\\\\x13\\\\x01\\\\x13\\\\x04\\\\x15\\\\x01\\\\x0c\\\\x02\\\\t\\\\x02\\\\x06\\\\x01\\\\x04\\\\x01\\\\x04\\\\x02\\\\x0c\\\\x08\\\\x03\\\\x01\\\\x1a\\\\x01\\\\r\\\\x01\\\\x07\\\\x02\\\\x15\\\\x01\\\\t\\\\x01\\\\r\\\\x01c\\\\x01\\\\x00\\\\x00\\\\x00\\\\x01\\\\x00\\\\x00\\\\x00\\\\x03\\\\x00\\\\x00\\\\x00C`\\\\x01\\\\x00s\\\\x11\\\\x00\\\\x00\\\\x00d\\\\x01\\\\x00t\\\\x00\\\\x00|\\\\x00\\\\x00j\\\\x01\\\\x00\\\\x83\\\\x01\\\\x00\\\\x16S(\\\\x02\\\\x00\\\\x00\\\\x00Ns1\\\\x00\\\\x00\\\\x00Masked version of %s. [Invalid values are masked](\\\\x02\\\\x00\\\\x00\\\\x00R\\\\xf3\\\\x00\\\\x00\\\\x00R\\\\xd1\\\\x00\\\\x00\\\\x00(\\\\x01\\\\x00\\\\x00\\\\x00R9\\\\x01\\\\x00\\\\x00(\\\\x00\\\\x00\\\\x00\\\\x00(\\\\x00\\\\x00\\\\x00\\\\x00s,\\\\x00\\\\x00\\\\x00lib/python2.7/site-packages/numpy/ma/core.pyt\\\\x07\\\\x00\\\\x00\\\\x00__str__\\\\xbd\\\\x03\\\\x00\\\\x00s\\\\x02\\\\x00\\\\x00\\\\x00\\\\x00\\\\x01N(\\\\x07\\\\x00\\\\x00\\\\x00R\\\\xc2\\\\x00\\\\x00\\\\x00R\\\\xc3\\\\x00\\\\x00\\\\x00R\\\\xce\\\\x00\\\\x00\\\\x00R\\\\xc4\\\\x00\\\\x00\\\\x00R:\\\\x01\\\\x00\\\\x00R=\\\\x01\\\\x00\\\\x00RV\\\\x01\\\\x00\\\\x00(\\\\x00\\\\x00\\\\x00\\\\x00(\\\\x00\\\\x00\\\\x00\\\\x00(\\\\x00\\\\x00\\\\x00\\\\x00s,\\\\x00\\\\x00\\\\x00lib/python2.7/site-packages/numpy/ma/core.pyRG\\\\x01\\\\x00\\\\x00u\\\\x03\\\\x00\\\\x00s\\\\x08\\\\x00\\\\x00\\\\x00\\\\x06\\\\x10\\\\x06\\\\x02\\\\x0f\\\\t\\\\t-t\\\\x16\\\\x00\\\\x00\\\\x00_MaskedBinaryOperationc\\\\x00\\\\x00\\\\x00\\\\x00\\\\x00\\\\x00\\\\x00\\\\x00\\\\x03\\\\x00\\\\x00\\\\x00B`\\\\x01\\\\x00sS\\\\x00\\\\x00\\\\x00e\\\\x00\\\\x00Z\\\\x01\\\\x00d\\\\x00\\\\x00Z\\\\x02\\\\x00d\\\\x01\\\\x00d\\\\x01\\\\x00d\\\\x02\\\\x00\\\\x84\\\\x02\\\\x00Z\\\\x03\\\\x00d\\\\x03\\\\x00\\\\x84\\\\x00\\\\x00Z\\\\x04\\\\x00d\\\\x01\\\\x00d\\\\x08\\\\x00d\\\\x04\\\\x00\\\\x84\\\\x02\\\\x00Z\\\\x06\\\\x00d\\\\x05\\\\x00\\\\x84\\\\x00\\\\x00Z\\\\x07\\\\x00d\\\\x01\\\\x00d\\\\x06\\\\x00\\\\x84\\\\x01\\\\x00Z\\\\x08\\\\x00d\\\\x07\\\\x00\\\\x84\\\\x00\\\\x00Z\\\\t\\\\x00RS(\\\\t\\\\x00\\\\x00\\\\x00sC\\\\x02\\\\x00\\\\x00\\\\n    Define masked version of binary operations, where invalid\\\\n    values are pre-masked.\\\\n\\\\n    Parameters\\\\n    ----------\\\\n    mbfunc : function\\\\n        The function for which to define a masked version. Made available\\\\n        as ``_MaskedBinaryOperation.f``.\\\\n    domain : class instance\\\\n        Default domain for the function. Should be one of the ``_Domain*``\\\\n        classes. Default is None.\\\\n    fillx : scalar, optional\\\\n        Filling value for the first argument, default is 0.\\\\n    filly : scalar, optional\\\\n        Filling value for the second argument, default is 0.\\\\n\\\\n    i\\\\x00\\\\x00\\\\x00\\\\x00c\\\\x04\\\\x00\\\\x00\\\\x00\\\\x04\\\\x00\\\\x00\\\\x00\\\\x05\\\\x00\\\\x00\\\\x00C`\\\\x01\\\\x00so\\\\x00\\\\x00\\\\x00|\\\\x01\\\\x00|\\\\x00\\\\x00_\\\\x00\\\\x00|\\\\x02\\\\x00|\\\\x00\\\\x00_\\\\x01\\\\x00|\\\\x03\\\\x00|\\\\x00\\\\x00_\\\\x02\\\\x00t\\\\x03\\\\x00|\\\\x01\\\\x00d\\\\x01\\\\x00t\\\\x04\\\\x00|\\\\x01\\\\x00\\\\x83\\\\x01\\\\x00\\\\x83\\\\x03\\\\x00|\\\\x00\\\\x00_\\\\x05\\\\x00t\\\\x03\\\\x00|\\\\x01\\\\x00d\\\\x02\\\\x00t\\\\x04\\\\x00|\\\\x01\\\\x00\\\\x83\\\\x01\\\\x00\\\\x83\\\\x03\\\\x00|\\\\x00\\\\x00_\\\\x06\\\\x00d\\\\x03\\\\x00t\\\\x08\\\\x00|\\\\x01\\\\x00<|\\\\x02\\\\x00|\\\\x03\\\\x00f\\\\x02\\\\x00t\\\\t\\\\x00|\\\\x01\\\\x00<d\\\\x03\\\\x00S(\\\\x04\\\\x00\\\\x00\\\\x00sr\\\\x00\\\\x00\\\\x00\\\\n        abfunc(fillx, filly) must be defined.\\\\n\\\\n        abfunc(x, filly) = x for all x to enable reduce.\\\\n\\\\n        R\\\\xce\\\\x00\\\\x00\\\\x00R\\\\xc2\\\\x00\\\\x00\\\\x00N(\\\\n\\\\x00\\\\x00\\\\x00R\\\\xd1\\\\x00\\\\x00\\\\x00t\\\\x05\\\\x00\\\\x00\\\\x00fillxt\\\\x05\\\\x00\\\\x00\\\\x00fillyRJ\\\\x01\\\\x00\\\\x00R\\\\xf3\\\\x00\\\\x00\\\\x00R\\\\xce\\\\x00\\\\x00\\\\x00R\\\\xc2\\\\x00\\\\x00\\\\x00R\\\\xc4\\\\x00\\\\x00\\\\x00RK\\\\x01\\\\x00\\\\x00RL\\\\x01\\\\x00\\\\x00(\\\\x04\\\\x00\\\\x00\\\\x00R9\\\\x01\\\\x00\\\\x00t\\\\x06\\\\x00\\\\x00\\\\x00mbfuncRX\\\\x01\\\\x00\\\\x00RY\\\\x01\\\\x00\\\\x00(\\\\x00\\\\x00\\\\x00\\\\x00(\\\\x00\\\\x00\\\\x00\\\\x00s,\\\\x00\\\\x00\\\\x00lib/python2.7/site-packages/numpy/ma/core.pyR:\\\\x01\\\\x00\\\\x00\\\\xd5\\\\x03\\\\x00\\\\x00s\\\\x0e\\\\x00\\\\x00\\\\x00\\\\x00\\\\x07\\\\t\\\\x01\\\\t\\\\x01\\\\t\\\\x01\\\\x1b\\\\x01\\\\x1b\\\\x01\\\\n\\\\x01c\\\\x03\\\\x00\\\\x00\\\\x00\\\\r\\\\x00\\\\x00\\\\x00\\\\t\\\\x00\\\\x00\\\\x00O`\\\\x01\\\\x00s\\\\xe4\\\\x01\\\\x00\\\\x00t\\\\x00\\\\x00|\\\\x01\\\\x00\\\\x83\\\\x01\\\\x00t\\\\x00\\\\x00|\\\\x02\\\\x00\\\\x83\\\\x01\\\\x00\\\\x02}\\\\x05\\\\x00}\\\\x06\\\\x00t\\\\x01\\\\x00j\\\\x02\\\\x00\\\\x83\\\\x00\\\\x00\\\\x8f3\\\\x00\\\\x01t\\\\x01\\\\x00j\\\\x03\\\\x00d\\\\x01\\\\x00d\\\\x02\\\\x00d\\\\x03\\\\x00d\\\\x02\\\\x00\\\\x83\\\\x00\\\\x02\\\\x01|\\\\x00\\\\x00j\\\\x04\\\\x00|\\\\x05\\\\x00|\\\\x06\\\\x00|\\\\x03\\\\x00|\\\\x04\\\\x00\\\\x8e\\\\x02\\\\x00}\\\\x07\\\\x00Wd\\\\x04\\\\x00QXt\\\\x05\\\\x00|\\\\x01\\\\x00\\\\x83\\\\x01\\\\x00t\\\\x05\\\\x00|\\\\x02\\\\x00\\\\x83\\\\x01\\\\x00\\\\x02}\\\\x08\\\\x00}\\\\t\\\\x00|\\\\x08\\\\x00t\\\\x06\\\\x00k\\\\x08\\\\x00r\\\\xaf\\\\x00|\\\\t\\\\x00t\\\\x06\\\\x00k\\\\x08\\\\x00r\\\\x94\\\\x00t\\\\x06\\\\x00}\\\\n\\\\x00q\\\\xe8\\\\x00t\\\\x07\\\\x00j\\\\x08\\\\x00t\\\\t\\\\x00|\\\\x01\\\\x00\\\\x83\\\\x01\\\\x00|\\\\t\\\\x00\\\\x83\\\\x02\\\\x00}\\\\n\\\\x00n9\\\\x00|\\\\t\\\\x00t\\\\x06\\\\x00k\\\\x08\\\\x00r\\\\xd6\\\\x00t\\\\x07\\\\x00j\\\\x08\\\\x00|\\\\x08\\\\x00t\\\\t\\\\x00|\\\\x02\\\\x00\\\\x83\\\\x01\\\\x00\\\\x83\\\\x02\\\\x00}\\\\n\\\\x00n\\\\x12\\\\x00t\\\\x07\\\\x00j\\\\x08\\\\x00|\\\\x08\\\\x00|\\\\t\\\\x00\\\\x83\\\\x02\\\\x00}\\\\n\\\\x00|\\\\x07\\\\x00j\\\\n\\\\x00s\\\\xff\\\\x00|\\\\n\\\\x00r\\\\xfb\\\\x00t\\\\x0b\\\\x00S|\\\\x07\\\\x00S|\\\\n\\\\x00t\\\\x06\\\\x00k\\\\t\\\\x00r\\\\x81\\\\x01|\\\\n\\\\x00j\\\\x0c\\\\x00\\\\x83\\\\x00\\\\x00r\\\\x81\\\\x01y]\\\\x00t\\\\x01\\\\x00j\\\\r\\\\x00|\\\\x07\\\\x00d\\\\x05\\\\x00d\\\\x06\\\\x00d\\\\x07\\\\x00d\\\\x08\\\\x00|\\\\n\\\\x00\\\\x83\\\\x02\\\\x02\\\\x01t\\\\x07\\\\x00j\\\\x0e\\\\x00|\\\\n\\\\x00|\\\\x05\\\\x00\\\\x83\\\\x02\\\\x00}\\\\x0b\\\\x00t\\\\x01\\\\x00j\\\\x0f\\\\x00|\\\\x0b\\\\x00j\\\\x10\\\\x00|\\\\x07\\\\x00j\\\\x10\\\\x00d\\\\x06\\\\x00d\\\\t\\\\x00\\\\x83\\\\x02\\\\x01rs\\\\x01|\\\\x07\\\\x00|\\\\x0b\\\\x007}\\\\x07\\\\x00n\\\\x00\\\\x00Wq\\\\x81\\\\x01\\\\x01\\\\x01\\\\x01q\\\\x81\\\\x01Xn\\\\x00\\\\x00|\\\\x07\\\\x00j\\\\x11\\\\x00t\\\\x12\\\\x00|\\\\x01\\\\x00|\\\\x02\\\\x00\\\\x83\\\\x02\\\\x00\\\\x83\\\\x01\\\\x00}\\\\x0c\\\\x00|\\\\n\\\\x00|\\\\x0c\\\\x00_\\\\x13\\\\x00t\\\\x14\\\\x00|\\\\x01\\\\x00t\\\\x15\\\\x00\\\\x83\\\\x02\\\\x00r\\\\xc1\\\\x01|\\\\x0c\\\\x00j\\\\x16\\\\x00|\\\\x01\\\\x00\\\\x83\\\\x01\\\\x00\\\\x01n\\\\x1f\\\\x00t\\\\x14\\\\x00|\\\\x02\\\\x00t\\\\x15\\\\x00\\\\x83\\\\x02\\\\x00r\\\\xe0\\\\x01|\\\\x0c\\\\x00j\\\\x16\\\\x00|\\\\x02\\\\x00\\\\x83\\\\x01\\\\x00\\\\x01n\\\\x00\\\\x00|\\\\x0c\\\\x00S(\\\\n\\\\x00\\\\x00\\\\x00s-\\\\x00\\\\x00\\\\x00\\\\n        Execute the call behavior.\\\\n\\\\n        RF\\\\x00\\\\x00\\\\x00RN\\\\x01\\\\x00\\\\x00R7\\\\x01\\\\x00\\\\x00Ni\\\\x00\\\\x00\\\\x00\\\\x00t\\\\x07\\\\x00\\\\x00\\\\x00castingt\\\\x06\\\\x00\\\\x00\\\\x00unsafeR\\\\xbf\\\\x00\\\\x00\\\\x00t\\\\x04\\\\x00\\\\x00\\\\x00safe(\\\\x17\\\\x00\\\\x00\\\\x00RX\\\\x00\\\\x00\\\\x00R\\\\xee\\\\x00\\\\x00\\\\x00RO\\\\x01\\\\x00\\\\x00t\\\\x06\\\\x00\\\\x00\\\\x00seterrR\\\\xd1\\\\x00\\\\x00\\\\x00RY\\\\x00\\\\x00\\\\x00R\\\\x95\\\\x00\\\\x00\\\\x00R;\\\\x01\\\\x00\\\\x00Rs\\\\x00\\\\x00\\\\x00RZ\\\\x00\\\\x00\\\\x00R\\\\x93\\\\x00\\\\x00\\\\x00Ry\\\\x00\\\\x00\\\\x00R!\\\\x00\\\\x00\\\\x00RP\\\\x01\\\\x00\\\\x00R\\\\x91\\\\x00\\\\x00\\\\x00t\\\\x08\\\\x00\\\\x00\\\\x00can_castR\\\\xe9\\\\x00\\\\x00\\\\x00R1\\\\x01\\\\x00\\\\x00R-\\\\x01\\\\x00\\\\x00R6\\\\x01\\\\x00\\\\x00R\\\\xed\\\\x00\\\\x00\\\\x00R\\\\x17\\\\x00\\\\x00\\\\x00RQ\\\\x01\\\\x00\\\\x00(\\\\r\\\\x00\\\\x00\\\\x00R9\\\\x01\\\\x00\\\\x00R\\\\x1f\\\\x01\\\\x00\\\\x00R\\\\xcf\\\\x00\\\\x00\\\\x00RR\\\\x01\\\\x00\\\\x00RS\\\\x01\\\\x00\\\\x00t\\\\x02\\\\x00\\\\x00\\\\x00dat\\\\x02\\\\x00\\\\x00\\\\x00dbR \\\\x01\\\\x00\\\\x00t\\\\x02\\\\x00\\\\x00\\\\x00mat\\\\x02\\\\x00\\\\x00\\\\x00mbR\\\\xde\\\\x00\\\\x00\\\\x00t\\\\t\\\\x00\\\\x00\\\\x00masked_daRU\\\\x01\\\\x00\\\\x00(\\\\x00\\\\x00\\\\x00\\\\x00(\\\\x00\\\\x00\\\\x00\\\\x00s,\\\\x00\\\\x00\\\\x00lib/python2.7/site-packages/numpy/ma/core.pyR=\\\\x01\\\\x00\\\\x00\\\\xe4\\\\x03\\\\x00\\\\x00s>\\\\x00\\\\x00\\\\x00\\\\x00\\\\x06\\\\x19\\\\x02\\\\r\\\\x01\\\\x16\\\\x01\\\\x1e\\\\x02\\\\x19\\\\x01\\\\x0c\\\\x01\\\\x0c\\\\x01\\\\t\\\\x02\\\\x1b\\\\x01\\\\x0c\\\\x01\\\\x1b\\\\x02\\\\x12\\\\x03\\\\t\\\\x01\\\\x06\\\\x01\\\\x04\\\\x01\\\\x04\\\\x04\\\\x18\\\\x02\\\\x03\\\\x01\\\\x1c\\\\x02\\\\x12\\\\x02\\\\x1e\\\\x01\\\\x11\\\\x01\\\\x03\\\\x01\\\\x07\\\\x03\\\\x18\\\\x01\\\\t\\\\x01\\\\x0f\\\\x01\\\\x10\\\\x01\\\\x0f\\\\x01\\\\x10\\\\x01c\\\\x04\\\\x00\\\\x00\\\\x00\\\\n\\\\x00\\\\x00\\\\x00\\\\x05\\\\x00\\\\x00\\\\x00C`\\\\x01\\\\x00s\\\\x0e\\\\x01\\\\x00\\\\x00t\\\\x00\\\\x00|\\\\x01\\\\x00\\\\x83\\\\x01\\\\x00}\\\\x04\\\\x00t\\\\x01\\\\x00|\\\\x01\\\\x00\\\\x83\\\\x01\\\\x00}\\\\x05\\\\x00t\\\\x02\\\\x00|\\\\x01\\\\x00|\\\\x00\\\\x00j\\\\x03\\\\x00\\\\x83\\\\x02\\\\x00}\\\\x06\\\\x00|\\\\x06\\\\x00j\\\\x04\\\\x00d\\\\x04\\\\x00k\\\\x02\\\\x00ru\\\\x00|\\\\x06\\\\x00j\\\\x05\\\\x00d\\\\x01\\\\x00\\\\x83\\\\x01\\\\x00}\\\\x06\\\\x00|\\\\x05\\\\x00t\\\\x06\\\\x00k\\\\t\\\\x00ru\\\\x00t\\\\x07\\\\x00|\\\\x05\\\\x00d\\\\x02\\\\x00d\\\\x01\\\\x00\\\\x83\\\\x01\\\\x01}\\\\x05\\\\x00d\\\\x05\\\\x00|\\\\x05\\\\x00_\\\\x04\\\\x00qu\\\\x00n\\\\x00\\\\x00|\\\\x05\\\\x00t\\\\x06\\\\x00k\\\\x08\\\\x00r\\\\x9f\\\\x00|\\\\x00\\\\x00j\\\\x08\\\\x00j\\\\t\\\\x00|\\\\x06\\\\x00|\\\\x02\\\\x00\\\\x83\\\\x02\\\\x00}\\\\x07\\\\x00t\\\\x06\\\\x00}\\\\x08\\\\x00n9\\\\x00|\\\\x00\\\\x00j\\\\x08\\\\x00j\\\\t\\\\x00|\\\\x06\\\\x00|\\\\x02\\\\x00d\\\\x03\\\\x00|\\\\x03\\\\x00p\\\\xbd\\\\x00|\\\\x06\\\\x00j\\\\n\\\\x00\\\\x83\\\\x02\\\\x01}\\\\x07\\\\x00t\\\\x0b\\\\x00j\\\\x0c\\\\x00j\\\\t\\\\x00|\\\\x05\\\\x00|\\\\x02\\\\x00\\\\x83\\\\x02\\\\x00}\\\\x08\\\\x00|\\\\x07\\\\x00j\\\\x04\\\\x00s\\\\xf2\\\\x00|\\\\x08\\\\x00r\\\\xeb\\\\x00t\\\\r\\\\x00S|\\\\x07\\\\x00Sn\\\\x00\\\\x00|\\\\x07\\\\x00j\\\\x0e\\\\x00|\\\\x04\\\\x00\\\\x83\\\\x01\\\\x00}\\\\t\\\\x00|\\\\x08\\\\x00|\\\\t\\\\x00_\\\\x0f\\\\x00|\\\\t\\\\x00S(\\\\x06\\\\x00\\\\x00\\\\x00s:\\\\x00\\\\x00\\\\x00\\\\n        Reduce `target` along the given `axis`.\\\\n\\\\n        i\\\\x01\\\\x00\\\\x00\\\\x00R<\\\\x00\\\\x00\\\\x00R\\\\xe9\\\\x00\\\\x00\\\\x00(\\\\x00\\\\x00\\\\x00\\\\x00(\\\\x01\\\\x00\\\\x00\\\\x00i\\\\x01\\\\x00\\\\x00\\\\x00(\\\\x10\\\\x00\\\\x00\\\\x00R-\\\\x01\\\\x00\\\\x00RY\\\\x00\\\\x00\\\\x00RN\\\\x00\\\\x00\\\\x00RY\\\\x01\\\\x00\\\\x00R\\\\xab\\\\x00\\\\x00\\\\x00R\\\\xa5\\\\x00\\\\x00\\\\x00R\\\\x95\\\\x00\\\\x00\\\\x00Ru\\\\x00\\\\x00\\\\x00R\\\\xd1\\\\x00\\\\x00\\\\x00R\\\\x03\\\\x00\\\\x00\\\\x00R\\\\xe9\\\\x00\\\\x00\\\\x00R;\\\\x01\\\\x00\\\\x00Rq\\\\x00\\\\x00\\\\x00Ry\\\\x00\\\\x00\\\\x00R1\\\\x01\\\\x00\\\\x00R6\\\\x01\\\\x00\\\\x00(\\\\n\\\\x00\\\\x00\\\\x00R9\\\\x01\\\\x00\\\\x00t\\\\x06\\\\x00\\\\x00\\\\x00targett\\\\x04\\\\x00\\\\x00\\\\x00axisR\\\\xe9\\\\x00\\\\x00\\\\x00t\\\\x06\\\\x00\\\\x00\\\\x00tclassR\\\\xde\\\\x00\\\\x00\\\\x00t\\\\x01\\\\x00\\\\x00\\\\x00tt\\\\x02\\\\x00\\\\x00\\\\x00trt\\\\x02\\\\x00\\\\x00\\\\x00mrt\\\\t\\\\x00\\\\x00\\\\x00masked_tr(\\\\x00\\\\x00\\\\x00\\\\x00(\\\\x00\\\\x00\\\\x00\\\\x00s,\\\\x00\\\\x00\\\\x00lib/python2.7/site-packages/numpy/ma/core.pyR\\\\x03\\\\x00\\\\x00\\\\x00\\\\x18\\\\x04\\\\x00\\\\x00s(\\\\x00\\\\x00\\\\x00\\\\x00\\\\x05\\\\x0c\\\\x01\\\\x0c\\\\x01\\\\x12\\\\x01\\\\x0f\\\\x01\\\\x0f\\\\x01\\\\x0c\\\\x01\\\\x12\\\\x01\\\\x0f\\\\x02\\\\x0c\\\\x01\\\\x15\\\\x01\\\\t\\\\x02$\\\\x01\\\\x15\\\\x02\\\\t\\\\x01\\\\x06\\\\x01\\\\x04\\\\x02\\\\x07\\\\x01\\\\x0f\\\\x01\\\\t\\\\x01c\\\\x03\\\\x00\\\\x00\\\\x00\\\\n\\\\x00\\\\x00\\\\x00\\\\x05\\\\x00\\\\x00\\\\x00C`\\\\x01\\\\x00s\\\\xff\\\\x00\\\\x00\\\\x00t\\\\x00\\\\x00|\\\\x01\\\\x00\\\\x83\\\\x01\\\\x00t\\\\x00\\\\x00|\\\\x02\\\\x00\\\\x83\\\\x01\\\\x00\\\\x02}\\\\x03\\\\x00}\\\\x04\\\\x00|\\\\x00\\\\x00j\\\\x01\\\\x00j\\\\x02\\\\x00|\\\\x03\\\\x00|\\\\x04\\\\x00\\\\x83\\\\x02\\\\x00}\\\\x05\\\\x00t\\\\x03\\\\x00|\\\\x01\\\\x00\\\\x83\\\\x01\\\\x00}\\\\x06\\\\x00t\\\\x03\\\\x00|\\\\x02\\\\x00\\\\x83\\\\x01\\\\x00}\\\\x07\\\\x00|\\\\x06\\\\x00t\\\\x04\\\\x00k\\\\x08\\\\x00rg\\\\x00|\\\\x07\\\\x00t\\\\x04\\\\x00k\\\\x08\\\\x00rg\\\\x00t\\\\x04\\\\x00}\\\\x08\\\\x00n-\\\\x00t\\\\x05\\\\x00|\\\\x01\\\\x00\\\\x83\\\\x01\\\\x00}\\\\x06\\\\x00t\\\\x05\\\\x00|\\\\x02\\\\x00\\\\x83\\\\x01\\\\x00}\\\\x07\\\\x00t\\\\x06\\\\x00j\\\\x07\\\\x00j\\\\x02\\\\x00|\\\\x06\\\\x00|\\\\x07\\\\x00\\\\x83\\\\x02\\\\x00}\\\\x08\\\\x00|\\\\x08\\\\x00j\\\\x08\\\\x00\\\\x0cr\\\\xa8\\\\x00|\\\\x08\\\\x00r\\\\xa8\\\\x00t\\\\t\\\\x00S|\\\\x08\\\\x00t\\\\x04\\\\x00k\\\\t\\\\x00r\\\\xcd\\\\x00t\\\\n\\\\x00j\\\\x0b\\\\x00|\\\\x05\\\\x00|\\\\x03\\\\x00d\\\\x01\\\\x00|\\\\x08\\\\x00\\\\x83\\\\x02\\\\x01\\\\x01n\\\\x00\\\\x00|\\\\x05\\\\x00j\\\\x0c\\\\x00s\\\\xda\\\\x00|\\\\x05\\\\x00S|\\\\x05\\\\x00j\\\\r\\\\x00t\\\\x0e\\\\x00|\\\\x01\\\\x00|\\\\x02\\\\x00\\\\x83\\\\x02\\\\x00\\\\x83\\\\x01\\\\x00}\\\\t\\\\x00|\\\\x08\\\\x00|\\\\t\\\\x00_\\\\x0f\\\\x00|\\\\t\\\\x00S(\\\\x02\\\\x00\\\\x00\\\\x00sO\\\\x00\\\\x00\\\\x00\\\\n        Return the function applied to the outer product of a and b.\\\\n\\\\n        R\\\\xbf\\\\x00\\\\x00\\\\x00(\\\\x10\\\\x00\\\\x00\\\\x00RX\\\\x00\\\\x00\\\\x00R\\\\xd1\\\\x00\\\\x00\\\\x00R\\\\x99\\\\x00\\\\x00\\\\x00RY\\\\x00\\\\x00\\\\x00R\\\\x95\\\\x00\\\\x00\\\\x00RZ\\\\x00\\\\x00\\\\x00R;\\\\x01\\\\x00\\\\x00Rs\\\\x00\\\\x00\\\\x00R\\\\x93\\\\x00\\\\x00\\\\x00Ry\\\\x00\\\\x00\\\\x00R\\\\xee\\\\x00\\\\x00\\\\x00RP\\\\x01\\\\x00\\\\x00R\\\\xab\\\\x00\\\\x00\\\\x00R1\\\\x01\\\\x00\\\\x00R-\\\\x01\\\\x00\\\\x00R6\\\\x01\\\\x00\\\\x00(\\\\n\\\\x00\\\\x00\\\\x00R9\\\\x01\\\\x00\\\\x00R\\\\x1f\\\\x01\\\\x00\\\\x00R\\\\xcf\\\\x00\\\\x00\\\\x00R`\\\\x01\\\\x00\\\\x00Ra\\\\x01\\\\x00\\\\x00RT\\\\x01\\\\x00\\\\x00Rb\\\\x01\\\\x00\\\\x00Rc\\\\x01\\\\x00\\\\x00R\\\\xde\\\\x00\\\\x00\\\\x00t\\\\x08\\\\x00\\\\x00\\\\x00masked_d(\\\\x00\\\\x00\\\\x00\\\\x00(\\\\x00\\\\x00\\\\x00\\\\x00s,\\\\x00\\\\x00\\\\x00lib/python2.7/site-packages/numpy/ma/core.pyR\\\\x99\\\\x00\\\\x00\\\\x006\\\\x04\\\\x00\\\\x00s$\\\\x00\\\\x00\\\\x00\\\\x00\\\\x05\\\\x19\\\\x01\\\\x15\\\\x01\\\\x0c\\\\x01\\\\x0c\\\\x01\\\\x18\\\\x01\\\\t\\\\x02\\\\x0c\\\\x01\\\\x0c\\\\x01\\\\x15\\\\x01\\\\x10\\\\x01\\\\x04\\\\x01\\\\x0c\\\\x01\\\\x19\\\\x01\\\\t\\\\x01\\\\x04\\\\x01\\\\x18\\\\x01\\\\t\\\\x01c\\\\x03\\\\x00\\\\x00\\\\x00\\\\x07\\\\x00\\\\x00\\\\x00\\\\x03\\\\x00\\\\x00\\\\x00C`\\\\x01\\\\x00sF\\\\x00\\\\x00\\\\x00t\\\\x00\\\\x00|\\\\x01\\\\x00\\\\x83\\\\x01\\\\x00}\\\\x03\\\\x00t\\\\x01\\\\x00|\\\\x01\\\\x00|\\\\x00\\\\x00j\\\\x02\\\\x00\\\\x83\\\\x02\\\\x00}\\\\x04\\\\x00|\\\\x00\\\\x00j\\\\x03\\\\x00j\\\\x04\\\\x00|\\\\x04\\\\x00|\\\\x02\\\\x00\\\\x83\\\\x02\\\\x00}\\\\x05\\\\x00|\\\\x05\\\\x00j\\\\x05\\\\x00|\\\\x03\\\\x00\\\\x83\\\\x01\\\\x00}\\\\x06\\\\x00|\\\\x06\\\\x00S(\\\\x01\\\\x00\\\\x00\\\\x00sS\\\\x00\\\\x00\\\\x00Accumulate `target` along `axis` after filling with y fill\\\\n        value.\\\\n\\\\n        (\\\\x06\\\\x00\\\\x00\\\\x00R-\\\\x01\\\\x00\\\\x00RN\\\\x00\\\\x00\\\\x00RY\\\\x01\\\\x00\\\\x00R\\\\xd1\\\\x00\\\\x00\\\\x00t\\\\n\\\\x00\\\\x00\\\\x00accumulateR1\\\\x01\\\\x00\\\\x00(\\\\x07\\\\x00\\\\x00\\\\x00R9\\\\x01\\\\x00\\\\x00Re\\\\x01\\\\x00\\\\x00Rf\\\\x01\\\\x00\\\\x00Rg\\\\x01\\\\x00\\\\x00Rh\\\\x01\\\\x00\\\\x00R \\\\x01\\\\x00\\\\x00RU\\\\x01\\\\x00\\\\x00(\\\\x00\\\\x00\\\\x00\\\\x00(\\\\x00\\\\x00\\\\x00\\\\x00s,\\\\x00\\\\x00\\\\x00lib/python2.7/site-packages/numpy/ma/core.pyRm\\\\x01\\\\x00\\\\x00O\\\\x04\\\\x00\\\\x00s\\\\n\\\\x00\\\\x00\\\\x00\\\\x00\\\\x05\\\\x0c\\\\x01\\\\x12\\\\x01\\\\x15\\\\x01\\\\x0f\\\\x01c\\\\x01\\\\x00\\\\x00\\\\x00\\\\x01\\\\x00\\\\x00\\\\x00\\\\x03\\\\x00\\\\x00\\\\x00C`\\\\x01\\\\x00s\\\\x11\\\\x00\\\\x00\\\\x00d\\\\x01\\\\x00t\\\\x00\\\\x00|\\\\x00\\\\x00j\\\\x01\\\\x00\\\\x83\\\\x01\\\\x00\\\\x17S(\\\\x02\\\\x00\\\\x00\\\\x00Ns\\\\x12\\\\x00\\\\x00\\\\x00Masked version of (\\\\x02\\\\x00\\\\x00\\\\x00R\\\\xf3\\\\x00\\\\x00\\\\x00R\\\\xd1\\\\x00\\\\x00\\\\x00(\\\\x01\\\\x00\\\\x00\\\\x00R9\\\\x01\\\\x00\\\\x00(\\\\x00\\\\x00\\\\x00\\\\x00(\\\\x00\\\\x00\\\\x00\\\\x00s,\\\\x00\\\\x00\\\\x00lib/python2.7/site-packages/numpy/ma/core.pyRV\\\\x01\\\\x00\\\\x00Z\\\\x04\\\\x00\\\\x00s\\\\x02\\\\x00\\\\x00\\\\x00\\\\x00\\\\x01N(\\\\n\\\\x00\\\\x00\\\\x00R\\\\xc2\\\\x00\\\\x00\\\\x00R\\\\xc3\\\\x00\\\\x00\\\\x00R\\\\xce\\\\x00\\\\x00\\\\x00R:\\\\x01\\\\x00\\\\x00R=\\\\x01\\\\x00\\\\x00R\\\\xc4\\\\x00\\\\x00\\\\x00R\\\\x03\\\\x00\\\\x00\\\\x00R\\\\x99\\\\x00\\\\x00\\\\x00Rm\\\\x01\\\\x00\\\\x00RV\\\\x01\\\\x00\\\\x00(\\\\x00\\\\x00\\\\x00\\\\x00(\\\\x00\\\\x00\\\\x00\\\\x00(\\\\x00\\\\x00\\\\x00\\\\x00s,\\\\x00\\\\x00\\\\x00lib/python2.7/site-packages/numpy/ma/core.pyRW\\\\x01\\\\x00\\\\x00\\\\xc1\\\\x03\\\\x00\\\\x00s\\\\x0e\\\\x00\\\\x00\\\\x00\\\\x06\\\\x12\\\\x06\\\\x02\\\\x0f\\\\x0f\\\\t4\\\\x0f\\\\x1e\\\\t\\\\x19\\\\x0c\\\\x0bt\\\\x18\\\\x00\\\\x00\\\\x00_DomainedBinaryOperationc\\\\x00\\\\x00\\\\x00\\\\x00\\\\x00\\\\x00\\\\x00\\\\x00\\\\x03\\\\x00\\\\x00\\\\x00B`\\\\x01\\\\x00s/\\\\x00\\\\x00\\\\x00e\\\\x00\\\\x00Z\\\\x01\\\\x00d\\\\x00\\\\x00Z\\\\x02\\\\x00d\\\\x01\\\\x00d\\\\x01\\\\x00d\\\\x02\\\\x00\\\\x84\\\\x02\\\\x00Z\\\\x03\\\\x00d\\\\x03\\\\x00\\\\x84\\\\x00\\\\x00Z\\\\x04\\\\x00d\\\\x04\\\\x00\\\\x84\\\\x00\\\\x00Z\\\\x05\\\\x00RS(\\\\x05\\\\x00\\\\x00\\\\x00sH\\\\x02\\\\x00\\\\x00\\\\n    Define binary operations that have a domain, like divide.\\\\n\\\\n    They have no reduce, outer or accumulate.\\\\n\\\\n    Parameters\\\\n    ----------\\\\n    mbfunc : function\\\\n        The function for which to define a masked version. Made available\\\\n        as ``_DomainedBinaryOperation.f``.\\\\n    domain : class instance\\\\n        Default domain for the function. Should be one of the ``_Domain*``\\\\n        classes.\\\\n    fillx : scalar, optional\\\\n        Filling value for the first argument, default is 0.\\\\n    filly : scalar, optional\\\\n        Filling value for the second argument, default is 0.\\\\n\\\\n    i\\\\x00\\\\x00\\\\x00\\\\x00c\\\\x05\\\\x00\\\\x00\\\\x00\\\\x05\\\\x00\\\\x00\\\\x00\\\\x05\\\\x00\\\\x00\\\\x00C`\\\\x01\\\\x00sx\\\\x00\\\\x00\\\\x00|\\\\x01\\\\x00|\\\\x00\\\\x00_\\\\x00\\\\x00|\\\\x02\\\\x00|\\\\x00\\\\x00_\\\\x01\\\\x00|\\\\x03\\\\x00|\\\\x00\\\\x00_\\\\x02\\\\x00|\\\\x04\\\\x00|\\\\x00\\\\x00_\\\\x03\\\\x00t\\\\x04\\\\x00|\\\\x01\\\\x00d\\\\x01\\\\x00t\\\\x05\\\\x00|\\\\x01\\\\x00\\\\x83\\\\x01\\\\x00\\\\x83\\\\x03\\\\x00|\\\\x00\\\\x00_\\\\x06\\\\x00t\\\\x04\\\\x00|\\\\x01\\\\x00d\\\\x02\\\\x00t\\\\x05\\\\x00|\\\\x01\\\\x00\\\\x83\\\\x01\\\\x00\\\\x83\\\\x03\\\\x00|\\\\x00\\\\x00_\\\\x07\\\\x00|\\\\x02\\\\x00t\\\\x08\\\\x00|\\\\x01\\\\x00<|\\\\x03\\\\x00|\\\\x04\\\\x00f\\\\x02\\\\x00t\\\\t\\\\x00|\\\\x01\\\\x00<d\\\\x03\\\\x00S(\\\\x04\\\\x00\\\\x00\\\\x00sj\\\\x00\\\\x00\\\\x00abfunc(fillx, filly) must be defined.\\\\n           abfunc(x, filly) = x for all x to enable reduce.\\\\n        R\\\\xce\\\\x00\\\\x00\\\\x00R\\\\xc2\\\\x00\\\\x00\\\\x00N(\\\\n\\\\x00\\\\x00\\\\x00R\\\\xd1\\\\x00\\\\x00\\\\x00RI\\\\x01\\\\x00\\\\x00RX\\\\x01\\\\x00\\\\x00RY\\\\x01\\\\x00\\\\x00RJ\\\\x01\\\\x00\\\\x00R\\\\xf3\\\\x00\\\\x00\\\\x00R\\\\xce\\\\x00\\\\x00\\\\x00R\\\\xc2\\\\x00\\\\x00\\\\x00RK\\\\x01\\\\x00\\\\x00RL\\\\x01\\\\x00\\\\x00(\\\\x05\\\\x00\\\\x00\\\\x00R9\\\\x01\\\\x00\\\\x00t\\\\x06\\\\x00\\\\x00\\\\x00dbfuncRI\\\\x01\\\\x00\\\\x00RX\\\\x01\\\\x00\\\\x00RY\\\\x01\\\\x00\\\\x00(\\\\x00\\\\x00\\\\x00\\\\x00(\\\\x00\\\\x00\\\\x00\\\\x00s,\\\\x00\\\\x00\\\\x00lib/python2.7/site-packages/numpy/ma/core.pyR:\\\\x01\\\\x00\\\\x00s\\\\x04\\\\x00\\\\x00s\\\\x10\\\\x00\\\\x00\\\\x00\\\\x00\\\\x04\\\\t\\\\x01\\\\t\\\\x01\\\\t\\\\x01\\\\t\\\\x01\\\\x1b\\\\x01\\\\x1b\\\\x01\\\\n\\\\x01c\\\\x03\\\\x00\\\\x00\\\\x00\\\\x0c\\\\x00\\\\x00\\\\x00\\\\t\\\\x00\\\\x00\\\\x00O`\\\\x01\\\\x00s\\\\xa4\\\\x01\\\\x00\\\\x00t\\\\x00\\\\x00|\\\\x01\\\\x00\\\\x83\\\\x01\\\\x00t\\\\x00\\\\x00|\\\\x02\\\\x00\\\\x83\\\\x01\\\\x00\\\\x02}\\\\x05\\\\x00}\\\\x06\\\\x00t\\\\x01\\\\x00j\\\\x02\\\\x00d\\\\x01\\\\x00d\\\\x02\\\\x00d\\\\x03\\\\x00d\\\\x02\\\\x00\\\\x83\\\\x00\\\\x02\\\\x8f\\\\x1d\\\\x00\\\\x01|\\\\x00\\\\x00j\\\\x03\\\\x00|\\\\x05\\\\x00|\\\\x06\\\\x00|\\\\x03\\\\x00|\\\\x04\\\\x00\\\\x8e\\\\x02\\\\x00}\\\\x07\\\\x00Wd\\\\x04\\\\x00QXt\\\\x04\\\\x00j\\\\x05\\\\x00|\\\\x07\\\\x00\\\\x83\\\\x01\\\\x00\\\\x0f}\\\\x08\\\\x00|\\\\x08\\\\x00t\\\\x06\\\\x00|\\\\x01\\\\x00\\\\x83\\\\x01\\\\x00O}\\\\x08\\\\x00|\\\\x08\\\\x00t\\\\x06\\\\x00|\\\\x02\\\\x00\\\\x83\\\\x01\\\\x00O}\\\\x08\\\\x00t\\\\x07\\\\x00j\\\\x08\\\\x00|\\\\x00\\\\x00j\\\\x03\\\\x00d\\\\x04\\\\x00\\\\x83\\\\x02\\\\x00}\\\\t\\\\x00|\\\\t\\\\x00d\\\\x04\\\\x00k\\\\t\\\\x00r\\\\xc0\\\\x00|\\\\x08\\\\x00t\\\\n\\\\x00|\\\\t\\\\x00|\\\\x05\\\\x00|\\\\x06\\\\x00\\\\x83\\\\x02\\\\x00t\\\\x0b\\\\x00\\\\x83\\\\x02\\\\x00O}\\\\x08\\\\x00n\\\\x00\\\\x00|\\\\x08\\\\x00j\\\\x0c\\\\x00s\\\\xda\\\\x00|\\\\x08\\\\x00r\\\\xd3\\\\x00t\\\\r\\\\x00S|\\\\x07\\\\x00Sn\\\\x00\\\\x00y]\\\\x00t\\\\x01\\\\x00j\\\\x0e\\\\x00|\\\\x07\\\\x00d\\\\x05\\\\x00d\\\\x06\\\\x00d\\\\x07\\\\x00d\\\\x08\\\\x00|\\\\x08\\\\x00\\\\x83\\\\x02\\\\x02\\\\x01t\\\\x04\\\\x00j\\\\x0f\\\\x00|\\\\x08\\\\x00|\\\\x05\\\\x00\\\\x83\\\\x02\\\\x00}\\\\n\\\\x00t\\\\x01\\\\x00j\\\\x10\\\\x00|\\\\n\\\\x00j\\\\x11\\\\x00|\\\\x07\\\\x00j\\\\x11\\\\x00d\\\\x06\\\\x00d\\\\t\\\\x00\\\\x83\\\\x02\\\\x01r6\\\\x01|\\\\x07\\\\x00|\\\\n\\\\x007}\\\\x07\\\\x00n\\\\x00\\\\x00Wn\\\\x07\\\\x00\\\\x01\\\\x01\\\\x01n\\\\x01\\\\x00X|\\\\x07\\\\x00j\\\\x12\\\\x00t\\\\x13\\\\x00|\\\\x01\\\\x00|\\\\x02\\\\x00\\\\x83\\\\x02\\\\x00\\\\x83\\\\x01\\\\x00}\\\\x0b\\\\x00|\\\\x08\\\\x00|\\\\x0b\\\\x00_\\\\x14\\\\x00t\\\\x15\\\\x00|\\\\x01\\\\x00t\\\\x16\\\\x00\\\\x83\\\\x02\\\\x00r\\\\x81\\\\x01|\\\\x0b\\\\x00j\\\\x17\\\\x00|\\\\x01\\\\x00\\\\x83\\\\x01\\\\x00\\\\x01n\\\\x1f\\\\x00t\\\\x15\\\\x00|\\\\x02\\\\x00t\\\\x16\\\\x00\\\\x83\\\\x02\\\\x00r\\\\xa0\\\\x01|\\\\x0b\\\\x00j\\\\x17\\\\x00|\\\\x02\\\\x00\\\\x83\\\\x01\\\\x00\\\\x01n\\\\x00\\\\x00|\\\\x0b\\\\x00S(\\\\n\\\\x00\\\\x00\\\\x00s\\\\x1a\\\\x00\\\\x00\\\\x00Execute the call behavior.RF\\\\x00\\\\x00\\\\x00RN\\\\x01\\\\x00\\\\x00R7\\\\x01\\\\x00\\\\x00Ni\\\\x00\\\\x00\\\\x00\\\\x00R[\\\\x01\\\\x00\\\\x00R\\\\\\\\\\\\x01\\\\x00\\\\x00R\\\\xbf\\\\x00\\\\x00\\\\x00R]\\\\x01\\\\x00\\\\x00(\\\\x18\\\\x00\\\\x00\\\\x00RX\\\\x00\\\\x00\\\\x00R\\\\xee\\\\x00\\\\x00\\\\x00RO\\\\x01\\\\x00\\\\x00R\\\\xd1\\\\x00\\\\x00\\\\x00R;\\\\x01\\\\x00\\\\x00R5\\\\x01\\\\x00\\\\x00RY\\\\x00\\\\x00\\\\x00RK\\\\x01\\\\x00\\\\x00R\\\\xf1\\\\x00\\\\x00\\\\x00R\\\\xc4\\\\x00\\\\x00\\\\x00RN\\\\x00\\\\x00\\\\x00R4\\\\x01\\\\x00\\\\x00R\\\\x93\\\\x00\\\\x00\\\\x00Ry\\\\x00\\\\x00\\\\x00RP\\\\x01\\\\x00\\\\x00R\\\\x91\\\\x00\\\\x00\\\\x00R_\\\\x01\\\\x00\\\\x00R\\\\xe9\\\\x00\\\\x00\\\\x00R1\\\\x01\\\\x00\\\\x00R-\\\\x01\\\\x00\\\\x00R6\\\\x01\\\\x00\\\\x00R\\\\xed\\\\x00\\\\x00\\\\x00R\\\\x17\\\\x00\\\\x00\\\\x00RQ\\\\x01\\\\x00\\\\x00(\\\\x0c\\\\x00\\\\x00\\\\x00R9\\\\x01\\\\x00\\\\x00R\\\\x1f\\\\x01\\\\x00\\\\x00R\\\\xcf\\\\x00\\\\x00\\\\x00RR\\\\x01\\\\x00\\\\x00RS\\\\x01\\\\x00\\\\x00R`\\\\x01\\\\x00\\\\x00Ra\\\\x01\\\\x00\\\\x00R \\\\x01\\\\x00\\\\x00R\\\\xde\\\\x00\\\\x00\\\\x00RI\\\\x01\\\\x00\\\\x00Rd\\\\x01\\\\x00\\\\x00RU\\\\x01\\\\x00\\\\x00(\\\\x00\\\\x00\\\\x00\\\\x00(\\\\x00\\\\x00\\\\x00\\\\x00s,\\\\x00\\\\x00\\\\x00lib/python2.7/site-packages/numpy/ma/core.pyR=\\\\x01\\\\x00\\\\x00\\\\x80\\\\x04\\\\x00\\\\x00s6\\\\x00\\\\x00\\\\x00\\\\x00\\\\x03\\\\x19\\\\x02\\\\x19\\\\x01\\\\x1e\\\\x02\\\\x10\\\\x01\\\\x10\\\\x01\\\\x10\\\\x02\\\\x15\\\\x01\\\\x0c\\\\x01\\\\x1f\\\\x02\\\\t\\\\x01\\\\x06\\\\x01\\\\x04\\\\x02\\\\x07\\\\x03\\\\x03\\\\x01\\\\x1c\\\\x02\\\\x12\\\\x02\\\\x1e\\\\x01\\\\x11\\\\x01\\\\x03\\\\x01\\\\x04\\\\x03\\\\x18\\\\x01\\\\t\\\\x01\\\\x0f\\\\x01\\\\x10\\\\x01\\\\x0f\\\\x01\\\\x10\\\\x01c\\\\x01\\\\x00\\\\x00\\\\x00\\\\x01\\\\x00\\\\x00\\\\x00\\\\x03\\\\x00\\\\x00\\\\x00C`\\\\x01\\\\x00s\\\\x11\\\\x00\\\\x00\\\\x00d\\\\x01\\\\x00t\\\\x00\\\\x00|\\\\x00\\\\x00j\\\\x01\\\\x00\\\\x83\\\\x01\\\\x00\\\\x17S(\\\\x02\\\\x00\\\\x00\\\\x00Ns\\\\x12\\\\x00\\\\x00\\\\x00Masked version of (\\\\x02\\\\x00\\\\x00\\\\x00R\\\\xf3\\\\x00\\\\x00\\\\x00R\\\\xd1\\\\x00\\\\x00\\\\x00(\\\\x01\\\\x00\\\\x00\\\\x00R9\\\\x01\\\\x00\\\\x00(\\\\x00\\\\x00\\\\x00\\\\x00(\\\\x00\\\\x00\\\\x00\\\\x00s,\\\\x00\\\\x00\\\\x00lib/python2.7/site-packages/numpy/ma/core.pyRV\\\\x01\\\\x00\\\\x00\\\\xaa\\\\x04\\\\x00\\\\x00s\\\\x02\\\\x00\\\\x00\\\\x00\\\\x00\\\\x01(\\\\x06\\\\x00\\\\x00\\\\x00R\\\\xc2\\\\x00\\\\x00\\\\x00R\\\\xc3\\\\x00\\\\x00\\\\x00R\\\\xce\\\\x00\\\\x00\\\\x00R:\\\\x01\\\\x00\\\\x00R=\\\\x01\\\\x00\\\\x00RV\\\\x01\\\\x00\\\\x00(\\\\x00\\\\x00\\\\x00\\\\x00(\\\\x00\\\\x00\\\\x00\\\\x00(\\\\x00\\\\x00\\\\x00\\\\x00s,\\\\x00\\\\x00\\\\x00lib/python2.7/site-packages/numpy/ma/core.pyRn\\\\x01\\\\x00\\\\x00^\\\\x04\\\\x00\\\\x00s\\\\x08\\\\x00\\\\x00\\\\x00\\\\x06\\\\x13\\\\x06\\\\x02\\\\x0f\\\\r\\\\t*g\\\\x00\\\\x00\\\\x00\\\\x00\\\\x00\\\\x00\\\\x00\\\\x00g\\\\x00\\\\x00\\\\x00\\\\x00\\\\x00\\\\x00\\\\xf0?g\\\\x0fz\\\\xf8\\\\xb7\\\\xa5\\\\x95\\\\xaa8g\\\\x00\\\\x00\\\\x00\\\\x00\\\\x00\\\\x00\\\\xf0\\\\xbfg\\\\x16V\\\\xe7\\\\x9e\\\\xaf\\\\x03\\\\xd2<i\\\\x01\\\\x00\\\\x00\\\\x00c\\\\x02\\\\x00\\\\x00\\\\x00\\\\x06\\\\x00\\\\x00\\\\x00\\\\x06\\\\x00\\\\x00\\\\x00C`\\\\x01\\\\x00s\\\\xbd\\\\x00\\\\x00\\\\x00|\\\\x00\\\\x00j\\\\x00\\\\x00ry\\\\x00g\\\\x00\\\\x00}\\\\x02\\\\x00xc\\\\x00|\\\\x00\\\\x00j\\\\x00\\\\x00D]X\\\\x00}\\\\x03\\\\x00|\\\\x00\\\\x00j\\\\x01\\\\x00|\\\\x03\\\\x00\\\\x19}\\\\x04\\\\x00t\\\\x02\\\\x00|\\\\x04\\\\x00\\\\x83\\\\x01\\\\x00d\\\\x01\\\\x00k\\\\x02\\\\x00rQ\\\\x00|\\\\x04\\\\x00d\\\\x02\\\\x00\\\\x19|\\\\x03\\\\x00f\\\\x02\\\\x00}\\\\x03\\\\x00n\\\\x00\\\\x00|\\\\x02\\\\x00j\\\\x03\\\\x00|\\\\x03\\\\x00t\\\\x04\\\\x00|\\\\x04\\\\x00d\\\\x03\\\\x00\\\\x19|\\\\x01\\\\x00\\\\x83\\\\x02\\\\x00f\\\\x02\\\\x00\\\\x83\\\\x01\\\\x00\\\\x01q\\\\x19\\\\x00W|\\\\x02\\\\x00S|\\\\x00\\\\x00j\\\\x05\\\\x00r\\\\xb5\\\\x00t\\\\x06\\\\x00|\\\\x00\\\\x00j\\\\x05\\\\x00\\\\x83\\\\x01\\\\x00}\\\\x05\\\\x00t\\\\x04\\\\x00|\\\\x00\\\\x00j\\\\x05\\\\x00d\\\\x03\\\\x00\\\\x19|\\\\x01\\\\x00\\\\x83\\\\x02\\\\x00|\\\\x05\\\\x00d\\\\x03\\\\x00<t\\\\x07\\\\x00|\\\\x05\\\\x00\\\\x83\\\\x01\\\\x00S|\\\\x01\\\\x00Sd\\\\x04\\\\x00S(\\\\x05\\\\x00\\\\x00\\\\x00s2\\\\x00\\\\x00\\\\x00Private function allowing recursion in make_descr.i\\\\x03\\\\x00\\\\x00\\\\x00i\\\\xff\\\\xff\\\\xff\\\\xffi\\\\x00\\\\x00\\\\x00\\\\x00N(\\\\x08\\\\x00\\\\x00\\\\x00R\\\\xf8\\\\x00\\\\x00\\\\x00R\\\\x13\\\\x01\\\\x00\\\\x00R\\\\x0b\\\\x01\\\\x00\\\\x00R"\\\\x00\\\\x00\\\\x00t\\\\x15\\\\x00\\\\x00\\\\x00_recursive_make_descrR\\\\xef\\\\x00\\\\x00\\\\x00t\\\\x04\\\\x00\\\\x00\\\\x00listR\\\\xfa\\\\x00\\\\x00\\\\x00(\\\\x06\\\\x00\\\\x00\\\\x00t\\\\x08\\\\x00\\\\x00\\\\x00datatypet\\\\x07\\\\x00\\\\x00\\\\x00newtypeR\\\\x14\\\\x01\\\\x00\\\\x00R\\\\xfe\\\\x00\\\\x00\\\\x00t\\\\x05\\\\x00\\\\x00\\\\x00fieldt\\\\x06\\\\x00\\\\x00\\\\x00mdescr(\\\\x00\\\\x00\\\\x00\\\\x00(\\\\x00\\\\x00\\\\x00\\\\x00s,\\\\x00\\\\x00\\\\x00lib/python2.7/site-packages/numpy/ma/core.pyRp\\\\x01\\\\x00\\\\x00\\\\x02\\\\x05\\\\x00\\\\x00s\\\\x1a\\\\x00\\\\x00\\\\x00\\\\x00\\\\x03\\\\t\\\\x01\\\\x06\\\\x01\\\\x10\\\\x01\\\\r\\\\x01\\\\x12\\\\x02\\\\x13\\\\x01$\\\\x01\\\\x04\\\\x02\\\\t\\\\x01\\\\x0f\\\\x01\\\\x1a\\\\x01\\\\n\\\\x02c\\\\x01\\\\x00\\\\x00\\\\x00\\\\x01\\\\x00\\\\x00\\\\x00\\\\x04\\\\x00\\\\x00\\\\x00C`\\\\x01\\\\x00s=\\\\x00\\\\x00\\\\x00t\\\\x00\\\\x00|\\\\x00\\\\x00t\\\\x01\\\\x00j\\\\x02\\\\x00\\\\x83\\\\x02\\\\x00s$\\\\x00t\\\\x01\\\\x00j\\\\x02\\\\x00|\\\\x00\\\\x00\\\\x83\\\\x01\\\\x00}\\\\x00\\\\x00n\\\\x00\\\\x00t\\\\x01\\\\x00j\\\\x02\\\\x00t\\\\x03\\\\x00|\\\\x00\\\\x00t\\\\x01\\\\x00j\\\\x04\\\\x00\\\\x83\\\\x02\\\\x00\\\\x83\\\\x01\\\\x00S(\\\\x01\\\\x00\\\\x00\\\\x00s\\\\xf5\\\\x02\\\\x00\\\\x00\\\\n    Construct a dtype description list from a given dtype.\\\\n\\\\n    Returns a new dtype object, with the type of all fields in `ndtype` to a\\\\n    boolean type. Field names are not altered.\\\\n\\\\n    Parameters\\\\n    ----------\\\\n    ndtype : dtype\\\\n        The dtype to convert.\\\\n\\\\n    Returns\\\\n    -------\\\\n    result : dtype\\\\n        A dtype that looks like `ndtype`, the type of all fields is boolean.\\\\n\\\\n    Examples\\\\n    --------\\\\n    >>> import numpy.ma as ma\\\\n    >>> dtype = np.dtype({\\\\\\\'names\\\\\\\':[\\\\\\\'foo\\\\\\\', \\\\\\\'bar\\\\\\\'],\\\\n                          \\\\\\\'formats\\\\\\\':[np.float32, np.int]})\\\\n    >>> dtype\\\\n    dtype([(\\\\\\\'foo\\\\\\\', \\\\\\\'<f4\\\\\\\'), (\\\\\\\'bar\\\\\\\', \\\\\\\'<i4\\\\\\\')])\\\\n    >>> ma.make_mask_descr(dtype)\\\\n    dtype([(\\\\\\\'foo\\\\\\\', \\\\\\\'|b1\\\\\\\'), (\\\\\\\'bar\\\\\\\', \\\\\\\'|b1\\\\\\\')])\\\\n    >>> ma.make_mask_descr(np.float32)\\\\n    <type \\\\\\\'numpy.bool_\\\\\\\'>\\\\n\\\\n    (\\\\x05\\\\x00\\\\x00\\\\x00R\\\\xed\\\\x00\\\\x00\\\\x00R\\\\xee\\\\x00\\\\x00\\\\x00R\\\\xe9\\\\x00\\\\x00\\\\x00Rp\\\\x01\\\\x00\\\\x00t\\\\x04\\\\x00\\\\x00\\\\x00bool(\\\\x01\\\\x00\\\\x00\\\\x00R\\\\xfb\\\\x00\\\\x00\\\\x00(\\\\x00\\\\x00\\\\x00\\\\x00(\\\\x00\\\\x00\\\\x00\\\\x00s,\\\\x00\\\\x00\\\\x00lib/python2.7/site-packages/numpy/ma/core.pyRv\\\\x00\\\\x00\\\\x00\\\\x17\\\\x05\\\\x00\\\\x00s\\\\x06\\\\x00\\\\x00\\\\x00\\\\x00\\\\x1f\\\\x12\\\\x01\\\\x12\\\\x01c\\\\x01\\\\x00\\\\x00\\\\x00\\\\x01\\\\x00\\\\x00\\\\x00\\\\x04\\\\x00\\\\x00\\\\x00C`\\\\x01\\\\x00s\\\\x10\\\\x00\\\\x00\\\\x00t\\\\x00\\\\x00|\\\\x00\\\\x00d\\\\x01\\\\x00t\\\\x01\\\\x00\\\\x83\\\\x03\\\\x00S(\\\\x02\\\\x00\\\\x00\\\\x00s0\\\\x05\\\\x00\\\\x00\\\\n    Return the mask of a masked array, or nomask.\\\\n\\\\n    Return the mask of `a` as an ndarray if `a` is a `MaskedArray` and the\\\\n    mask is not `nomask`, else return `nomask`. To guarantee a full array\\\\n    of booleans of the same shape as a, use `getmaskarray`.\\\\n\\\\n    Parameters\\\\n    ----------\\\\n    a : array_like\\\\n        Input `MaskedArray` for which the mask is required.\\\\n\\\\n    See Also\\\\n    --------\\\\n    getdata : Return the data of a masked array as an ndarray.\\\\n    getmaskarray : Return the mask of a masked array, or full array of False.\\\\n\\\\n    Examples\\\\n    --------\\\\n    >>> import numpy.ma as ma\\\\n    >>> a = ma.masked_equal([[1,2],[3,4]], 2)\\\\n    >>> a\\\\n    masked_array(data =\\\\n     [[1 --]\\\\n     [3 4]],\\\\n          mask =\\\\n     [[False  True]\\\\n     [False False]],\\\\n          fill_value=999999)\\\\n    >>> ma.getmask(a)\\\\n    array([[False,  True],\\\\n           [False, False]], dtype=bool)\\\\n\\\\n    Equivalently use the `MaskedArray` `mask` attribute.\\\\n\\\\n    >>> a.mask\\\\n    array([[False,  True],\\\\n           [False, False]], dtype=bool)\\\\n\\\\n    Result when mask == `nomask`\\\\n\\\\n    >>> b = ma.masked_array([[1,2],[3,4]])\\\\n    >>> b\\\\n    masked_array(data =\\\\n     [[1 2]\\\\n     [3 4]],\\\\n          mask =\\\\n     False,\\\\n          fill_value=999999)\\\\n    >>> ma.nomask\\\\n    False\\\\n    >>> ma.getmask(b) == ma.nomask\\\\n    True\\\\n    >>> b.mask == ma.nomask\\\\n    True\\\\n\\\\n    R6\\\\x01\\\\x00\\\\x00(\\\\x02\\\\x00\\\\x00\\\\x00RJ\\\\x01\\\\x00\\\\x00R\\\\x95\\\\x00\\\\x00\\\\x00(\\\\x01\\\\x00\\\\x00\\\\x00R\\\\x1f\\\\x01\\\\x00\\\\x00(\\\\x00\\\\x00\\\\x00\\\\x00(\\\\x00\\\\x00\\\\x00\\\\x00s,\\\\x00\\\\x00\\\\x00lib/python2.7/site-packages/numpy/ma/core.pyRY\\\\x00\\\\x00\\\\x00;\\\\x05\\\\x00\\\\x00s\\\\x02\\\\x00\\\\x00\\\\x00\\\\x00:c\\\\x01\\\\x00\\\\x00\\\\x00\\\\x02\\\\x00\\\\x00\\\\x00\\\\x06\\\\x00\\\\x00\\\\x00C`\\\\x01\\\\x00sC\\\\x00\\\\x00\\\\x00t\\\\x00\\\\x00|\\\\x00\\\\x00\\\\x83\\\\x01\\\\x00}\\\\x01\\\\x00|\\\\x01\\\\x00t\\\\x01\\\\x00k\\\\x08\\\\x00r?\\\\x00t\\\\x02\\\\x00t\\\\x03\\\\x00j\\\\x04\\\\x00|\\\\x00\\\\x00\\\\x83\\\\x01\\\\x00t\\\\x05\\\\x00|\\\\x00\\\\x00d\\\\x01\\\\x00d\\\\x02\\\\x00\\\\x83\\\\x03\\\\x00\\\\x83\\\\x02\\\\x00}\\\\x01\\\\x00n\\\\x00\\\\x00|\\\\x01\\\\x00S(\\\\x03\\\\x00\\\\x00\\\\x00s\\\\x83\\\\x04\\\\x00\\\\x00\\\\n    Return the mask of a masked array, or full boolean array of False.\\\\n\\\\n    Return the mask of `arr` as an ndarray if `arr` is a `MaskedArray` and\\\\n    the mask is not `nomask`, else return a full boolean array of False of\\\\n    the same shape as `arr`.\\\\n\\\\n    Parameters\\\\n    ----------\\\\n    arr : array_like\\\\n        Input `MaskedArray` for which the mask is required.\\\\n\\\\n    See Also\\\\n    --------\\\\n    getmask : Return the mask of a masked array, or nomask.\\\\n    getdata : Return the data of a masked array as an ndarray.\\\\n\\\\n    Examples\\\\n    --------\\\\n    >>> import numpy.ma as ma\\\\n    >>> a = ma.masked_equal([[1,2],[3,4]], 2)\\\\n    >>> a\\\\n    masked_array(data =\\\\n     [[1 --]\\\\n     [3 4]],\\\\n          mask =\\\\n     [[False  True]\\\\n     [False False]],\\\\n          fill_value=999999)\\\\n    >>> ma.getmaskarray(a)\\\\n    array([[False,  True],\\\\n           [False, False]], dtype=bool)\\\\n\\\\n    Result when mask == ``nomask``\\\\n\\\\n    >>> b = ma.masked_array([[1,2],[3,4]])\\\\n    >>> b\\\\n    masked_array(data =\\\\n     [[1 2]\\\\n     [3 4]],\\\\n          mask =\\\\n     False,\\\\n          fill_value=999999)\\\\n    >>> >ma.getmaskarray(b)\\\\n    array([[False, False],\\\\n           [False, False]], dtype=bool)\\\\n\\\\n    R\\\\xe9\\\\x00\\\\x00\\\\x00N(\\\\x07\\\\x00\\\\x00\\\\x00RY\\\\x00\\\\x00\\\\x00R\\\\x95\\\\x00\\\\x00\\\\x00Rw\\\\x00\\\\x00\\\\x00R\\\\xee\\\\x00\\\\x00\\\\x00R\\\\xab\\\\x00\\\\x00\\\\x00RJ\\\\x01\\\\x00\\\\x00R\\\\xc4\\\\x00\\\\x00\\\\x00(\\\\x02\\\\x00\\\\x00\\\\x00R)\\\\x01\\\\x00\\\\x00R3\\\\x01\\\\x00\\\\x00(\\\\x00\\\\x00\\\\x00\\\\x00(\\\\x00\\\\x00\\\\x00\\\\x00s,\\\\x00\\\\x00\\\\x00lib/python2.7/site-packages/numpy/ma/core.pyRZ\\\\x00\\\\x00\\\\x00{\\\\x05\\\\x00\\\\x00s\\\\x08\\\\x00\\\\x00\\\\x00\\\\x001\\\\x0c\\\\x01\\\\x0c\\\\x01\\\\\\\'\\\\x01c\\\\x01\\\\x00\\\\x00\\\\x00\\\\x01\\\\x00\\\\x00\\\\x00\\\\x05\\\\x00\\\\x00\\\\x00C`\\\\x01\\\\x00s-\\\\x00\\\\x00\\\\x00y\\\\x14\\\\x00|\\\\x00\\\\x00j\\\\x00\\\\x00j\\\\x01\\\\x00t\\\\x02\\\\x00k\\\\x08\\\\x00SWn\\\\x12\\\\x00\\\\x04t\\\\x03\\\\x00k\\\\n\\\\x00r(\\\\x00\\\\x01\\\\x01\\\\x01t\\\\x04\\\\x00SXd\\\\x01\\\\x00S(\\\\x02\\\\x00\\\\x00\\\\x00s2\\\\x06\\\\x00\\\\x00\\\\n    Return True if m is a valid, standard mask.\\\\n\\\\n    This function does not check the contents of the input, only that the\\\\n    type is MaskType. In particular, this function returns False if the\\\\n    mask has a flexible dtype.\\\\n\\\\n    Parameters\\\\n    ----------\\\\n    m : array_like\\\\n        Array to test.\\\\n\\\\n    Returns\\\\n    -------\\\\n    result : bool\\\\n        True if `m.dtype.type` is MaskType, False otherwise.\\\\n\\\\n    See Also\\\\n    --------\\\\n    isMaskedArray : Test whether input is an instance of MaskedArray.\\\\n\\\\n    Examples\\\\n    --------\\\\n    >>> import numpy.ma as ma\\\\n    >>> m = ma.masked_equal([0, 1, 0, 2, 3], 0)\\\\n    >>> m\\\\n    masked_array(data = [-- 1 -- 2 3],\\\\n          mask = [ True False  True False False],\\\\n          fill_value=999999)\\\\n    >>> ma.is_mask(m)\\\\n    False\\\\n    >>> ma.is_mask(m.mask)\\\\n    True\\\\n\\\\n    Input must be an ndarray (or have similar attributes)\\\\n    for it to be considered a valid mask.\\\\n\\\\n    >>> m = [False, True, False]\\\\n    >>> ma.is_mask(m)\\\\n    False\\\\n    >>> m = np.array([False, True, False])\\\\n    >>> m\\\\n    array([False,  True, False], dtype=bool)\\\\n    >>> ma.is_mask(m)\\\\n    True\\\\n\\\\n    Arrays with complex dtypes don\\\\\\\'t return True.\\\\n\\\\n    >>> dtype = np.dtype({\\\\\\\'names\\\\\\\':[\\\\\\\'monty\\\\\\\', \\\\\\\'pithon\\\\\\\'],\\\\n                          \\\\\\\'formats\\\\\\\':[np.bool, np.bool]})\\\\n    >>> dtype\\\\n    dtype([(\\\\\\\'monty\\\\\\\', \\\\\\\'|b1\\\\\\\'), (\\\\\\\'pithon\\\\\\\', \\\\\\\'|b1\\\\\\\')])\\\\n    >>> m = np.array([(True, False), (False, True), (True, False)],\\\\n                     dtype=dtype)\\\\n    >>> m\\\\n    array([(True, False), (False, True), (True, False)],\\\\n          dtype=[(\\\\\\\'monty\\\\\\\', \\\\\\\'|b1\\\\\\\'), (\\\\\\\'pithon\\\\\\\', \\\\\\\'|b1\\\\\\\')])\\\\n    >>> ma.is_mask(m)\\\\n    False\\\\n\\\\n    N(\\\\x05\\\\x00\\\\x00\\\\x00R\\\\xe9\\\\x00\\\\x00\\\\x00R&\\\\x01\\\\x00\\\\x00R\\\\x16\\\\x00\\\\x00\\\\x00R0\\\\x01\\\\x00\\\\x00R\\\\x16\\\\x01\\\\x00\\\\x00(\\\\x01\\\\x00\\\\x00\\\\x00R\\\\xde\\\\x00\\\\x00\\\\x00(\\\\x00\\\\x00\\\\x00\\\\x00(\\\\x00\\\\x00\\\\x00\\\\x00s,\\\\x00\\\\x00\\\\x00lib/python2.7/site-packages/numpy/ma/core.pyRf\\\\x00\\\\x00\\\\x00\\\\xb2\\\\x05\\\\x00\\\\x00s\\\\x08\\\\x00\\\\x00\\\\x00\\\\x00>\\\\x03\\\\x01\\\\x14\\\\x01\\\\r\\\\x01c\\\\x04\\\\x00\\\\x00\\\\x00\\\\x05\\\\x00\\\\x00\\\\x00\\\\x06\\\\x00\\\\x00\\\\x00C`\\\\x01\\\\x00s\\\\xcf\\\\x00\\\\x00\\\\x00|\\\\x00\\\\x00t\\\\x00\\\\x00k\\\\x08\\\\x00r\\\\x10\\\\x00t\\\\x00\\\\x00St\\\\x01\\\\x00|\\\\x00\\\\x00t\\\\x02\\\\x00\\\\x83\\\\x02\\\\x00r\\\\x85\\\\x00t\\\\x03\\\\x00|\\\\x00\\\\x00t\\\\x04\\\\x00\\\\x83\\\\x02\\\\x00}\\\\x00\\\\x00t\\\\x05\\\\x00|\\\\x03\\\\x00\\\\x83\\\\x01\\\\x00}\\\\x03\\\\x00|\\\\x00\\\\x00j\\\\x06\\\\x00|\\\\x03\\\\x00k\\\\x02\\\\x00rg\\\\x00|\\\\x01\\\\x00r^\\\\x00|\\\\x00\\\\x00j\\\\x07\\\\x00\\\\x83\\\\x00\\\\x00}\\\\x04\\\\x00q\\\\x82\\\\x00|\\\\x00\\\\x00}\\\\x04\\\\x00q\\\\xa3\\\\x00t\\\\x08\\\\x00j\\\\t\\\\x00|\\\\x00\\\\x00d\\\\x01\\\\x00|\\\\x03\\\\x00d\\\\x02\\\\x00|\\\\x01\\\\x00\\\\x83\\\\x01\\\\x02}\\\\x04\\\\x00n\\\\x1e\\\\x00t\\\\x08\\\\x00j\\\\t\\\\x00t\\\\x03\\\\x00|\\\\x00\\\\x00t\\\\x04\\\\x00\\\\x83\\\\x02\\\\x00d\\\\x01\\\\x00t\\\\n\\\\x00\\\\x83\\\\x01\\\\x01}\\\\x04\\\\x00|\\\\x02\\\\x00r\\\\xc7\\\\x00|\\\\x04\\\\x00j\\\\x06\\\\x00j\\\\x0b\\\\x00\\\\x0cr\\\\xc7\\\\x00|\\\\x04\\\\x00j\\\\x0c\\\\x00\\\\x83\\\\x00\\\\x00\\\\x0cr\\\\xc7\\\\x00t\\\\x00\\\\x00S|\\\\x04\\\\x00Sd\\\\x03\\\\x00S(\\\\x04\\\\x00\\\\x00\\\\x00s\\\\xb9\\\\x08\\\\x00\\\\x00\\\\n    Create a boolean mask from an array.\\\\n\\\\n    Return `m` as a boolean mask, creating a copy if necessary or requested.\\\\n    The function can accept any sequence that is convertible to integers,\\\\n    or ``nomask``.  Does not require that contents must be 0s and 1s, values\\\\n    of 0 are interepreted as False, everything else as True.\\\\n\\\\n    Parameters\\\\n    ----------\\\\n    m : array_like\\\\n        Potential mask.\\\\n    copy : bool, optional\\\\n        Whether to return a copy of `m` (True) or `m` itself (False).\\\\n    shrink : bool, optional\\\\n        Whether to shrink `m` to ``nomask`` if all its values are False.\\\\n    dtype : dtype, optional\\\\n        Data-type of the output mask. By default, the output mask has a\\\\n        dtype of MaskType (bool). If the dtype is flexible, each field has\\\\n        a boolean dtype. This is ignored when `m` is ``nomask``, in which\\\\n        case ``nomask`` is always returned.\\\\n\\\\n    Returns\\\\n    -------\\\\n    result : ndarray\\\\n        A boolean mask derived from `m`.\\\\n\\\\n    Examples\\\\n    --------\\\\n    >>> import numpy.ma as ma\\\\n    >>> m = [True, False, True, True]\\\\n    >>> ma.make_mask(m)\\\\n    array([ True, False,  True,  True], dtype=bool)\\\\n    >>> m = [1, 0, 1, 1]\\\\n    >>> ma.make_mask(m)\\\\n    array([ True, False,  True,  True], dtype=bool)\\\\n    >>> m = [1, 0, 2, -3]\\\\n    >>> ma.make_mask(m)\\\\n    array([ True, False,  True,  True], dtype=bool)\\\\n\\\\n    Effect of the `shrink` parameter.\\\\n\\\\n    >>> m = np.zeros(4)\\\\n    >>> m\\\\n    array([ 0.,  0.,  0.,  0.])\\\\n    >>> ma.make_mask(m)\\\\n    False\\\\n    >>> ma.make_mask(m, shrink=False)\\\\n    array([False, False, False, False], dtype=bool)\\\\n\\\\n    Using a flexible `dtype`.\\\\n\\\\n    >>> m = [1, 0, 1, 1]\\\\n    >>> n = [0, 1, 0, 0]\\\\n    >>> arr = []\\\\n    >>> for man, mouse in zip(m, n):\\\\n    ...     arr.append((man, mouse))\\\\n    >>> arr\\\\n    [(1, 0), (0, 1), (1, 0), (1, 0)]\\\\n    >>> dtype = np.dtype({\\\\\\\'names\\\\\\\':[\\\\\\\'man\\\\\\\', \\\\\\\'mouse\\\\\\\'],\\\\n                          \\\\\\\'formats\\\\\\\':[np.int, np.int]})\\\\n    >>> arr = np.array(arr, dtype=dtype)\\\\n    >>> arr\\\\n    array([(1, 0), (0, 1), (1, 0), (1, 0)],\\\\n          dtype=[(\\\\\\\'man\\\\\\\', \\\\\\\'<i4\\\\\\\'), (\\\\\\\'mouse\\\\\\\', \\\\\\\'<i4\\\\\\\')])\\\\n    >>> ma.make_mask(arr, dtype=dtype)\\\\n    array([(True, False), (False, True), (True, False), (True, False)],\\\\n          dtype=[(\\\\\\\'man\\\\\\\', \\\\\\\'|b1\\\\\\\'), (\\\\\\\'mouse\\\\\\\', \\\\\\\'|b1\\\\\\\')])\\\\n\\\\n    R\\\\xe9\\\\x00\\\\x00\\\\x00R<\\\\x00\\\\x00\\\\x00N(\\\\r\\\\x00\\\\x00\\\\x00R\\\\x95\\\\x00\\\\x00\\\\x00R\\\\xed\\\\x00\\\\x00\\\\x00R\\\\x04\\\\x00\\\\x00\\\\x00RN\\\\x00\\\\x00\\\\x00R4\\\\x01\\\\x00\\\\x00Rv\\\\x00\\\\x00\\\\x00R\\\\xe9\\\\x00\\\\x00\\\\x00R<\\\\x00\\\\x00\\\\x00R\\\\xee\\\\x00\\\\x00\\\\x00R\\\\n\\\\x00\\\\x00\\\\x00R\\\\x16\\\\x00\\\\x00\\\\x00R\\\\xf8\\\\x00\\\\x00\\\\x00R!\\\\x00\\\\x00\\\\x00(\\\\x05\\\\x00\\\\x00\\\\x00R\\\\xde\\\\x00\\\\x00\\\\x00R<\\\\x00\\\\x00\\\\x00t\\\\x06\\\\x00\\\\x00\\\\x00shrinkR\\\\xe9\\\\x00\\\\x00\\\\x00R \\\\x01\\\\x00\\\\x00(\\\\x00\\\\x00\\\\x00\\\\x00(\\\\x00\\\\x00\\\\x00\\\\x00s,\\\\x00\\\\x00\\\\x00lib/python2.7/site-packages/numpy/ma/core.pyRu\\\\x00\\\\x00\\\\x00\\\\xf6\\\\x05\\\\x00\\\\x00s\\\\x1c\\\\x00\\\\x00\\\\x00\\\\x00G\\\\x0c\\\\x01\\\\x04\\\\x01\\\\x0f\\\\x03\\\\x0f\\\\x02\\\\x0c\\\\x01\\\\x0f\\\\x01\\\\x06\\\\x01\\\\x0f\\\\x02\\\\t\\\\x02\\\\x1e\\\\x02\\\\x1e\\\\x02 \\\\x01\\\\x04\\\\x02c\\\\x02\\\\x00\\\\x00\\\\x00\\\\x03\\\\x00\\\\x00\\\\x00\\\\x05\\\\x00\\\\x00\\\\x00C`\\\\x01\\\\x00sC\\\\x00\\\\x00\\\\x00|\\\\x01\\\\x00d\\\\x02\\\\x00k\\\\x08\\\\x00r$\\\\x00t\\\\x01\\\\x00j\\\\x02\\\\x00|\\\\x00\\\\x00d\\\\x01\\\\x00t\\\\x03\\\\x00\\\\x83\\\\x01\\\\x01}\\\\x02\\\\x00n\\\\x1b\\\\x00t\\\\x01\\\\x00j\\\\x02\\\\x00|\\\\x00\\\\x00d\\\\x01\\\\x00t\\\\x04\\\\x00|\\\\x01\\\\x00\\\\x83\\\\x01\\\\x00\\\\x83\\\\x01\\\\x01}\\\\x02\\\\x00|\\\\x02\\\\x00S(\\\\x03\\\\x00\\\\x00\\\\x00s0\\\\x05\\\\x00\\\\x00\\\\n    Return a boolean mask of the given shape, filled with False.\\\\n\\\\n    This function returns a boolean ndarray with all entries False, that can\\\\n    be used in common mask manipulations. If a complex dtype is specified, the\\\\n    type of each field is converted to a boolean type.\\\\n\\\\n    Parameters\\\\n    ----------\\\\n    newshape : tuple\\\\n        A tuple indicating the shape of the mask.\\\\n    dtype : {None, dtype}, optional\\\\n        If None, use a MaskType instance. Otherwise, use a new datatype with\\\\n        the same fields as `dtype`, converted to boolean types.\\\\n\\\\n    Returns\\\\n    -------\\\\n    result : ndarray\\\\n        An ndarray of appropriate shape and dtype, filled with False.\\\\n\\\\n    See Also\\\\n    --------\\\\n    make_mask : Create a boolean mask from an array.\\\\n    make_mask_descr : Construct a dtype description list from a given dtype.\\\\n\\\\n    Examples\\\\n    --------\\\\n    >>> import numpy.ma as ma\\\\n    >>> ma.make_mask_none((3,))\\\\n    array([False, False, False], dtype=bool)\\\\n\\\\n    Defining a more complex dtype.\\\\n\\\\n    >>> dtype = np.dtype({\\\\\\\'names\\\\\\\':[\\\\\\\'foo\\\\\\\', \\\\\\\'bar\\\\\\\'],\\\\n                          \\\\\\\'formats\\\\\\\':[np.float32, np.int]})\\\\n    >>> dtype\\\\n    dtype([(\\\\\\\'foo\\\\\\\', \\\\\\\'<f4\\\\\\\'), (\\\\\\\'bar\\\\\\\', \\\\\\\'<i4\\\\\\\')])\\\\n    >>> ma.make_mask_none((3,), dtype=dtype)\\\\n    array([(False, False), (False, False), (False, False)],\\\\n          dtype=[(\\\\\\\'foo\\\\\\\', \\\\\\\'|b1\\\\\\\'), (\\\\\\\'bar\\\\\\\', \\\\\\\'|b1\\\\\\\')])\\\\n\\\\n    R\\\\xe9\\\\x00\\\\x00\\\\x00N(\\\\x05\\\\x00\\\\x00\\\\x00R\\\\xc4\\\\x00\\\\x00\\\\x00R\\\\xee\\\\x00\\\\x00\\\\x00R\\\\xc0\\\\x00\\\\x00\\\\x00R\\\\x16\\\\x00\\\\x00\\\\x00Rv\\\\x00\\\\x00\\\\x00(\\\\x03\\\\x00\\\\x00\\\\x00t\\\\x08\\\\x00\\\\x00\\\\x00newshapeR\\\\xe9\\\\x00\\\\x00\\\\x00R \\\\x01\\\\x00\\\\x00(\\\\x00\\\\x00\\\\x00\\\\x00(\\\\x00\\\\x00\\\\x00\\\\x00s,\\\\x00\\\\x00\\\\x00lib/python2.7/site-packages/numpy/ma/core.pyRw\\\\x00\\\\x00\\\\x00U\\\\x06\\\\x00\\\\x00s\\\\x08\\\\x00\\\\x00\\\\x00\\\\x00+\\\\x0c\\\\x01\\\\x18\\\\x02\\\\x1b\\\\x01c\\\\x04\\\\x00\\\\x00\\\\x00\\\\x08\\\\x00\\\\x00\\\\x00\\\\x08\\\\x00\\\\x00\\\\x00\\\\x03`\\\\x01\\\\x00sO\\\\x01\\\\x00\\\\x00\\\\x87\\\\x00\\\\x00f\\\\x01\\\\x00d\\\\x01\\\\x00\\\\x86\\\\x00\\\\x00\\\\x89\\\\x00\\\\x00|\\\\x00\\\\x00t\\\\x00\\\\x00k\\\\x08\\\\x00s\\\\\\\'\\\\x00|\\\\x00\\\\x00t\\\\x01\\\\x00k\\\\x08\\\\x00rU\\\\x00t\\\\x02\\\\x00|\\\\x01\\\\x00d\\\\x02\\\\x00t\\\\x03\\\\x00\\\\x83\\\\x03\\\\x00}\\\\x04\\\\x00t\\\\x04\\\\x00|\\\\x01\\\\x00d\\\\x03\\\\x00|\\\\x02\\\\x00d\\\\x04\\\\x00|\\\\x03\\\\x00d\\\\x02\\\\x00|\\\\x04\\\\x00\\\\x83\\\\x01\\\\x03S|\\\\x01\\\\x00t\\\\x00\\\\x00k\\\\x08\\\\x00sm\\\\x00|\\\\x01\\\\x00t\\\\x01\\\\x00k\\\\x08\\\\x00r\\\\x9b\\\\x00t\\\\x02\\\\x00|\\\\x00\\\\x00d\\\\x02\\\\x00t\\\\x03\\\\x00\\\\x83\\\\x03\\\\x00}\\\\x04\\\\x00t\\\\x04\\\\x00|\\\\x00\\\\x00d\\\\x03\\\\x00|\\\\x02\\\\x00d\\\\x04\\\\x00|\\\\x03\\\\x00d\\\\x02\\\\x00|\\\\x04\\\\x00\\\\x83\\\\x01\\\\x03S|\\\\x00\\\\x00|\\\\x01\\\\x00k\\\\x08\\\\x00r\\\\xb7\\\\x00t\\\\x05\\\\x00|\\\\x00\\\\x00\\\\x83\\\\x01\\\\x00r\\\\xb7\\\\x00|\\\\x00\\\\x00St\\\\x02\\\\x00|\\\\x00\\\\x00d\\\\x02\\\\x00d\\\\x06\\\\x00\\\\x83\\\\x03\\\\x00t\\\\x02\\\\x00|\\\\x01\\\\x00d\\\\x02\\\\x00d\\\\x06\\\\x00\\\\x83\\\\x03\\\\x00\\\\x02}\\\\x05\\\\x00}\\\\x06\\\\x00|\\\\x05\\\\x00|\\\\x06\\\\x00k\\\\x03\\\\x00r\\\\x01\\\\x01t\\\\x07\\\\x00d\\\\x05\\\\x00|\\\\x05\\\\x00|\\\\x06\\\\x00f\\\\x02\\\\x00\\\\x16\\\\x83\\\\x01\\\\x00\\\\x82\\\\x01\\\\x00n\\\\x00\\\\x00|\\\\x05\\\\x00j\\\\x08\\\\x00r-\\\\x01t\\\\t\\\\x00j\\\\n\\\\x00|\\\\x00\\\\x00\\\\x83\\\\x01\\\\x00}\\\\x07\\\\x00\\\\x88\\\\x00\\\\x00|\\\\x00\\\\x00|\\\\x01\\\\x00|\\\\x07\\\\x00\\\\x83\\\\x03\\\\x00\\\\x01|\\\\x07\\\\x00St\\\\x04\\\\x00t\\\\x0b\\\\x00j\\\\x0c\\\\x00|\\\\x00\\\\x00|\\\\x01\\\\x00\\\\x83\\\\x02\\\\x00d\\\\x03\\\\x00|\\\\x02\\\\x00d\\\\x04\\\\x00|\\\\x03\\\\x00\\\\x83\\\\x01\\\\x02S(\\\\x07\\\\x00\\\\x00\\\\x00s\\\\x99\\\\x03\\\\x00\\\\x00\\\\n    Combine two masks with the ``logical_or`` operator.\\\\n\\\\n    The result may be a view on `m1` or `m2` if the other is `nomask`\\\\n    (i.e. False).\\\\n\\\\n    Parameters\\\\n    ----------\\\\n    m1, m2 : array_like\\\\n        Input masks.\\\\n    copy : bool, optional\\\\n        If copy is False and one of the inputs is `nomask`, return a view\\\\n        of the other input mask. Defaults to False.\\\\n    shrink : bool, optional\\\\n        Whether to shrink the output to `nomask` if all its values are\\\\n        False. Defaults to True.\\\\n\\\\n    Returns\\\\n    -------\\\\n    mask : output mask\\\\n        The result masks values that are masked in either `m1` or `m2`.\\\\n\\\\n    Raises\\\\n    ------\\\\n    ValueError\\\\n        If `m1` and `m2` have different flexible dtypes.\\\\n\\\\n    Examples\\\\n    --------\\\\n    >>> m1 = np.ma.make_mask([0, 1, 1, 0])\\\\n    >>> m2 = np.ma.make_mask([1, 0, 0, 0])\\\\n    >>> np.ma.mask_or(m1, m2)\\\\n    array([ True,  True,  True, False], dtype=bool)\\\\n\\\\n    c\\\\x03\\\\x00\\\\x00\\\\x00\\\\x06\\\\x00\\\\x00\\\\x00\\\\x06\\\\x00\\\\x00\\\\x00\\\\x13`\\\\x01\\\\x00sm\\\\x00\\\\x00\\\\x00|\\\\x00\\\\x00j\\\\x00\\\\x00j\\\\x01\\\\x00}\\\\x03\\\\x00xZ\\\\x00|\\\\x03\\\\x00D]R\\\\x00}\\\\x04\\\\x00|\\\\x00\\\\x00|\\\\x04\\\\x00\\\\x19}\\\\x05\\\\x00|\\\\x05\\\\x00j\\\\x00\\\\x00j\\\\x01\\\\x00rJ\\\\x00\\\\x88\\\\x00\\\\x00|\\\\x05\\\\x00|\\\\x01\\\\x00|\\\\x04\\\\x00\\\\x19|\\\\x02\\\\x00|\\\\x04\\\\x00\\\\x19\\\\x83\\\\x03\\\\x00\\\\x01q\\\\x13\\\\x00t\\\\x02\\\\x00j\\\\x03\\\\x00|\\\\x05\\\\x00|\\\\x01\\\\x00|\\\\x04\\\\x00\\\\x19|\\\\x02\\\\x00|\\\\x04\\\\x00\\\\x19\\\\x83\\\\x03\\\\x00\\\\x01q\\\\x13\\\\x00Wd\\\\x00\\\\x00S(\\\\x01\\\\x00\\\\x00\\\\x00N(\\\\x04\\\\x00\\\\x00\\\\x00R\\\\xe9\\\\x00\\\\x00\\\\x00R\\\\xf8\\\\x00\\\\x00\\\\x00R;\\\\x01\\\\x00\\\\x00Rs\\\\x00\\\\x00\\\\x00(\\\\x06\\\\x00\\\\x00\\\\x00t\\\\x02\\\\x00\\\\x00\\\\x00m1t\\\\x02\\\\x00\\\\x00\\\\x00m2t\\\\x07\\\\x00\\\\x00\\\\x00newmaskR\\\\xf8\\\\x00\\\\x00\\\\x00R\\\\xfe\\\\x00\\\\x00\\\\x00t\\\\x08\\\\x00\\\\x00\\\\x00current1(\\\\x01\\\\x00\\\\x00\\\\x00t\\\\x12\\\\x00\\\\x00\\\\x00_recursive_mask_or(\\\\x00\\\\x00\\\\x00\\\\x00s,\\\\x00\\\\x00\\\\x00lib/python2.7/site-packages/numpy/ma/core.pyR}\\\\x01\\\\x00\\\\x00\\\\xac\\\\x06\\\\x00\\\\x00s\\\\x0e\\\\x00\\\\x00\\\\x00\\\\x00\\\\x01\\\\x0c\\\\x01\\\\r\\\\x01\\\\n\\\\x01\\\\x0c\\\\x01\\\\x1b\\\\x02\\\\x1f\\\\x01R\\\\xe9\\\\x00\\\\x00\\\\x00R<\\\\x00\\\\x00\\\\x00Rw\\\\x01\\\\x00\\\\x00s\\\\x1e\\\\x00\\\\x00\\\\x00Incompatible dtypes \\\\\\\'%s\\\\\\\'<>\\\\\\\'%s\\\\\\\'N(\\\\r\\\\x00\\\\x00\\\\x00R\\\\x95\\\\x00\\\\x00\\\\x00R\\\\x16\\\\x01\\\\x00\\\\x00RJ\\\\x01\\\\x00\\\\x00R\\\\x16\\\\x00\\\\x00\\\\x00Ru\\\\x00\\\\x00\\\\x00Rf\\\\x00\\\\x00\\\\x00R\\\\xc4\\\\x00\\\\x00\\\\x00R\\\\x17\\\\x01\\\\x00\\\\x00R\\\\xf8\\\\x00\\\\x00\\\\x00R\\\\xee\\\\x00\\\\x00\\\\x00RJ\\\\x00\\\\x00\\\\x00R;\\\\x01\\\\x00\\\\x00Rs\\\\x00\\\\x00\\\\x00(\\\\x08\\\\x00\\\\x00\\\\x00Ry\\\\x01\\\\x00\\\\x00Rz\\\\x01\\\\x00\\\\x00R<\\\\x00\\\\x00\\\\x00Rw\\\\x01\\\\x00\\\\x00R\\\\xe9\\\\x00\\\\x00\\\\x00t\\\\x06\\\\x00\\\\x00\\\\x00dtype1t\\\\x06\\\\x00\\\\x00\\\\x00dtype2R{\\\\x01\\\\x00\\\\x00(\\\\x00\\\\x00\\\\x00\\\\x00(\\\\x01\\\\x00\\\\x00\\\\x00R}\\\\x01\\\\x00\\\\x00s,\\\\x00\\\\x00\\\\x00lib/python2.7/site-packages/numpy/ma/core.pyRx\\\\x00\\\\x00\\\\x00\\\\x87\\\\x06\\\\x00\\\\x00s"\\\\x00\\\\x00\\\\x00\\\\x00%\\\\x0f\\\\n\\\\x18\\\\x01\\\\x12\\\\x01\\\\x1c\\\\x01\\\\x18\\\\x01\\\\x12\\\\x01\\\\x1c\\\\x01\\\\x18\\\\x01\\\\x04\\\\x01%\\\\x01\\\\x0c\\\\x01\\\\x19\\\\x01\\\\t\\\\x01\\\\x0f\\\\x01\\\\x10\\\\x01\\\\x04\\\\x01c\\\\x01\\\\x00\\\\x00\\\\x00\\\\x04\\\\x00\\\\x00\\\\x00\\\\x04\\\\x00\\\\x00\\\\x00\\\\x03`\\\\x01\\\\x00s_\\\\x00\\\\x00\\\\x00d\\\\x01\\\\x00\\\\x84\\\\x00\\\\x00}\\\\x01\\\\x00\\\\x87\\\\x00\\\\x00f\\\\x01\\\\x00d\\\\x02\\\\x00\\\\x86\\\\x00\\\\x00\\\\x89\\\\x00\\\\x00t\\\\x00\\\\x00j\\\\x01\\\\x00|\\\\x00\\\\x00\\\\x83\\\\x01\\\\x00}\\\\x00\\\\x00\\\\x88\\\\x00\\\\x00|\\\\x01\\\\x00|\\\\x00\\\\x00\\\\x83\\\\x01\\\\x00\\\\x83\\\\x01\\\\x00}\\\\x02\\\\x00t\\\\x00\\\\x00j\\\\x02\\\\x00g\\\\x00\\\\x00|\\\\x02\\\\x00D]\\\\x0c\\\\x00}\\\\x03\\\\x00|\\\\x03\\\\x00^\\\\x02\\\\x00qF\\\\x00d\\\\x03\\\\x00t\\\\x03\\\\x00\\\\x83\\\\x01\\\\x01S(\\\\x04\\\\x00\\\\x00\\\\x00sG\\\\x03\\\\x00\\\\x00\\\\n    Returns a completely flattened version of the mask, where nested fields\\\\n    are collapsed.\\\\n\\\\n    Parameters\\\\n    ----------\\\\n    mask : array_like\\\\n        Input array, which will be interpreted as booleans.\\\\n\\\\n    Returns\\\\n    -------\\\\n    flattened_mask : ndarray of bools\\\\n        The flattened input.\\\\n\\\\n    Examples\\\\n    --------\\\\n    >>> mask = np.array([0, 0, 1], dtype=np.bool)\\\\n    >>> flatten_mask(mask)\\\\n    array([False, False,  True], dtype=bool)\\\\n\\\\n    >>> mask = np.array([(0, 0), (0, 1)], dtype=[(\\\\\\\'a\\\\\\\', bool), (\\\\\\\'b\\\\\\\', bool)])\\\\n    >>> flatten_mask(mask)\\\\n    array([False, False, False,  True], dtype=bool)\\\\n\\\\n    >>> mdtype = [(\\\\\\\'a\\\\\\\', bool), (\\\\\\\'b\\\\\\\', [(\\\\\\\'ba\\\\\\\', bool), (\\\\\\\'bb\\\\\\\', bool)])]\\\\n    >>> mask = np.array([(0, (0, 0)), (0, (0, 1))], dtype=mdtype)\\\\n    >>> flatten_mask(mask)\\\\n    array([False, False, False, False, False,  True], dtype=bool)\\\\n\\\\n    c\\\\x01\\\\x00\\\\x00\\\\x00\\\\x03\\\\x00\\\\x00\\\\x00\\\\x05\\\\x00\\\\x00\\\\x00S`\\\\x01\\\\x00s;\\\\x00\\\\x00\\\\x00|\\\\x00\\\\x00j\\\\x00\\\\x00j\\\\x01\\\\x00}\\\\x01\\\\x00|\\\\x01\\\\x00r3\\\\x00g\\\\x00\\\\x00|\\\\x01\\\\x00D]\\\\x16\\\\x00}\\\\x02\\\\x00t\\\\x02\\\\x00|\\\\x00\\\\x00|\\\\x02\\\\x00\\\\x19\\\\x83\\\\x01\\\\x00^\\\\x02\\\\x00q\\\\x19\\\\x00S|\\\\x00\\\\x00Sd\\\\x01\\\\x00S(\\\\x02\\\\x00\\\\x00\\\\x00sC\\\\x00\\\\x00\\\\x00Flatten the mask and returns a (maybe nested) sequence of booleans.N(\\\\x03\\\\x00\\\\x00\\\\x00R\\\\xe9\\\\x00\\\\x00\\\\x00R\\\\xf8\\\\x00\\\\x00\\\\x00RP\\\\x00\\\\x00\\\\x00(\\\\x03\\\\x00\\\\x00\\\\x00R3\\\\x01\\\\x00\\\\x00t\\\\x06\\\\x00\\\\x00\\\\x00mnamesR\\\\xfe\\\\x00\\\\x00\\\\x00(\\\\x00\\\\x00\\\\x00\\\\x00(\\\\x00\\\\x00\\\\x00\\\\x00s,\\\\x00\\\\x00\\\\x00lib/python2.7/site-packages/numpy/ma/core.pyt\\\\t\\\\x00\\\\x00\\\\x00_flatmask\\\\xe8\\\\x06\\\\x00\\\\x00s\\\\x08\\\\x00\\\\x00\\\\x00\\\\x00\\\\x02\\\\x0c\\\\x01\\\\x06\\\\x01!\\\\x02c\\\\x01\\\\x00\\\\x00\\\\x00\\\\x03\\\\x00\\\\x00\\\\x00\\\\x05\\\\x00\\\\x00\\\\x003`\\\\x01\\\\x00se\\\\x00\\\\x00\\\\x00yH\\\\x00xA\\\\x00|\\\\x00\\\\x00D]9\\\\x00}\\\\x01\\\\x00t\\\\x00\\\\x00|\\\\x01\\\\x00d\\\\x01\\\\x00\\\\x83\\\\x02\\\\x00r>\\\\x00x!\\\\x00\\\\x88\\\\x00\\\\x00|\\\\x01\\\\x00\\\\x83\\\\x01\\\\x00D]\\\\x0b\\\\x00}\\\\x02\\\\x00|\\\\x02\\\\x00V\\\\x01q,\\\\x00Wq\\\\n\\\\x00|\\\\x01\\\\x00V\\\\x01q\\\\n\\\\x00WWn\\\\x16\\\\x00\\\\x04t\\\\x01\\\\x00k\\\\n\\\\x00r`\\\\x00\\\\x01\\\\x01\\\\x01|\\\\x00\\\\x00V\\\\x01n\\\\x01\\\\x00Xd\\\\x02\\\\x00S(\\\\x03\\\\x00\\\\x00\\\\x00s.\\\\x00\\\\x00\\\\x00Generates a flattened version of the sequence.t\\\\x08\\\\x00\\\\x00\\\\x00__iter__N(\\\\x02\\\\x00\\\\x00\\\\x00R\\\\xeb\\\\x00\\\\x00\\\\x00R\\\\xca\\\\x00\\\\x00\\\\x00(\\\\x03\\\\x00\\\\x00\\\\x00t\\\\x08\\\\x00\\\\x00\\\\x00sequencet\\\\x07\\\\x00\\\\x00\\\\x00elementR\\\\xd1\\\\x00\\\\x00\\\\x00(\\\\x01\\\\x00\\\\x00\\\\x00t\\\\r\\\\x00\\\\x00\\\\x00_flatsequence(\\\\x00\\\\x00\\\\x00\\\\x00s,\\\\x00\\\\x00\\\\x00lib/python2.7/site-packages/numpy/ma/core.pyR\\\\x85\\\\x01\\\\x00\\\\x00\\\\xf0\\\\x06\\\\x00\\\\x00s\\\\x10\\\\x00\\\\x00\\\\x00\\\\x00\\\\x02\\\\x03\\\\x01\\\\r\\\\x01\\\\x0f\\\\x01\\\\x13\\\\x01\\\\x0c\\\\x02\\\\r\\\\x01\\\\r\\\\x01R\\\\xe9\\\\x00\\\\x00\\\\x00(\\\\x04\\\\x00\\\\x00\\\\x00R\\\\xee\\\\x00\\\\x00\\\\x00R0\\\\x00\\\\x00\\\\x00R\\\\n\\\\x00\\\\x00\\\\x00Rv\\\\x01\\\\x00\\\\x00(\\\\x04\\\\x00\\\\x00\\\\x00R3\\\\x01\\\\x00\\\\x00R\\\\x81\\\\x01\\\\x00\\\\x00t\\\\t\\\\x00\\\\x00\\\\x00flattenedR\\\\x1c\\\\x01\\\\x00\\\\x00(\\\\x00\\\\x00\\\\x00\\\\x00(\\\\x01\\\\x00\\\\x00\\\\x00R\\\\x85\\\\x01\\\\x00\\\\x00s,\\\\x00\\\\x00\\\\x00lib/python2.7/site-packages/numpy/ma/core.pyRP\\\\x00\\\\x00\\\\x00\\\\xc8\\\\x06\\\\x00\\\\x00s\\\\n\\\\x00\\\\x00\\\\x00\\\\x00 \\\\t\\\\x08\\\\x0f\\\\x0c\\\\x0f\\\\x01\\\\x12\\\\x01c\\\\x03\\\\x00\\\\x00\\\\x00\\\\x04\\\\x00\\\\x00\\\\x00\\\\x04\\\\x00\\\\x00\\\\x00C`\\\\x01\\\\x00sE\\\\x00\\\\x00\\\\x00|\\\\x02\\\\x00t\\\\x00\\\\x00j\\\\x01\\\\x00k\\\\x08\\\\x00r\\\\x15\\\\x00i\\\\x00\\\\x00n\\\\n\\\\x00i\\\\x01\\\\x00|\\\\x02\\\\x00d\\\\x01\\\\x006}\\\\x03\\\\x00|\\\\x00\\\\x00t\\\\x02\\\\x00k\\\\t\\\\x00rA\\\\x00|\\\\x00\\\\x00j\\\\x03\\\\x00d\\\\x02\\\\x00|\\\\x01\\\\x00|\\\\x03\\\\x00\\\\x8d\\\\x00\\\\x01St\\\\x02\\\\x00S(\\\\x03\\\\x00\\\\x00\\\\x00s:\\\\x00\\\\x00\\\\x00Check whether there are masked values along the given axist\\\\x08\\\\x00\\\\x00\\\\x00keepdimsRf\\\\x01\\\\x00\\\\x00(\\\\x04\\\\x00\\\\x00\\\\x00R\\\\xee\\\\x00\\\\x00\\\\x00R\\\\t\\\\x00\\\\x00\\\\x00R\\\\x95\\\\x00\\\\x00\\\\x00R\\\\x1b\\\\x00\\\\x00\\\\x00(\\\\x04\\\\x00\\\\x00\\\\x00R3\\\\x01\\\\x00\\\\x00Rf\\\\x01\\\\x00\\\\x00R\\\\x87\\\\x01\\\\x00\\\\x00RS\\\\x01\\\\x00\\\\x00(\\\\x00\\\\x00\\\\x00\\\\x00(\\\\x00\\\\x00\\\\x00\\\\x00s,\\\\x00\\\\x00\\\\x00lib/python2.7/site-packages/numpy/ma/core.pyt\\\\x10\\\\x00\\\\x00\\\\x00_check_mask_axis\\\\x01\\\\x07\\\\x00\\\\x00s\\\\x08\\\\x00\\\\x00\\\\x00\\\\x00\\\\x02"\\\\x01\\\\x0c\\\\x01\\\\x13\\\\x01c\\\\x03\\\\x00\\\\x00\\\\x00\\\\x08\\\\x00\\\\x00\\\\x00\\\\x06\\\\x00\\\\x00\\\\x00C`\\\\x01\\\\x00s\\\\xb7\\\\x00\\\\x00\\\\x00t\\\\x00\\\\x00|\\\\x00\\\\x00\\\\x83\\\\x01\\\\x00}\\\\x03\\\\x00t\\\\x01\\\\x00j\\\\x02\\\\x00|\\\\x01\\\\x00d\\\\x01\\\\x00|\\\\x02\\\\x00d\\\\x02\\\\x00t\\\\x03\\\\x00\\\\x83\\\\x01\\\\x02}\\\\x01\\\\x00|\\\\x03\\\\x00j\\\\x04\\\\x00|\\\\x01\\\\x00j\\\\x04\\\\x00\\\\x02}\\\\x04\\\\x00}\\\\x05\\\\x00|\\\\x04\\\\x00re\\\\x00|\\\\x04\\\\x00|\\\\x05\\\\x00k\\\\x03\\\\x00re\\\\x00t\\\\x05\\\\x00d\\\\x03\\\\x00|\\\\x04\\\\x00|\\\\x05\\\\x00f\\\\x02\\\\x00\\\\x16\\\\x83\\\\x01\\\\x00\\\\x82\\\\x01\\\\x00n\\\\x00\\\\x00t\\\\x06\\\\x00|\\\\x01\\\\x00d\\\\x04\\\\x00\\\\x83\\\\x02\\\\x00r\\\\x95\\\\x00t\\\\x07\\\\x00|\\\\x03\\\\x00|\\\\x01\\\\x00j\\\\x08\\\\x00\\\\x83\\\\x02\\\\x00}\\\\x03\\\\x00t\\\\t\\\\x00|\\\\x01\\\\x00\\\\x83\\\\x01\\\\x00}\\\\x06\\\\x00n\\\\x06\\\\x00t\\\\n\\\\x00}\\\\x06\\\\x00|\\\\x01\\\\x00j\\\\x0b\\\\x00|\\\\x06\\\\x00\\\\x83\\\\x01\\\\x00}\\\\x07\\\\x00|\\\\x03\\\\x00|\\\\x07\\\\x00_\\\\x0c\\\\x00|\\\\x07\\\\x00S(\\\\x05\\\\x00\\\\x00\\\\x00st\\\\x0b\\\\x00\\\\x00\\\\n    Mask an array where a condition is met.\\\\n\\\\n    Return `a` as an array masked where `condition` is True.\\\\n    Any masked values of `a` or `condition` are also masked in the output.\\\\n\\\\n    Parameters\\\\n    ----------\\\\n    condition : array_like\\\\n        Masking condition.  When `condition` tests floating point values for\\\\n        equality, consider using ``masked_values`` instead.\\\\n    a : array_like\\\\n        Array to mask.\\\\n    copy : bool\\\\n        If True (default) make a copy of `a` in the result.  If False modify\\\\n        `a` in place and return a view.\\\\n\\\\n    Returns\\\\n    -------\\\\n    result : MaskedArray\\\\n        The result of masking `a` where `condition` is True.\\\\n\\\\n    See Also\\\\n    --------\\\\n    masked_values : Mask using floating point equality.\\\\n    masked_equal : Mask where equal to a given value.\\\\n    masked_not_equal : Mask where `not` equal to a given value.\\\\n    masked_less_equal : Mask where less than or equal to a given value.\\\\n    masked_greater_equal : Mask where greater than or equal to a given value.\\\\n    masked_less : Mask where less than a given value.\\\\n    masked_greater : Mask where greater than a given value.\\\\n    masked_inside : Mask inside a given interval.\\\\n    masked_outside : Mask outside a given interval.\\\\n    masked_invalid : Mask invalid values (NaNs or infs).\\\\n\\\\n    Examples\\\\n    --------\\\\n    >>> import numpy.ma as ma\\\\n    >>> a = np.arange(4)\\\\n    >>> a\\\\n    array([0, 1, 2, 3])\\\\n    >>> ma.masked_where(a <= 2, a)\\\\n    masked_array(data = [-- -- -- 3],\\\\n          mask = [ True  True  True False],\\\\n          fill_value=999999)\\\\n\\\\n    Mask array `b` conditional on `a`.\\\\n\\\\n    >>> b = [\\\\\\\'a\\\\\\\', \\\\\\\'b\\\\\\\', \\\\\\\'c\\\\\\\', \\\\\\\'d\\\\\\\']\\\\n    >>> ma.masked_where(a == 2, b)\\\\n    masked_array(data = [a b -- d],\\\\n          mask = [False False  True False],\\\\n          fill_value=N/A)\\\\n\\\\n    Effect of the `copy` argument.\\\\n\\\\n    >>> c = ma.masked_where(a <= 2, a)\\\\n    >>> c\\\\n    masked_array(data = [-- -- -- 3],\\\\n          mask = [ True  True  True False],\\\\n          fill_value=999999)\\\\n    >>> c[0] = 99\\\\n    >>> c\\\\n    masked_array(data = [99 -- -- 3],\\\\n          mask = [False  True  True False],\\\\n          fill_value=999999)\\\\n    >>> a\\\\n    array([0, 1, 2, 3])\\\\n    >>> c = ma.masked_where(a <= 2, a, copy=False)\\\\n    >>> c[0] = 99\\\\n    >>> c\\\\n    masked_array(data = [99 -- -- 3],\\\\n          mask = [False  True  True False],\\\\n          fill_value=999999)\\\\n    >>> a\\\\n    array([99,  1,  2,  3])\\\\n\\\\n    When `condition` or `a` contain masked values.\\\\n\\\\n    >>> a = np.arange(4)\\\\n    >>> a = ma.masked_where(a == 2, a)\\\\n    >>> a\\\\n    masked_array(data = [0 1 -- 3],\\\\n          mask = [False False  True False],\\\\n          fill_value=999999)\\\\n    >>> b = np.arange(4)\\\\n    >>> b = ma.masked_where(b == 0, b)\\\\n    >>> b\\\\n    masked_array(data = [-- 1 2 3],\\\\n          mask = [ True False False False],\\\\n          fill_value=999999)\\\\n    >>> ma.masked_where(a == 3, b)\\\\n    masked_array(data = [-- 1 -- --],\\\\n          mask = [ True False  True  True],\\\\n          fill_value=999999)\\\\n\\\\n    R<\\\\x00\\\\x00\\\\x00R.\\\\x01\\\\x00\\\\x00sF\\\\x00\\\\x00\\\\x00Inconsistant shape between the condition and the input (got %s and %s)R6\\\\x01\\\\x00\\\\x00(\\\\r\\\\x00\\\\x00\\\\x00Ru\\\\x00\\\\x00\\\\x00R\\\\xee\\\\x00\\\\x00\\\\x00R\\\\n\\\\x00\\\\x00\\\\x00R4\\\\x01\\\\x00\\\\x00R\\\\xab\\\\x00\\\\x00\\\\x00t\\\\n\\\\x00\\\\x00\\\\x00IndexErrorR\\\\xeb\\\\x00\\\\x00\\\\x00Rx\\\\x00\\\\x00\\\\x00R6\\\\x01\\\\x00\\\\x00R&\\\\x01\\\\x00\\\\x00R\\\\x17\\\\x00\\\\x00\\\\x00R1\\\\x01\\\\x00\\\\x00R3\\\\x01\\\\x00\\\\x00(\\\\x08\\\\x00\\\\x00\\\\x00t\\\\t\\\\x00\\\\x00\\\\x00conditionR\\\\x1f\\\\x01\\\\x00\\\\x00R<\\\\x00\\\\x00\\\\x00t\\\\x04\\\\x00\\\\x00\\\\x00condt\\\\x06\\\\x00\\\\x00\\\\x00cshapet\\\\x06\\\\x00\\\\x00\\\\x00ashapeR,\\\\x01\\\\x00\\\\x00R \\\\x01\\\\x00\\\\x00(\\\\x00\\\\x00\\\\x00\\\\x00(\\\\x00\\\\x00\\\\x00\\\\x00s,\\\\x00\\\\x00\\\\x00lib/python2.7/site-packages/numpy/ma/core.pyR\\\\x88\\\\x00\\\\x00\\\\x00\\\\r\\\\x07\\\\x00\\\\x00s\\\\x1a\\\\x00\\\\x00\\\\x00\\\\x00c\\\\x0c\\\\x01\\\\x1b\\\\x02\\\\x13\\\\x01\\\\x12\\\\x01\\\\x06\\\\x01\\\\x13\\\\x01\\\\x0f\\\\x01\\\\x12\\\\x01\\\\x0f\\\\x02\\\\x06\\\\x01\\\\x0f\\\\x02\\\\t\\\\x01c\\\\x03\\\\x00\\\\x00\\\\x00\\\\x03\\\\x00\\\\x00\\\\x00\\\\x05\\\\x00\\\\x00\\\\x00C`\\\\x01\\\\x00s\\\\x1c\\\\x00\\\\x00\\\\x00t\\\\x00\\\\x00t\\\\x01\\\\x00|\\\\x00\\\\x00|\\\\x01\\\\x00\\\\x83\\\\x02\\\\x00|\\\\x00\\\\x00d\\\\x01\\\\x00|\\\\x02\\\\x00\\\\x83\\\\x02\\\\x01S(\\\\x02\\\\x00\\\\x00\\\\x00s\\\\xe2\\\\x01\\\\x00\\\\x00\\\\n    Mask an array where greater than a given value.\\\\n\\\\n    This function is a shortcut to ``masked_where``, with\\\\n    `condition` = (x > value).\\\\n\\\\n    See Also\\\\n    --------\\\\n    masked_where : Mask where a condition is met.\\\\n\\\\n    Examples\\\\n    --------\\\\n    >>> import numpy.ma as ma\\\\n    >>> a = np.arange(4)\\\\n    >>> a\\\\n    array([0, 1, 2, 3])\\\\n    >>> ma.masked_greater(a, 2)\\\\n    masked_array(data = [0 1 2 --],\\\\n          mask = [False False False  True],\\\\n          fill_value=999999)\\\\n\\\\n    R<\\\\x00\\\\x00\\\\x00(\\\\x02\\\\x00\\\\x00\\\\x00R\\\\x88\\\\x00\\\\x00\\\\x00R[\\\\x00\\\\x00\\\\x00(\\\\x03\\\\x00\\\\x00\\\\x00R<\\\\x01\\\\x00\\\\x00t\\\\x05\\\\x00\\\\x00\\\\x00valueR<\\\\x00\\\\x00\\\\x00(\\\\x00\\\\x00\\\\x00\\\\x00(\\\\x00\\\\x00\\\\x00\\\\x00s,\\\\x00\\\\x00\\\\x00lib/python2.7/site-packages/numpy/ma/core.pyR|\\\\x00\\\\x00\\\\x00\\\\x82\\\\x07\\\\x00\\\\x00s\\\\x02\\\\x00\\\\x00\\\\x00\\\\x00\\\\x17c\\\\x03\\\\x00\\\\x00\\\\x00\\\\x03\\\\x00\\\\x00\\\\x00\\\\x05\\\\x00\\\\x00\\\\x00C`\\\\x01\\\\x00s\\\\x1c\\\\x00\\\\x00\\\\x00t\\\\x00\\\\x00t\\\\x01\\\\x00|\\\\x00\\\\x00|\\\\x01\\\\x00\\\\x83\\\\x02\\\\x00|\\\\x00\\\\x00d\\\\x01\\\\x00|\\\\x02\\\\x00\\\\x83\\\\x02\\\\x01S(\\\\x02\\\\x00\\\\x00\\\\x00s\\\\xf6\\\\x01\\\\x00\\\\x00\\\\n    Mask an array where greater than or equal to a given value.\\\\n\\\\n    This function is a shortcut to ``masked_where``, with\\\\n    `condition` = (x >= value).\\\\n\\\\n    See Also\\\\n    --------\\\\n    masked_where : Mask where a condition is met.\\\\n\\\\n    Examples\\\\n    --------\\\\n    >>> import numpy.ma as ma\\\\n    >>> a = np.arange(4)\\\\n    >>> a\\\\n    array([0, 1, 2, 3])\\\\n    >>> ma.masked_greater_equal(a, 2)\\\\n    masked_array(data = [0 1 -- --],\\\\n          mask = [False False  True  True],\\\\n          fill_value=999999)\\\\n\\\\n    R<\\\\x00\\\\x00\\\\x00(\\\\x02\\\\x00\\\\x00\\\\x00R\\\\x88\\\\x00\\\\x00\\\\x00R\\\\\\\\\\\\x00\\\\x00\\\\x00(\\\\x03\\\\x00\\\\x00\\\\x00R<\\\\x01\\\\x00\\\\x00R\\\\x8e\\\\x01\\\\x00\\\\x00R<\\\\x00\\\\x00\\\\x00(\\\\x00\\\\x00\\\\x00\\\\x00(\\\\x00\\\\x00\\\\x00\\\\x00s,\\\\x00\\\\x00\\\\x00lib/python2.7/site-packages/numpy/ma/core.pyR}\\\\x00\\\\x00\\\\x00\\\\x9c\\\\x07\\\\x00\\\\x00s\\\\x02\\\\x00\\\\x00\\\\x00\\\\x00\\\\x17c\\\\x03\\\\x00\\\\x00\\\\x00\\\\x03\\\\x00\\\\x00\\\\x00\\\\x05\\\\x00\\\\x00\\\\x00C`\\\\x01\\\\x00s\\\\x1c\\\\x00\\\\x00\\\\x00t\\\\x00\\\\x00t\\\\x01\\\\x00|\\\\x00\\\\x00|\\\\x01\\\\x00\\\\x83\\\\x02\\\\x00|\\\\x00\\\\x00d\\\\x01\\\\x00|\\\\x02\\\\x00\\\\x83\\\\x02\\\\x01S(\\\\x02\\\\x00\\\\x00\\\\x00s\\\\xdd\\\\x01\\\\x00\\\\x00\\\\n    Mask an array where less than a given value.\\\\n\\\\n    This function is a shortcut to ``masked_where``, with\\\\n    `condition` = (x < value).\\\\n\\\\n    See Also\\\\n    --------\\\\n    masked_where : Mask where a condition is met.\\\\n\\\\n    Examples\\\\n    --------\\\\n    >>> import numpy.ma as ma\\\\n    >>> a = np.arange(4)\\\\n    >>> a\\\\n    array([0, 1, 2, 3])\\\\n    >>> ma.masked_less(a, 2)\\\\n    masked_array(data = [-- -- 2 3],\\\\n          mask = [ True  True False False],\\\\n          fill_value=999999)\\\\n\\\\n    R<\\\\x00\\\\x00\\\\x00(\\\\x02\\\\x00\\\\x00\\\\x00R\\\\x88\\\\x00\\\\x00\\\\x00Rj\\\\x00\\\\x00\\\\x00(\\\\x03\\\\x00\\\\x00\\\\x00R<\\\\x01\\\\x00\\\\x00R\\\\x8e\\\\x01\\\\x00\\\\x00R<\\\\x00\\\\x00\\\\x00(\\\\x00\\\\x00\\\\x00\\\\x00(\\\\x00\\\\x00\\\\x00\\\\x00s,\\\\x00\\\\x00\\\\x00lib/python2.7/site-packages/numpy/ma/core.pyR\\\\x80\\\\x00\\\\x00\\\\x00\\\\xb6\\\\x07\\\\x00\\\\x00s\\\\x02\\\\x00\\\\x00\\\\x00\\\\x00\\\\x17c\\\\x03\\\\x00\\\\x00\\\\x00\\\\x03\\\\x00\\\\x00\\\\x00\\\\x05\\\\x00\\\\x00\\\\x00C`\\\\x01\\\\x00s\\\\x1c\\\\x00\\\\x00\\\\x00t\\\\x00\\\\x00t\\\\x01\\\\x00|\\\\x00\\\\x00|\\\\x01\\\\x00\\\\x83\\\\x02\\\\x00|\\\\x00\\\\x00d\\\\x01\\\\x00|\\\\x02\\\\x00\\\\x83\\\\x02\\\\x01S(\\\\x02\\\\x00\\\\x00\\\\x00s\\\\xf1\\\\x01\\\\x00\\\\x00\\\\n    Mask an array where less than or equal to a given value.\\\\n\\\\n    This function is a shortcut to ``masked_where``, with\\\\n    `condition` = (x <= value).\\\\n\\\\n    See Also\\\\n    --------\\\\n    masked_where : Mask where a condition is met.\\\\n\\\\n    Examples\\\\n    --------\\\\n    >>> import numpy.ma as ma\\\\n    >>> a = np.arange(4)\\\\n    >>> a\\\\n    array([0, 1, 2, 3])\\\\n    >>> ma.masked_less_equal(a, 2)\\\\n    masked_array(data = [-- -- -- 3],\\\\n          mask = [ True  True  True False],\\\\n          fill_value=999999)\\\\n\\\\n    R<\\\\x00\\\\x00\\\\x00(\\\\x02\\\\x00\\\\x00\\\\x00R\\\\x88\\\\x00\\\\x00\\\\x00Rk\\\\x00\\\\x00\\\\x00(\\\\x03\\\\x00\\\\x00\\\\x00R<\\\\x01\\\\x00\\\\x00R\\\\x8e\\\\x01\\\\x00\\\\x00R<\\\\x00\\\\x00\\\\x00(\\\\x00\\\\x00\\\\x00\\\\x00(\\\\x00\\\\x00\\\\x00\\\\x00s,\\\\x00\\\\x00\\\\x00lib/python2.7/site-packages/numpy/ma/core.pyR\\\\x81\\\\x00\\\\x00\\\\x00\\\\xd0\\\\x07\\\\x00\\\\x00s\\\\x02\\\\x00\\\\x00\\\\x00\\\\x00\\\\x17c\\\\x03\\\\x00\\\\x00\\\\x00\\\\x03\\\\x00\\\\x00\\\\x00\\\\x05\\\\x00\\\\x00\\\\x00C`\\\\x01\\\\x00s\\\\x1c\\\\x00\\\\x00\\\\x00t\\\\x00\\\\x00t\\\\x01\\\\x00|\\\\x00\\\\x00|\\\\x01\\\\x00\\\\x83\\\\x02\\\\x00|\\\\x00\\\\x00d\\\\x01\\\\x00|\\\\x02\\\\x00\\\\x83\\\\x02\\\\x01S(\\\\x02\\\\x00\\\\x00\\\\x00s\\\\xe9\\\\x01\\\\x00\\\\x00\\\\n    Mask an array where `not` equal to a given value.\\\\n\\\\n    This function is a shortcut to ``masked_where``, with\\\\n    `condition` = (x != value).\\\\n\\\\n    See Also\\\\n    --------\\\\n    masked_where : Mask where a condition is met.\\\\n\\\\n    Examples\\\\n    --------\\\\n    >>> import numpy.ma as ma\\\\n    >>> a = np.arange(4)\\\\n    >>> a\\\\n    array([0, 1, 2, 3])\\\\n    >>> ma.masked_not_equal(a, 2)\\\\n    masked_array(data = [-- -- 2 --],\\\\n          mask = [ True  True False  True],\\\\n          fill_value=999999)\\\\n\\\\n    R<\\\\x00\\\\x00\\\\x00(\\\\x02\\\\x00\\\\x00\\\\x00R\\\\x88\\\\x00\\\\x00\\\\x00R\\\\x97\\\\x00\\\\x00\\\\x00(\\\\x03\\\\x00\\\\x00\\\\x00R<\\\\x01\\\\x00\\\\x00R\\\\x8e\\\\x01\\\\x00\\\\x00R<\\\\x00\\\\x00\\\\x00(\\\\x00\\\\x00\\\\x00\\\\x00(\\\\x00\\\\x00\\\\x00\\\\x00s,\\\\x00\\\\x00\\\\x00lib/python2.7/site-packages/numpy/ma/core.pyR\\\\x82\\\\x00\\\\x00\\\\x00\\\\xea\\\\x07\\\\x00\\\\x00s\\\\x02\\\\x00\\\\x00\\\\x00\\\\x00\\\\x17c\\\\x03\\\\x00\\\\x00\\\\x00\\\\x04\\\\x00\\\\x00\\\\x00\\\\x05\\\\x00\\\\x00\\\\x00C`\\\\x01\\\\x00s+\\\\x00\\\\x00\\\\x00t\\\\x00\\\\x00t\\\\x01\\\\x00|\\\\x00\\\\x00|\\\\x01\\\\x00\\\\x83\\\\x02\\\\x00|\\\\x00\\\\x00d\\\\x01\\\\x00|\\\\x02\\\\x00\\\\x83\\\\x02\\\\x01}\\\\x03\\\\x00|\\\\x01\\\\x00|\\\\x03\\\\x00_\\\\x02\\\\x00|\\\\x03\\\\x00S(\\\\x02\\\\x00\\\\x00\\\\x00sa\\\\x02\\\\x00\\\\x00\\\\n    Mask an array where equal to a given value.\\\\n\\\\n    This function is a shortcut to ``masked_where``, with\\\\n    `condition` = (x == value).  For floating point arrays,\\\\n    consider using ``masked_values(x, value)``.\\\\n\\\\n    See Also\\\\n    --------\\\\n    masked_where : Mask where a condition is met.\\\\n    masked_values : Mask using floating point equality.\\\\n\\\\n    Examples\\\\n    --------\\\\n    >>> import numpy.ma as ma\\\\n    >>> a = np.arange(4)\\\\n    >>> a\\\\n    array([0, 1, 2, 3])\\\\n    >>> ma.masked_equal(a, 2)\\\\n    masked_array(data = [0 1 -- 3],\\\\n          mask = [False False  True False],\\\\n          fill_value=999999)\\\\n\\\\n    R<\\\\x00\\\\x00\\\\x00(\\\\x03\\\\x00\\\\x00\\\\x00R\\\\x88\\\\x00\\\\x00\\\\x00RK\\\\x00\\\\x00\\\\x00R\\\\x1b\\\\x01\\\\x00\\\\x00(\\\\x04\\\\x00\\\\x00\\\\x00R<\\\\x01\\\\x00\\\\x00R\\\\x8e\\\\x01\\\\x00\\\\x00R<\\\\x00\\\\x00\\\\x00t\\\\x06\\\\x00\\\\x00\\\\x00output(\\\\x00\\\\x00\\\\x00\\\\x00(\\\\x00\\\\x00\\\\x00\\\\x00s,\\\\x00\\\\x00\\\\x00lib/python2.7/site-packages/numpy/ma/core.pyR{\\\\x00\\\\x00\\\\x00\\\\x04\\\\x08\\\\x00\\\\x00s\\\\x06\\\\x00\\\\x00\\\\x00\\\\x00\\\\x19\\\\x1e\\\\x01\\\\t\\\\x01c\\\\x04\\\\x00\\\\x00\\\\x00\\\\x06\\\\x00\\\\x00\\\\x00\\\\x05\\\\x00\\\\x00\\\\x00C`\\\\x01\\\\x00sQ\\\\x00\\\\x00\\\\x00|\\\\x02\\\\x00|\\\\x01\\\\x00k\\\\x00\\\\x00r\\\\x1c\\\\x00|\\\\x02\\\\x00|\\\\x01\\\\x00\\\\x02}\\\\x01\\\\x00}\\\\x02\\\\x00n\\\\x00\\\\x00t\\\\x00\\\\x00|\\\\x00\\\\x00\\\\x83\\\\x01\\\\x00}\\\\x04\\\\x00|\\\\x04\\\\x00|\\\\x01\\\\x00k\\\\x05\\\\x00|\\\\x04\\\\x00|\\\\x02\\\\x00k\\\\x01\\\\x00@}\\\\x05\\\\x00t\\\\x01\\\\x00|\\\\x05\\\\x00|\\\\x00\\\\x00d\\\\x01\\\\x00|\\\\x03\\\\x00\\\\x83\\\\x02\\\\x01S(\\\\x02\\\\x00\\\\x00\\\\x00sw\\\\x03\\\\x00\\\\x00\\\\n    Mask an array inside a given interval.\\\\n\\\\n    Shortcut to ``masked_where``, where `condition` is True for `x` inside\\\\n    the interval [v1,v2] (v1 <= x <= v2).  The boundaries `v1` and `v2`\\\\n    can be given in either order.\\\\n\\\\n    See Also\\\\n    --------\\\\n    masked_where : Mask where a condition is met.\\\\n\\\\n    Notes\\\\n    -----\\\\n    The array `x` is prefilled with its filling value.\\\\n\\\\n    Examples\\\\n    --------\\\\n    >>> import numpy.ma as ma\\\\n    >>> x = [0.31, 1.2, 0.01, 0.2, -0.4, -1.1]\\\\n    >>> ma.masked_inside(x, -0.3, 0.3)\\\\n    masked_array(data = [0.31 1.2 -- -- -0.4 -1.1],\\\\n          mask = [False False  True  True False False],\\\\n          fill_value=1e+20)\\\\n\\\\n    The order of `v1` and `v2` doesn\\\\\\\'t matter.\\\\n\\\\n    >>> ma.masked_inside(x, 0.3, -0.3)\\\\n    masked_array(data = [0.31 1.2 -- -- -0.4 -1.1],\\\\n          mask = [False False  True  True False False],\\\\n          fill_value=1e+20)\\\\n\\\\n    R<\\\\x00\\\\x00\\\\x00(\\\\x02\\\\x00\\\\x00\\\\x00RN\\\\x00\\\\x00\\\\x00R\\\\x88\\\\x00\\\\x00\\\\x00(\\\\x06\\\\x00\\\\x00\\\\x00R<\\\\x01\\\\x00\\\\x00t\\\\x02\\\\x00\\\\x00\\\\x00v1t\\\\x02\\\\x00\\\\x00\\\\x00v2R<\\\\x00\\\\x00\\\\x00t\\\\x02\\\\x00\\\\x00\\\\x00xfR\\\\x8a\\\\x01\\\\x00\\\\x00(\\\\x00\\\\x00\\\\x00\\\\x00(\\\\x00\\\\x00\\\\x00\\\\x00s,\\\\x00\\\\x00\\\\x00lib/python2.7/site-packages/numpy/ma/core.pyR~\\\\x00\\\\x00\\\\x00"\\\\x08\\\\x00\\\\x00s\\\\n\\\\x00\\\\x00\\\\x00\\\\x00!\\\\x0c\\\\x01\\\\x10\\\\x01\\\\x0c\\\\x01\\\\x16\\\\x01c\\\\x04\\\\x00\\\\x00\\\\x00\\\\x06\\\\x00\\\\x00\\\\x00\\\\x05\\\\x00\\\\x00\\\\x00C`\\\\x01\\\\x00sQ\\\\x00\\\\x00\\\\x00|\\\\x02\\\\x00|\\\\x01\\\\x00k\\\\x00\\\\x00r\\\\x1c\\\\x00|\\\\x02\\\\x00|\\\\x01\\\\x00\\\\x02}\\\\x01\\\\x00}\\\\x02\\\\x00n\\\\x00\\\\x00t\\\\x00\\\\x00|\\\\x00\\\\x00\\\\x83\\\\x01\\\\x00}\\\\x04\\\\x00|\\\\x04\\\\x00|\\\\x01\\\\x00k\\\\x00\\\\x00|\\\\x04\\\\x00|\\\\x02\\\\x00k\\\\x04\\\\x00B}\\\\x05\\\\x00t\\\\x01\\\\x00|\\\\x05\\\\x00|\\\\x00\\\\x00d\\\\x01\\\\x00|\\\\x03\\\\x00\\\\x83\\\\x02\\\\x01S(\\\\x02\\\\x00\\\\x00\\\\x00st\\\\x03\\\\x00\\\\x00\\\\n    Mask an array outside a given interval.\\\\n\\\\n    Shortcut to ``masked_where``, where `condition` is True for `x` outside\\\\n    the interval [v1,v2] (x < v1)|(x > v2).\\\\n    The boundaries `v1` and `v2` can be given in either order.\\\\n\\\\n    See Also\\\\n    --------\\\\n    masked_where : Mask where a condition is met.\\\\n\\\\n    Notes\\\\n    -----\\\\n    The array `x` is prefilled with its filling value.\\\\n\\\\n    Examples\\\\n    --------\\\\n    >>> import numpy.ma as ma\\\\n    >>> x = [0.31, 1.2, 0.01, 0.2, -0.4, -1.1]\\\\n    >>> ma.masked_outside(x, -0.3, 0.3)\\\\n    masked_array(data = [-- -- 0.01 0.2 -- --],\\\\n          mask = [ True  True False False  True  True],\\\\n          fill_value=1e+20)\\\\n\\\\n    The order of `v1` and `v2` doesn\\\\\\\'t matter.\\\\n\\\\n    >>> ma.masked_outside(x, 0.3, -0.3)\\\\n    masked_array(data = [-- -- 0.01 0.2 -- --],\\\\n          mask = [ True  True False False  True  True],\\\\n          fill_value=1e+20)\\\\n\\\\n    R<\\\\x00\\\\x00\\\\x00(\\\\x02\\\\x00\\\\x00\\\\x00RN\\\\x00\\\\x00\\\\x00R\\\\x88\\\\x00\\\\x00\\\\x00(\\\\x06\\\\x00\\\\x00\\\\x00R<\\\\x01\\\\x00\\\\x00R\\\\x90\\\\x01\\\\x00\\\\x00R\\\\x91\\\\x01\\\\x00\\\\x00R<\\\\x00\\\\x00\\\\x00R\\\\x92\\\\x01\\\\x00\\\\x00R\\\\x8a\\\\x01\\\\x00\\\\x00(\\\\x00\\\\x00\\\\x00\\\\x00(\\\\x00\\\\x00\\\\x00\\\\x00s,\\\\x00\\\\x00\\\\x00lib/python2.7/site-packages/numpy/ma/core.pyR\\\\x84\\\\x00\\\\x00\\\\x00J\\\\x08\\\\x00\\\\x00s\\\\n\\\\x00\\\\x00\\\\x00\\\\x00!\\\\x0c\\\\x01\\\\x10\\\\x01\\\\x0c\\\\x01\\\\x16\\\\x01c\\\\x04\\\\x00\\\\x00\\\\x00\\\\x06\\\\x00\\\\x00\\\\x00\\\\x08\\\\x00\\\\x00\\\\x00C`\\\\x01\\\\x00s\\\\x85\\\\x00\\\\x00\\\\x00t\\\\x00\\\\x00|\\\\x00\\\\x00\\\\x83\\\\x01\\\\x00r-\\\\x00t\\\\x01\\\\x00j\\\\x02\\\\x00|\\\\x00\\\\x00j\\\\x03\\\\x00|\\\\x01\\\\x00\\\\x83\\\\x02\\\\x00}\\\\x04\\\\x00|\\\\x00\\\\x00j\\\\x04\\\\x00}\\\\x05\\\\x00n!\\\\x00t\\\\x01\\\\x00j\\\\x02\\\\x00t\\\\x05\\\\x00j\\\\x06\\\\x00|\\\\x00\\\\x00\\\\x83\\\\x01\\\\x00|\\\\x01\\\\x00\\\\x83\\\\x02\\\\x00}\\\\x04\\\\x00t\\\\x07\\\\x00}\\\\x05\\\\x00t\\\\x08\\\\x00|\\\\x05\\\\x00t\\\\t\\\\x00|\\\\x04\\\\x00d\\\\x01\\\\x00|\\\\x03\\\\x00\\\\x83\\\\x01\\\\x01\\\\x83\\\\x02\\\\x00}\\\\x05\\\\x00t\\\\n\\\\x00|\\\\x00\\\\x00d\\\\x02\\\\x00|\\\\x05\\\\x00d\\\\x03\\\\x00|\\\\x02\\\\x00d\\\\x04\\\\x00|\\\\x01\\\\x00\\\\x83\\\\x01\\\\x03S(\\\\x05\\\\x00\\\\x00\\\\x00s\\\\x8a\\\\x05\\\\x00\\\\x00\\\\n    Mask the array `x` where the data are exactly equal to value.\\\\n\\\\n    This function is similar to `masked_values`, but only suitable\\\\n    for object arrays: for floating point, use `masked_values` instead.\\\\n\\\\n    Parameters\\\\n    ----------\\\\n    x : array_like\\\\n        Array to mask\\\\n    value : object\\\\n        Comparison value\\\\n    copy : {True, False}, optional\\\\n        Whether to return a copy of `x`.\\\\n    shrink : {True, False}, optional\\\\n        Whether to collapse a mask full of False to nomask\\\\n\\\\n    Returns\\\\n    -------\\\\n    result : MaskedArray\\\\n        The result of masking `x` where equal to `value`.\\\\n\\\\n    See Also\\\\n    --------\\\\n    masked_where : Mask where a condition is met.\\\\n    masked_equal : Mask where equal to a given value (integers).\\\\n    masked_values : Mask using floating point equality.\\\\n\\\\n    Examples\\\\n    --------\\\\n    >>> import numpy.ma as ma\\\\n    >>> food = np.array([\\\\\\\'green_eggs\\\\\\\', \\\\\\\'ham\\\\\\\'], dtype=object)\\\\n    >>> # don\\\\\\\'t eat spoiled food\\\\n    >>> eat = ma.masked_object(food, \\\\\\\'green_eggs\\\\\\\')\\\\n    >>> print(eat)\\\\n    [-- ham]\\\\n    >>> # plain ol` ham is boring\\\\n    >>> fresh_food = np.array([\\\\\\\'cheese\\\\\\\', \\\\\\\'ham\\\\\\\', \\\\\\\'pineapple\\\\\\\'], dtype=object)\\\\n    >>> eat = ma.masked_object(fresh_food, \\\\\\\'green_eggs\\\\\\\')\\\\n    >>> print(eat)\\\\n    [cheese ham pineapple]\\\\n\\\\n    Note that `mask` is set to ``nomask`` if possible.\\\\n\\\\n    >>> eat\\\\n    masked_array(data = [cheese ham pineapple],\\\\n          mask = False,\\\\n          fill_value=?)\\\\n\\\\n    Rw\\\\x01\\\\x00\\\\x00R3\\\\x01\\\\x00\\\\x00R<\\\\x00\\\\x00\\\\x00R\\\\x1b\\\\x01\\\\x00\\\\x00(\\\\x0b\\\\x00\\\\x00\\\\x00Re\\\\x00\\\\x00\\\\x00R;\\\\x01\\\\x00\\\\x00RK\\\\x00\\\\x00\\\\x00R/\\\\x01\\\\x00\\\\x00R6\\\\x01\\\\x00\\\\x00R\\\\xee\\\\x00\\\\x00\\\\x00R0\\\\x00\\\\x00\\\\x00R\\\\x95\\\\x00\\\\x00\\\\x00Rx\\\\x00\\\\x00\\\\x00Ru\\\\x00\\\\x00\\\\x00Rz\\\\x00\\\\x00\\\\x00(\\\\x06\\\\x00\\\\x00\\\\x00R<\\\\x01\\\\x00\\\\x00R\\\\x8e\\\\x01\\\\x00\\\\x00R<\\\\x00\\\\x00\\\\x00Rw\\\\x01\\\\x00\\\\x00R\\\\x8a\\\\x01\\\\x00\\\\x00R3\\\\x01\\\\x00\\\\x00(\\\\x00\\\\x00\\\\x00\\\\x00(\\\\x00\\\\x00\\\\x00\\\\x00s,\\\\x00\\\\x00\\\\x00lib/python2.7/site-packages/numpy/ma/core.pyR\\\\x83\\\\x00\\\\x00\\\\x00r\\\\x08\\\\x00\\\\x00s\\\\x0e\\\\x00\\\\x00\\\\x00\\\\x003\\\\x0c\\\\x01\\\\x15\\\\x01\\\\x0c\\\\x02\\\\x1b\\\\x01\\\\x06\\\\x01\\\\x1b\\\\x01g\\\\xf1h\\\\xe3\\\\x88\\\\xb5\\\\xf8\\\\xe4>g:\\\\x8c0\\\\xe2\\\\x8eyE>c\\\\x06\\\\x00\\\\x00\\\\x00\\\\n\\\\x00\\\\x00\\\\x00\\\\x08\\\\x00\\\\x00\\\\x00C`\\\\x01\\\\x00s\\\\xc4\\\\x00\\\\x00\\\\x00t\\\\x00\\\\x00j\\\\x01\\\\x00}\\\\x06\\\\x00t\\\\x02\\\\x00|\\\\x00\\\\x00|\\\\x01\\\\x00\\\\x83\\\\x02\\\\x00}\\\\x07\\\\x00t\\\\x03\\\\x00|\\\\x07\\\\x00j\\\\x04\\\\x00j\\\\x05\\\\x00t\\\\x06\\\\x00j\\\\x07\\\\x00\\\\x83\\\\x02\\\\x00ro\\\\x00t\\\\x00\\\\x00j\\\\x08\\\\x00|\\\\x06\\\\x00|\\\\x07\\\\x00|\\\\x01\\\\x00\\\\x18\\\\x83\\\\x01\\\\x00|\\\\x03\\\\x00|\\\\x02\\\\x00|\\\\x06\\\\x00|\\\\x01\\\\x00\\\\x83\\\\x01\\\\x00\\\\x14\\\\x17\\\\x83\\\\x02\\\\x00}\\\\x08\\\\x00t\\\\t\\\\x00|\\\\x00\\\\x00d\\\\x01\\\\x00t\\\\n\\\\x00\\\\x83\\\\x03\\\\x00}\\\\t\\\\x00n\\\\x18\\\\x00t\\\\x00\\\\x00j\\\\x0b\\\\x00|\\\\x07\\\\x00|\\\\x01\\\\x00\\\\x83\\\\x02\\\\x00}\\\\x08\\\\x00t\\\\n\\\\x00}\\\\t\\\\x00t\\\\x0c\\\\x00|\\\\t\\\\x00t\\\\r\\\\x00|\\\\x08\\\\x00d\\\\x02\\\\x00|\\\\x05\\\\x00\\\\x83\\\\x01\\\\x01d\\\\x02\\\\x00|\\\\x05\\\\x00\\\\x83\\\\x02\\\\x01}\\\\t\\\\x00t\\\\x0e\\\\x00|\\\\x07\\\\x00d\\\\x03\\\\x00|\\\\t\\\\x00d\\\\x04\\\\x00|\\\\x04\\\\x00d\\\\x05\\\\x00|\\\\x01\\\\x00\\\\x83\\\\x01\\\\x03S(\\\\x06\\\\x00\\\\x00\\\\x00s\\\\x8a\\\\x07\\\\x00\\\\x00\\\\n    Mask using floating point equality.\\\\n\\\\n    Return a MaskedArray, masked where the data in array `x` are approximately\\\\n    equal to `value`, i.e. where the following condition is True\\\\n\\\\n    (abs(x - value) <= atol+rtol*abs(value))\\\\n\\\\n    The fill_value is set to `value` and the mask is set to ``nomask`` if\\\\n    possible.  For integers, consider using ``masked_equal``.\\\\n\\\\n    Parameters\\\\n    ----------\\\\n    x : array_like\\\\n        Array to mask.\\\\n    value : float\\\\n        Masking value.\\\\n    rtol : float, optional\\\\n        Tolerance parameter.\\\\n    atol : float, optional\\\\n        Tolerance parameter (1e-8).\\\\n    copy : bool, optional\\\\n        Whether to return a copy of `x`.\\\\n    shrink : bool, optional\\\\n        Whether to collapse a mask full of False to ``nomask``.\\\\n\\\\n    Returns\\\\n    -------\\\\n    result : MaskedArray\\\\n        The result of masking `x` where approximately equal to `value`.\\\\n\\\\n    See Also\\\\n    --------\\\\n    masked_where : Mask where a condition is met.\\\\n    masked_equal : Mask where equal to a given value (integers).\\\\n\\\\n    Examples\\\\n    --------\\\\n    >>> import numpy.ma as ma\\\\n    >>> x = np.array([1, 1.1, 2, 1.1, 3])\\\\n    >>> ma.masked_values(x, 1.1)\\\\n    masked_array(data = [1.0 -- 2.0 -- 3.0],\\\\n          mask = [False  True False  True False],\\\\n          fill_value=1.1)\\\\n\\\\n    Note that `mask` is set to ``nomask`` if possible.\\\\n\\\\n    >>> ma.masked_values(x, 1.5)\\\\n    masked_array(data = [ 1.   1.1  2.   1.1  3. ],\\\\n          mask = False,\\\\n          fill_value=1.5)\\\\n\\\\n    For integers, the fill value will be different in general to the\\\\n    result of ``masked_equal``.\\\\n\\\\n    >>> x = np.arange(5)\\\\n    >>> x\\\\n    array([0, 1, 2, 3, 4])\\\\n    >>> ma.masked_values(x, 2)\\\\n    masked_array(data = [0 1 -- 3 4],\\\\n          mask = [False False  True False False],\\\\n          fill_value=2)\\\\n    >>> ma.masked_equal(x, 2)\\\\n    masked_array(data = [0 1 -- 3 4],\\\\n          mask = [False False  True False False],\\\\n          fill_value=999999)\\\\n\\\\n    R6\\\\x01\\\\x00\\\\x00Rw\\\\x01\\\\x00\\\\x00R3\\\\x01\\\\x00\\\\x00R<\\\\x00\\\\x00\\\\x00R\\\\x1b\\\\x01\\\\x00\\\\x00(\\\\x0f\\\\x00\\\\x00\\\\x00R;\\\\x01\\\\x00\\\\x00R\\\\x19\\\\x00\\\\x00\\\\x00RN\\\\x00\\\\x00\\\\x00R\\\\\\\'\\\\x01\\\\x00\\\\x00R\\\\xe9\\\\x00\\\\x00\\\\x00R&\\\\x01\\\\x00\\\\x00R\\\\xee\\\\x00\\\\x00\\\\x00t\\\\x08\\\\x00\\\\x00\\\\x00floatingRk\\\\x00\\\\x00\\\\x00RJ\\\\x01\\\\x00\\\\x00R\\\\x95\\\\x00\\\\x00\\\\x00RK\\\\x00\\\\x00\\\\x00Rx\\\\x00\\\\x00\\\\x00Ru\\\\x00\\\\x00\\\\x00Rz\\\\x00\\\\x00\\\\x00(\\\\n\\\\x00\\\\x00\\\\x00R<\\\\x01\\\\x00\\\\x00R\\\\x8e\\\\x01\\\\x00\\\\x00t\\\\x04\\\\x00\\\\x00\\\\x00rtolt\\\\x04\\\\x00\\\\x00\\\\x00atolR<\\\\x00\\\\x00\\\\x00Rw\\\\x01\\\\x00\\\\x00t\\\\x04\\\\x00\\\\x00\\\\x00mabst\\\\x04\\\\x00\\\\x00\\\\x00xnewR\\\\x8a\\\\x01\\\\x00\\\\x00R3\\\\x01\\\\x00\\\\x00(\\\\x00\\\\x00\\\\x00\\\\x00(\\\\x00\\\\x00\\\\x00\\\\x00s,\\\\x00\\\\x00\\\\x00lib/python2.7/site-packages/numpy/ma/core.pyR\\\\x87\\\\x00\\\\x00\\\\x00\\\\xaf\\\\x08\\\\x00\\\\x00s\\\\x14\\\\x00\\\\x00\\\\x00\\\\x00E\\\\t\\\\x01\\\\x0f\\\\x01\\\\x18\\\\x01\\\\x06\\\\x01$\\\\x01\\\\x15\\\\x02\\\\x12\\\\x01\\\\x06\\\\x01!\\\\x01c\\\\x02\\\\x00\\\\x00\\\\x00\\\\x06\\\\x00\\\\x00\\\\x00\\\\x06\\\\x00\\\\x00\\\\x00C`\\\\x01\\\\x00s\\\\xa9\\\\x00\\\\x00\\\\x00t\\\\x00\\\\x00j\\\\x01\\\\x00|\\\\x00\\\\x00d\\\\x01\\\\x00|\\\\x01\\\\x00d\\\\x02\\\\x00t\\\\x02\\\\x00\\\\x83\\\\x01\\\\x02}\\\\x00\\\\x00t\\\\x03\\\\x00|\\\\x00\\\\x00d\\\\x03\\\\x00d\\\\x04\\\\x00\\\\x83\\\\x03\\\\x00}\\\\x02\\\\x00|\\\\x02\\\\x00d\\\\x04\\\\x00k\\\\t\\\\x00rw\\\\x00t\\\\x00\\\\x00j\\\\x05\\\\x00t\\\\x06\\\\x00|\\\\x00\\\\x00\\\\x83\\\\x01\\\\x00\\\\x83\\\\x01\\\\x00\\\\x0f}\\\\x03\\\\x00|\\\\x02\\\\x00t\\\\x07\\\\x00k\\\\t\\\\x00rh\\\\x00|\\\\x03\\\\x00|\\\\x02\\\\x00O}\\\\x03\\\\x00n\\\\x00\\\\x00t\\\\x08\\\\x00|\\\\x00\\\\x00\\\\x83\\\\x01\\\\x00}\\\\x04\\\\x00n\\\\x16\\\\x00t\\\\x00\\\\x00j\\\\x05\\\\x00|\\\\x00\\\\x00\\\\x83\\\\x01\\\\x00\\\\x0f}\\\\x03\\\\x00t\\\\t\\\\x00}\\\\x04\\\\x00|\\\\x00\\\\x00j\\\\n\\\\x00|\\\\x04\\\\x00\\\\x83\\\\x01\\\\x00}\\\\x05\\\\x00|\\\\x03\\\\x00|\\\\x05\\\\x00_\\\\x0b\\\\x00|\\\\x05\\\\x00S(\\\\x05\\\\x00\\\\x00\\\\x00s\\\\xf9\\\\x02\\\\x00\\\\x00\\\\n    Mask an array where invalid values occur (NaNs or infs).\\\\n\\\\n    This function is a shortcut to ``masked_where``, with\\\\n    `condition` = ~(np.isfinite(a)). Any pre-existing mask is conserved.\\\\n    Only applies to arrays with a dtype where NaNs or infs make sense\\\\n    (i.e. floating point types), but accepts any array_like object.\\\\n\\\\n    See Also\\\\n    --------\\\\n    masked_where : Mask where a condition is met.\\\\n\\\\n    Examples\\\\n    --------\\\\n    >>> import numpy.ma as ma\\\\n    >>> a = np.arange(5, dtype=np.float)\\\\n    >>> a[2] = np.NaN\\\\n    >>> a[3] = np.PINF\\\\n    >>> a\\\\n    array([  0.,   1.,  NaN,  Inf,   4.])\\\\n    >>> ma.masked_invalid(a)\\\\n    masked_array(data = [0.0 1.0 -- -- 4.0],\\\\n          mask = [False False  True  True False],\\\\n          fill_value=1e+20)\\\\n\\\\n    R<\\\\x00\\\\x00\\\\x00R.\\\\x01\\\\x00\\\\x00R6\\\\x01\\\\x00\\\\x00N(\\\\x0c\\\\x00\\\\x00\\\\x00R\\\\xee\\\\x00\\\\x00\\\\x00R\\\\n\\\\x00\\\\x00\\\\x00R4\\\\x01\\\\x00\\\\x00RJ\\\\x01\\\\x00\\\\x00R\\\\xc4\\\\x00\\\\x00\\\\x00R5\\\\x01\\\\x00\\\\x00RX\\\\x00\\\\x00\\\\x00R\\\\x95\\\\x00\\\\x00\\\\x00R&\\\\x01\\\\x00\\\\x00R\\\\x17\\\\x00\\\\x00\\\\x00R1\\\\x01\\\\x00\\\\x00R6\\\\x01\\\\x00\\\\x00(\\\\x06\\\\x00\\\\x00\\\\x00R\\\\x1f\\\\x01\\\\x00\\\\x00R<\\\\x00\\\\x00\\\\x00R3\\\\x01\\\\x00\\\\x00R\\\\x8a\\\\x01\\\\x00\\\\x00R,\\\\x01\\\\x00\\\\x00R \\\\x01\\\\x00\\\\x00(\\\\x00\\\\x00\\\\x00\\\\x00(\\\\x00\\\\x00\\\\x00\\\\x00s,\\\\x00\\\\x00\\\\x00lib/python2.7/site-packages/numpy/ma/core.pyR\\\\x7f\\\\x00\\\\x00\\\\x00\\\\x01\\\\t\\\\x00\\\\x00s\\\\x18\\\\x00\\\\x00\\\\x00\\\\x00\\\\x1b\\\\x1b\\\\x01\\\\x12\\\\x01\\\\x0c\\\\x01\\\\x16\\\\x01\\\\x0c\\\\x01\\\\r\\\\x01\\\\x0f\\\\x02\\\\x10\\\\x01\\\\x06\\\\x01\\\\x0f\\\\x01\\\\t\\\\x01t\\\\x12\\\\x00\\\\x00\\\\x00_MaskedPrintOptionc\\\\x00\\\\x00\\\\x00\\\\x00\\\\x00\\\\x00\\\\x00\\\\x00\\\\x02\\\\x00\\\\x00\\\\x00B`\\\\x01\\\\x00sM\\\\x00\\\\x00\\\\x00e\\\\x00\\\\x00Z\\\\x01\\\\x00d\\\\x00\\\\x00Z\\\\x02\\\\x00d\\\\x01\\\\x00\\\\x84\\\\x00\\\\x00Z\\\\x03\\\\x00d\\\\x02\\\\x00\\\\x84\\\\x00\\\\x00Z\\\\x04\\\\x00d\\\\x03\\\\x00\\\\x84\\\\x00\\\\x00Z\\\\x05\\\\x00d\\\\x04\\\\x00\\\\x84\\\\x00\\\\x00Z\\\\x06\\\\x00d\\\\x05\\\\x00d\\\\x06\\\\x00\\\\x84\\\\x01\\\\x00Z\\\\x07\\\\x00d\\\\x07\\\\x00\\\\x84\\\\x00\\\\x00Z\\\\x08\\\\x00e\\\\x08\\\\x00Z\\\\t\\\\x00RS(\\\\x08\\\\x00\\\\x00\\\\x00sN\\\\x00\\\\x00\\\\x00\\\\n    Handle the string used to represent missing data in a masked array.\\\\n\\\\n    c\\\\x02\\\\x00\\\\x00\\\\x00\\\\x02\\\\x00\\\\x00\\\\x00\\\\x02\\\\x00\\\\x00\\\\x00C`\\\\x01\\\\x00s\\\\x16\\\\x00\\\\x00\\\\x00|\\\\x01\\\\x00|\\\\x00\\\\x00_\\\\x00\\\\x00t\\\\x01\\\\x00|\\\\x00\\\\x00_\\\\x02\\\\x00d\\\\x01\\\\x00S(\\\\x02\\\\x00\\\\x00\\\\x00s9\\\\x00\\\\x00\\\\x00\\\\n        Create the masked_print_option object.\\\\n\\\\n        N(\\\\x03\\\\x00\\\\x00\\\\x00t\\\\x08\\\\x00\\\\x00\\\\x00_displayR4\\\\x01\\\\x00\\\\x00t\\\\x08\\\\x00\\\\x00\\\\x00_enabled(\\\\x02\\\\x00\\\\x00\\\\x00R9\\\\x01\\\\x00\\\\x00t\\\\x07\\\\x00\\\\x00\\\\x00display(\\\\x00\\\\x00\\\\x00\\\\x00(\\\\x00\\\\x00\\\\x00\\\\x00s,\\\\x00\\\\x00\\\\x00lib/python2.7/site-packages/numpy/ma/core.pyR:\\\\x01\\\\x00\\\\x006\\\\t\\\\x00\\\\x00s\\\\x04\\\\x00\\\\x00\\\\x00\\\\x00\\\\x05\\\\t\\\\x01c\\\\x01\\\\x00\\\\x00\\\\x00\\\\x01\\\\x00\\\\x00\\\\x00\\\\x01\\\\x00\\\\x00\\\\x00C`\\\\x01\\\\x00s\\\\x07\\\\x00\\\\x00\\\\x00|\\\\x00\\\\x00j\\\\x00\\\\x00S(\\\\x01\\\\x00\\\\x00\\\\x00sA\\\\x00\\\\x00\\\\x00\\\\n        Display the string to print for masked values.\\\\n\\\\n        (\\\\x01\\\\x00\\\\x00\\\\x00R\\\\x99\\\\x01\\\\x00\\\\x00(\\\\x01\\\\x00\\\\x00\\\\x00R9\\\\x01\\\\x00\\\\x00(\\\\x00\\\\x00\\\\x00\\\\x00(\\\\x00\\\\x00\\\\x00\\\\x00s,\\\\x00\\\\x00\\\\x00lib/python2.7/site-packages/numpy/ma/core.pyR\\\\x9b\\\\x01\\\\x00\\\\x00>\\\\t\\\\x00\\\\x00s\\\\x02\\\\x00\\\\x00\\\\x00\\\\x00\\\\x05c\\\\x02\\\\x00\\\\x00\\\\x00\\\\x02\\\\x00\\\\x00\\\\x00\\\\x02\\\\x00\\\\x00\\\\x00C`\\\\x01\\\\x00s\\\\r\\\\x00\\\\x00\\\\x00|\\\\x01\\\\x00|\\\\x00\\\\x00_\\\\x00\\\\x00d\\\\x01\\\\x00S(\\\\x02\\\\x00\\\\x00\\\\x00s=\\\\x00\\\\x00\\\\x00\\\\n        Set the string to print for masked values.\\\\n\\\\n        N(\\\\x01\\\\x00\\\\x00\\\\x00R\\\\x99\\\\x01\\\\x00\\\\x00(\\\\x02\\\\x00\\\\x00\\\\x00R9\\\\x01\\\\x00\\\\x00R\\\\xdf\\\\x00\\\\x00\\\\x00(\\\\x00\\\\x00\\\\x00\\\\x00(\\\\x00\\\\x00\\\\x00\\\\x00s,\\\\x00\\\\x00\\\\x00lib/python2.7/site-packages/numpy/ma/core.pyt\\\\x0b\\\\x00\\\\x00\\\\x00set_displayE\\\\t\\\\x00\\\\x00s\\\\x02\\\\x00\\\\x00\\\\x00\\\\x00\\\\x05c\\\\x01\\\\x00\\\\x00\\\\x00\\\\x01\\\\x00\\\\x00\\\\x00\\\\x01\\\\x00\\\\x00\\\\x00C`\\\\x01\\\\x00s\\\\x07\\\\x00\\\\x00\\\\x00|\\\\x00\\\\x00j\\\\x00\\\\x00S(\\\\x01\\\\x00\\\\x00\\\\x00s;\\\\x00\\\\x00\\\\x00\\\\n        Is the use of the display value enabled?\\\\n\\\\n        (\\\\x01\\\\x00\\\\x00\\\\x00R\\\\x9a\\\\x01\\\\x00\\\\x00(\\\\x01\\\\x00\\\\x00\\\\x00R9\\\\x01\\\\x00\\\\x00(\\\\x00\\\\x00\\\\x00\\\\x00(\\\\x00\\\\x00\\\\x00\\\\x00s,\\\\x00\\\\x00\\\\x00lib/python2.7/site-packages/numpy/ma/core.pyt\\\\x07\\\\x00\\\\x00\\\\x00enabledL\\\\t\\\\x00\\\\x00s\\\\x02\\\\x00\\\\x00\\\\x00\\\\x00\\\\x05i\\\\x01\\\\x00\\\\x00\\\\x00c\\\\x02\\\\x00\\\\x00\\\\x00\\\\x02\\\\x00\\\\x00\\\\x00\\\\x02\\\\x00\\\\x00\\\\x00C`\\\\x01\\\\x00s\\\\r\\\\x00\\\\x00\\\\x00|\\\\x01\\\\x00|\\\\x00\\\\x00_\\\\x00\\\\x00d\\\\x01\\\\x00S(\\\\x02\\\\x00\\\\x00\\\\x00s7\\\\x00\\\\x00\\\\x00\\\\n        Set the enabling shrink to `shrink`.\\\\n\\\\n        N(\\\\x01\\\\x00\\\\x00\\\\x00R\\\\x9a\\\\x01\\\\x00\\\\x00(\\\\x02\\\\x00\\\\x00\\\\x00R9\\\\x01\\\\x00\\\\x00Rw\\\\x01\\\\x00\\\\x00(\\\\x00\\\\x00\\\\x00\\\\x00(\\\\x00\\\\x00\\\\x00\\\\x00s,\\\\x00\\\\x00\\\\x00lib/python2.7/site-packages/numpy/ma/core.pyt\\\\x06\\\\x00\\\\x00\\\\x00enableS\\\\t\\\\x00\\\\x00s\\\\x02\\\\x00\\\\x00\\\\x00\\\\x00\\\\x05c\\\\x01\\\\x00\\\\x00\\\\x00\\\\x01\\\\x00\\\\x00\\\\x00\\\\x02\\\\x00\\\\x00\\\\x00C`\\\\x01\\\\x00s\\\\r\\\\x00\\\\x00\\\\x00t\\\\x00\\\\x00|\\\\x00\\\\x00j\\\\x01\\\\x00\\\\x83\\\\x01\\\\x00S(\\\\x01\\\\x00\\\\x00\\\\x00N(\\\\x02\\\\x00\\\\x00\\\\x00R\\\\xf3\\\\x00\\\\x00\\\\x00R\\\\x99\\\\x01\\\\x00\\\\x00(\\\\x01\\\\x00\\\\x00\\\\x00R9\\\\x01\\\\x00\\\\x00(\\\\x00\\\\x00\\\\x00\\\\x00(\\\\x00\\\\x00\\\\x00\\\\x00s,\\\\x00\\\\x00\\\\x00lib/python2.7/site-packages/numpy/ma/core.pyRV\\\\x01\\\\x00\\\\x00Z\\\\t\\\\x00\\\\x00s\\\\x02\\\\x00\\\\x00\\\\x00\\\\x00\\\\x01(\\\\n\\\\x00\\\\x00\\\\x00R\\\\xc2\\\\x00\\\\x00\\\\x00R\\\\xc3\\\\x00\\\\x00\\\\x00R\\\\xce\\\\x00\\\\x00\\\\x00R:\\\\x01\\\\x00\\\\x00R\\\\x9b\\\\x01\\\\x00\\\\x00R\\\\x9c\\\\x01\\\\x00\\\\x00R\\\\x9d\\\\x01\\\\x00\\\\x00R\\\\x9e\\\\x01\\\\x00\\\\x00RV\\\\x01\\\\x00\\\\x00t\\\\x08\\\\x00\\\\x00\\\\x00__repr__(\\\\x00\\\\x00\\\\x00\\\\x00(\\\\x00\\\\x00\\\\x00\\\\x00(\\\\x00\\\\x00\\\\x00\\\\x00s,\\\\x00\\\\x00\\\\x00lib/python2.7/site-packages/numpy/ma/core.pyR\\\\x98\\\\x01\\\\x00\\\\x000\\\\t\\\\x00\\\\x00s\\\\x10\\\\x00\\\\x00\\\\x00\\\\x06\\\\x04\\\\x06\\\\x02\\\\t\\\\x08\\\\t\\\\x07\\\\t\\\\x07\\\\t\\\\x07\\\\x0c\\\\x07\\\\t\\\\x03s\\\\x02\\\\x00\\\\x00\\\\x00--c\\\\x03\\\\x00\\\\x00\\\\x00\\\\x07\\\\x00\\\\x00\\\\x00\\\\x06\\\\x00\\\\x00\\\\x00C`\\\\x01\\\\x00sk\\\\x00\\\\x00\\\\x00|\\\\x00\\\\x00j\\\\x00\\\\x00j\\\\x01\\\\x00}\\\\x03\\\\x00xX\\\\x00|\\\\x03\\\\x00D]P\\\\x00}\\\\x04\\\\x00|\\\\x00\\\\x00|\\\\x04\\\\x00\\\\x19|\\\\x01\\\\x00|\\\\x04\\\\x00\\\\x19\\\\x02}\\\\x05\\\\x00}\\\\x06\\\\x00|\\\\x05\\\\x00j\\\\x00\\\\x00j\\\\x01\\\\x00rM\\\\x00t\\\\x02\\\\x00|\\\\x05\\\\x00|\\\\x06\\\\x00|\\\\x02\\\\x00\\\\x83\\\\x03\\\\x00\\\\x01q\\\\x13\\\\x00t\\\\x03\\\\x00j\\\\x04\\\\x00|\\\\x05\\\\x00|\\\\x02\\\\x00d\\\\x01\\\\x00|\\\\x06\\\\x00\\\\x83\\\\x02\\\\x01\\\\x01q\\\\x13\\\\x00Wd\\\\x02\\\\x00S(\\\\x03\\\\x00\\\\x00\\\\x00sg\\\\x00\\\\x00\\\\x00\\\\n    Puts printoptions in result where mask is True.\\\\n\\\\n    Private function allowing for recursion\\\\n\\\\n    R\\\\xbf\\\\x00\\\\x00\\\\x00N(\\\\x05\\\\x00\\\\x00\\\\x00R\\\\xe9\\\\x00\\\\x00\\\\x00R\\\\xf8\\\\x00\\\\x00\\\\x00t\\\\x16\\\\x00\\\\x00\\\\x00_recursive_printoptionR\\\\xee\\\\x00\\\\x00\\\\x00RP\\\\x01\\\\x00\\\\x00(\\\\x07\\\\x00\\\\x00\\\\x00R \\\\x01\\\\x00\\\\x00R3\\\\x01\\\\x00\\\\x00t\\\\x08\\\\x00\\\\x00\\\\x00printoptR\\\\xf8\\\\x00\\\\x00\\\\x00R\\\\xfe\\\\x00\\\\x00\\\\x00t\\\\x07\\\\x00\\\\x00\\\\x00curdatat\\\\x07\\\\x00\\\\x00\\\\x00curmask(\\\\x00\\\\x00\\\\x00\\\\x00(\\\\x00\\\\x00\\\\x00\\\\x00s,\\\\x00\\\\x00\\\\x00lib/python2.7/site-packages/numpy/ma/core.pyR\\\\xa0\\\\x01\\\\x00\\\\x00c\\\\t\\\\x00\\\\x00s\\\\x0e\\\\x00\\\\x00\\\\x00\\\\x00\\\\x07\\\\x0c\\\\x01\\\\r\\\\x01\\\\x15\\\\x01\\\\x0c\\\\x01\\\\x13\\\\x02\\\\x1a\\\\x01t\\\\x08\\\\x00\\\\x00\\\\x00long_stdse\\\\x00\\\\x00\\\\x00masked_%(name)s(data =\\\\n %(data)s,\\\\n       %(nlen)s mask =\\\\n %(mask)s,\\\\n %(nlen)s fill_value = %(fill)s)\\\\nt\\\\t\\\\x00\\\\x00\\\\x00short_stdsc\\\\x00\\\\x00\\\\x00masked_%(name)s(data = %(data)s,\\\\n       %(nlen)s mask = %(mask)s,\\\\n%(nlen)s  fill_value = %(fill)s)\\\\nt\\\\x08\\\\x00\\\\x00\\\\x00long_flxs\\\\x87\\\\x00\\\\x00\\\\x00masked_%(name)s(data =\\\\n %(data)s,\\\\n       %(nlen)s mask =\\\\n %(mask)s,\\\\n%(nlen)s  fill_value = %(fill)s,\\\\n      %(nlen)s dtype = %(dtype)s)\\\\nt\\\\t\\\\x00\\\\x00\\\\x00short_flxs\\\\x85\\\\x00\\\\x00\\\\x00masked_%(name)s(data = %(data)s,\\\\n%(nlen)s        mask = %(mask)s,\\\\n%(nlen)s  fill_value = %(fill)s,\\\\n%(nlen)s       dtype = %(dtype)s)\\\\nc\\\\x03\\\\x00\\\\x00\\\\x00\\\\x06\\\\x00\\\\x00\\\\x00\\\\x07\\\\x00\\\\x00\\\\x00C`\\\\x01\\\\x00sp\\\\x00\\\\x00\\\\x00|\\\\x00\\\\x00j\\\\x00\\\\x00j\\\\x01\\\\x00}\\\\x03\\\\x00x]\\\\x00|\\\\x03\\\\x00D]U\\\\x00}\\\\x04\\\\x00|\\\\x00\\\\x00|\\\\x04\\\\x00\\\\x19}\\\\x05\\\\x00|\\\\x05\\\\x00j\\\\x00\\\\x00j\\\\x01\\\\x00rJ\\\\x00t\\\\x02\\\\x00|\\\\x05\\\\x00|\\\\x01\\\\x00|\\\\x04\\\\x00\\\\x19|\\\\x02\\\\x00|\\\\x04\\\\x00\\\\x19\\\\x83\\\\x03\\\\x00\\\\x01q\\\\x13\\\\x00t\\\\x03\\\\x00j\\\\x04\\\\x00|\\\\x05\\\\x00|\\\\x02\\\\x00|\\\\x04\\\\x00\\\\x19d\\\\x01\\\\x00|\\\\x01\\\\x00|\\\\x04\\\\x00\\\\x19\\\\x83\\\\x02\\\\x01\\\\x01q\\\\x13\\\\x00Wd\\\\x02\\\\x00S(\\\\x03\\\\x00\\\\x00\\\\x00s2\\\\x00\\\\x00\\\\x00\\\\n    Recursively fill `a` with `fill_value`.\\\\n\\\\n    R\\\\xbf\\\\x00\\\\x00\\\\x00N(\\\\x05\\\\x00\\\\x00\\\\x00R\\\\xe9\\\\x00\\\\x00\\\\x00R\\\\xf8\\\\x00\\\\x00\\\\x00t\\\\x11\\\\x00\\\\x00\\\\x00_recursive_filledR\\\\xee\\\\x00\\\\x00\\\\x00RP\\\\x01\\\\x00\\\\x00(\\\\x06\\\\x00\\\\x00\\\\x00R\\\\x1f\\\\x01\\\\x00\\\\x00R3\\\\x01\\\\x00\\\\x00R\\\\x1b\\\\x01\\\\x00\\\\x00R\\\\xf8\\\\x00\\\\x00\\\\x00R\\\\xfe\\\\x00\\\\x00\\\\x00t\\\\x07\\\\x00\\\\x00\\\\x00current(\\\\x00\\\\x00\\\\x00\\\\x00(\\\\x00\\\\x00\\\\x00\\\\x00s,\\\\x00\\\\x00\\\\x00lib/python2.7/site-packages/numpy/ma/core.pyR\\\\xa8\\\\x01\\\\x00\\\\x00\\\\x93\\\\t\\\\x00\\\\x00s\\\\x0c\\\\x00\\\\x00\\\\x00\\\\x00\\\\x05\\\\x0c\\\\x01\\\\r\\\\x01\\\\n\\\\x01\\\\x0c\\\\x01\\\\x1b\\\\x02c\\\\x01\\\\x00\\\\x00\\\\x00\\\\x05\\\\x00\\\\x00\\\\x00\\\\x06\\\\x00\\\\x00\\\\x00\\\\x03`\\\\x01\\\\x00sC\\\\x01\\\\x00\\\\x00\\\\x87\\\\x00\\\\x00f\\\\x01\\\\x00d\\\\x01\\\\x00\\\\x86\\\\x00\\\\x00\\\\x89\\\\x00\\\\x00t\\\\x00\\\\x00j\\\\x01\\\\x00|\\\\x00\\\\x00\\\\x83\\\\x01\\\\x00}\\\\x00\\\\x00|\\\\x00\\\\x00j\\\\x02\\\\x00}\\\\x01\\\\x00|\\\\x00\\\\x00j\\\\x03\\\\x00\\\\x83\\\\x00\\\\x00}\\\\x00\\\\x00t\\\\x04\\\\x00|\\\\x00\\\\x00t\\\\x05\\\\x00\\\\x83\\\\x02\\\\x00r\\\\xc8\\\\x00t\\\\x00\\\\x00j\\\\x06\\\\x00g\\\\x00\\\\x00|\\\\x00\\\\x00j\\\\x07\\\\x00D]\\\\x1e\\\\x00}\\\\x02\\\\x00t\\\\x08\\\\x00\\\\x88\\\\x00\\\\x00|\\\\x02\\\\x00j\\\\t\\\\x00\\\\x83\\\\x00\\\\x00\\\\x83\\\\x01\\\\x00\\\\x83\\\\x01\\\\x00^\\\\x02\\\\x00qR\\\\x00\\\\x83\\\\x01\\\\x00}\\\\x03\\\\x00|\\\\x03\\\\x00j\\\\n\\\\x00t\\\\x05\\\\x00\\\\x83\\\\x01\\\\x00}\\\\x03\\\\x00t\\\\x00\\\\x00j\\\\x06\\\\x00g\\\\x00\\\\x00t\\\\x0b\\\\x00|\\\\x00\\\\x00\\\\x83\\\\x01\\\\x00D]\\\\x1e\\\\x00}\\\\x02\\\\x00t\\\\x08\\\\x00\\\\x88\\\\x00\\\\x00|\\\\x02\\\\x00j\\\\t\\\\x00\\\\x83\\\\x00\\\\x00\\\\x83\\\\x01\\\\x00\\\\x83\\\\x01\\\\x00^\\\\x02\\\\x00q\\\\x9b\\\\x00\\\\x83\\\\x01\\\\x00|\\\\x03\\\\x00_\\\\x0c\\\\x00n4\\\\x00t\\\\x00\\\\x00j\\\\x06\\\\x00g\\\\x00\\\\x00|\\\\x00\\\\x00D]\\\\x1e\\\\x00}\\\\x02\\\\x00t\\\\x08\\\\x00\\\\x88\\\\x00\\\\x00|\\\\x02\\\\x00j\\\\t\\\\x00\\\\x83\\\\x00\\\\x00\\\\x83\\\\x01\\\\x00\\\\x83\\\\x01\\\\x00^\\\\x02\\\\x00q\\\\xd5\\\\x00\\\\x83\\\\x01\\\\x00}\\\\x03\\\\x00t\\\\r\\\\x00|\\\\x01\\\\x00\\\\x83\\\\x01\\\\x00d\\\\x02\\\\x00k\\\\x04\\\\x00r?\\\\x01t\\\\x0e\\\\x00|\\\\x03\\\\x00j\\\\x02\\\\x00\\\\x83\\\\x01\\\\x00}\\\\x04\\\\x00|\\\\x01\\\\x00|\\\\x04\\\\x00d\\\\x03\\\\x00<t\\\\x08\\\\x00\\\\x88\\\\x00\\\\x00|\\\\x04\\\\x00\\\\x83\\\\x01\\\\x00\\\\x83\\\\x01\\\\x00|\\\\x03\\\\x00_\\\\x02\\\\x00n\\\\x00\\\\x00|\\\\x03\\\\x00S(\\\\x04\\\\x00\\\\x00\\\\x00s4\\\\x02\\\\x00\\\\x00\\\\n    Flatten a structured array.\\\\n\\\\n    The data type of the output is chosen such that it can represent all of the\\\\n    (nested) fields.\\\\n\\\\n    Parameters\\\\n    ----------\\\\n    a : structured array\\\\n\\\\n    Returns\\\\n    -------\\\\n    output : masked array or ndarray\\\\n        A flattened masked array if the input is a masked array, otherwise a\\\\n        standard ndarray.\\\\n\\\\n    Examples\\\\n    --------\\\\n    >>> ndtype = [(\\\\\\\'a\\\\\\\', int), (\\\\\\\'b\\\\\\\', float)]\\\\n    >>> a = np.array([(1, 1), (2, 2)], dtype=ndtype)\\\\n    >>> flatten_structured_array(a)\\\\n    array([[1., 1.],\\\\n           [2., 2.]])\\\\n\\\\n    c\\\\x01\\\\x00\\\\x00\\\\x00\\\\x03\\\\x00\\\\x00\\\\x00\\\\x04\\\\x00\\\\x00\\\\x003`\\\\x01\\\\x00sN\\\\x00\\\\x00\\\\x00xG\\\\x00t\\\\x00\\\\x00|\\\\x00\\\\x00\\\\x83\\\\x01\\\\x00D]9\\\\x00}\\\\x01\\\\x00t\\\\x01\\\\x00|\\\\x01\\\\x00d\\\\x01\\\\x00\\\\x83\\\\x02\\\\x00rA\\\\x00x!\\\\x00\\\\x88\\\\x00\\\\x00|\\\\x01\\\\x00\\\\x83\\\\x01\\\\x00D]\\\\x0b\\\\x00}\\\\x02\\\\x00|\\\\x02\\\\x00V\\\\x01q/\\\\x00Wq\\\\r\\\\x00|\\\\x01\\\\x00V\\\\x01q\\\\r\\\\x00Wd\\\\x02\\\\x00S(\\\\x03\\\\x00\\\\x00\\\\x00s;\\\\x00\\\\x00\\\\x00\\\\n        Flattens a compound of nested iterables.\\\\n\\\\n        R\\\\x82\\\\x01\\\\x00\\\\x00N(\\\\x02\\\\x00\\\\x00\\\\x00t\\\\x04\\\\x00\\\\x00\\\\x00iterR\\\\xeb\\\\x00\\\\x00\\\\x00(\\\\x03\\\\x00\\\\x00\\\\x00t\\\\x08\\\\x00\\\\x00\\\\x00iterablet\\\\x03\\\\x00\\\\x00\\\\x00elmR\\\\xd1\\\\x00\\\\x00\\\\x00(\\\\x01\\\\x00\\\\x00\\\\x00t\\\\x10\\\\x00\\\\x00\\\\x00flatten_sequence(\\\\x00\\\\x00\\\\x00\\\\x00s,\\\\x00\\\\x00\\\\x00lib/python2.7/site-packages/numpy/ma/core.pyR\\\\xad\\\\x01\\\\x00\\\\x00\\\\xbc\\\\t\\\\x00\\\\x00s\\\\n\\\\x00\\\\x00\\\\x00\\\\x00\\\\x05\\\\x13\\\\x01\\\\x0f\\\\x01\\\\x13\\\\x01\\\\x0c\\\\x02i\\\\x01\\\\x00\\\\x00\\\\x00i\\\\x00\\\\x00\\\\x00\\\\x00(\\\\x0f\\\\x00\\\\x00\\\\x00R\\\\xee\\\\x00\\\\x00\\\\x00R/\\\\x00\\\\x00\\\\x00R\\\\xab\\\\x00\\\\x00\\\\x00R\\\\xa2\\\\x00\\\\x00\\\\x00R\\\\xed\\\\x00\\\\x00\\\\x00R\\\\x17\\\\x00\\\\x00\\\\x00R\\\\n\\\\x00\\\\x00\\\\x00R/\\\\x01\\\\x00\\\\x00R\\\\xfa\\\\x00\\\\x00\\\\x00R\\\\x0e\\\\x01\\\\x00\\\\x00R1\\\\x01\\\\x00\\\\x00RZ\\\\x00\\\\x00\\\\x00R6\\\\x01\\\\x00\\\\x00R\\\\x0b\\\\x01\\\\x00\\\\x00Rq\\\\x01\\\\x00\\\\x00(\\\\x05\\\\x00\\\\x00\\\\x00R\\\\x1f\\\\x01\\\\x00\\\\x00t\\\\x08\\\\x00\\\\x00\\\\x00inishapeRT\\\\x01\\\\x00\\\\x00t\\\\x03\\\\x00\\\\x00\\\\x00outRx\\\\x01\\\\x00\\\\x00(\\\\x00\\\\x00\\\\x00\\\\x00(\\\\x01\\\\x00\\\\x00\\\\x00R\\\\xad\\\\x01\\\\x00\\\\x00s,\\\\x00\\\\x00\\\\x00lib/python2.7/site-packages/numpy/ma/core.pyRQ\\\\x00\\\\x00\\\\x00\\\\xa1\\\\t\\\\x00\\\\x00s\\\\x1e\\\\x00\\\\x00\\\\x00\\\\x00\\\\x1b\\\\x0f\\\\x0c\\\\x0f\\\\x01\\\\t\\\\x01\\\\x0c\\\\x01\\\\x0f\\\\x017\\\\x01\\\\x0f\\\\x01\\\\t\\\\x017\\\\x024\\\\x01\\\\x12\\\\x01\\\\x0f\\\\x01\\\\n\\\\x01\\\\x18\\\\x01c\\\\x02\\\\x00\\\\x00\\\\x00\\\\x04\\\\x00\\\\x00\\\\x00\\\\x04\\\\x00\\\\x00\\\\x00\\\\x03`\\\\x01\\\\x00s^\\\\x00\\\\x00\\\\x00\\\\x87\\\\x00\\\\x00\\\\x87\\\\x01\\\\x00f\\\\x02\\\\x00d\\\\x01\\\\x00\\\\x86\\\\x00\\\\x00}\\\\x02\\\\x00t\\\\x00\\\\x00t\\\\x01\\\\x00\\\\x88\\\\x00\\\\x00d\\\\x02\\\\x00\\\\x83\\\\x03\\\\x00p3\\\\x00t\\\\x00\\\\x00t\\\\x03\\\\x00\\\\x88\\\\x00\\\\x00d\\\\x02\\\\x00\\\\x83\\\\x03\\\\x00}\\\\x03\\\\x00|\\\\x03\\\\x00d\\\\x02\\\\x00k\\\\t\\\\x00rQ\\\\x00|\\\\x03\\\\x00j\\\\x04\\\\x00|\\\\x02\\\\x00_\\\\x04\\\\x00n\\\\x00\\\\x00\\\\x88\\\\x00\\\\x00|\\\\x02\\\\x00_\\\\x05\\\\x00|\\\\x02\\\\x00S(\\\\x03\\\\x00\\\\x00\\\\x00s\\\\x1f\\\\x03\\\\x00\\\\x00\\\\n    Return a class method wrapper around a basic array method.\\\\n\\\\n    Creates a class method which returns a masked array, where the new\\\\n    ``_data`` array is the output of the corresponding basic method called\\\\n    on the original ``_data``.\\\\n\\\\n    If `onmask` is True, the new mask is the output of the method called\\\\n    on the initial mask. Otherwise, the new mask is just a reference\\\\n    to the initial mask.\\\\n\\\\n    Parameters\\\\n    ----------\\\\n    funcname : str\\\\n        Name of the function to apply on data.\\\\n    onmask : bool\\\\n        Whether the mask must be processed also (True) or left\\\\n        alone (False). Default is True. Make available as `_onmask`\\\\n        attribute.\\\\n\\\\n    Returns\\\\n    -------\\\\n    method : instancemethod\\\\n        Class method wrapper of the specified basic array method.\\\\n\\\\n    c\\\\x01\\\\x00\\\\x00\\\\x00\\\\x05\\\\x00\\\\x00\\\\x00\\\\x04\\\\x00\\\\x00\\\\x00\\\\x1f`\\\\x01\\\\x00s\\\\xc0\\\\x00\\\\x00\\\\x00t\\\\x00\\\\x00|\\\\x00\\\\x00j\\\\x01\\\\x00\\\\x88\\\\x00\\\\x00\\\\x83\\\\x02\\\\x00|\\\\x01\\\\x00|\\\\x02\\\\x00\\\\x8e\\\\x00\\\\x00}\\\\x03\\\\x00|\\\\x03\\\\x00j\\\\x02\\\\x00t\\\\x03\\\\x00|\\\\x00\\\\x00\\\\x83\\\\x01\\\\x00\\\\x83\\\\x01\\\\x00}\\\\x03\\\\x00|\\\\x03\\\\x00j\\\\x04\\\\x00|\\\\x00\\\\x00\\\\x83\\\\x01\\\\x00\\\\x01|\\\\x00\\\\x00j\\\\x05\\\\x00}\\\\x04\\\\x00|\\\\x03\\\\x00j\\\\x06\\\\x00r\\\\x96\\\\x00\\\\x88\\\\x01\\\\x00se\\\\x00|\\\\x03\\\\x00j\\\\x07\\\\x00|\\\\x04\\\\x00\\\\x83\\\\x01\\\\x00\\\\x01q\\\\xbc\\\\x00|\\\\x04\\\\x00t\\\\x08\\\\x00k\\\\t\\\\x00r\\\\xbc\\\\x00|\\\\x03\\\\x00j\\\\x07\\\\x00t\\\\x00\\\\x00|\\\\x04\\\\x00\\\\x88\\\\x00\\\\x00\\\\x83\\\\x02\\\\x00|\\\\x01\\\\x00|\\\\x02\\\\x00\\\\x8e\\\\x00\\\\x00\\\\x83\\\\x01\\\\x00\\\\x01q\\\\xbc\\\\x00n&\\\\x00|\\\\x04\\\\x00j\\\\x06\\\\x00r\\\\xbc\\\\x00|\\\\x04\\\\x00j\\\\t\\\\x00j\\\\n\\\\x00\\\\x0cr\\\\xbc\\\\x00|\\\\x04\\\\x00j\\\\x0b\\\\x00\\\\x83\\\\x00\\\\x00r\\\\xbc\\\\x00t\\\\x0c\\\\x00S|\\\\x03\\\\x00S(\\\\x01\\\\x00\\\\x00\\\\x00N(\\\\r\\\\x00\\\\x00\\\\x00RJ\\\\x01\\\\x00\\\\x00R/\\\\x01\\\\x00\\\\x00R1\\\\x01\\\\x00\\\\x00R&\\\\x01\\\\x00\\\\x00RQ\\\\x01\\\\x00\\\\x00R6\\\\x01\\\\x00\\\\x00R\\\\x93\\\\x00\\\\x00\\\\x00t\\\\x0b\\\\x00\\\\x00\\\\x00__setmask__R\\\\x95\\\\x00\\\\x00\\\\x00R\\\\xe9\\\\x00\\\\x00\\\\x00R\\\\xf8\\\\x00\\\\x00\\\\x00R\\\\x1b\\\\x00\\\\x00\\\\x00Ry\\\\x00\\\\x00\\\\x00(\\\\x05\\\\x00\\\\x00\\\\x00R9\\\\x01\\\\x00\\\\x00RR\\\\x01\\\\x00\\\\x00t\\\\x06\\\\x00\\\\x00\\\\x00paramsR \\\\x01\\\\x00\\\\x00R3\\\\x01\\\\x00\\\\x00(\\\\x02\\\\x00\\\\x00\\\\x00t\\\\x08\\\\x00\\\\x00\\\\x00funcnamet\\\\x06\\\\x00\\\\x00\\\\x00onmask(\\\\x00\\\\x00\\\\x00\\\\x00s,\\\\x00\\\\x00\\\\x00lib/python2.7/site-packages/numpy/ma/core.pyt\\\\x0e\\\\x00\\\\x00\\\\x00wrapped_method\\\\xf4\\\\t\\\\x00\\\\x00s\\\\x18\\\\x00\\\\x00\\\\x00\\\\x00\\\\x01\\\\x1b\\\\x01\\\\x15\\\\x01\\\\r\\\\x01\\\\t\\\\x01\\\\t\\\\x01\\\\x06\\\\x01\\\\x10\\\\x01\\\\x0c\\\\x01%\\\\x02"\\\\x01\\\\x04\\\\x01N(\\\\x06\\\\x00\\\\x00\\\\x00RJ\\\\x01\\\\x00\\\\x00R\\\\x04\\\\x00\\\\x00\\\\x00R\\\\xc4\\\\x00\\\\x00\\\\x00R\\\\xee\\\\x00\\\\x00\\\\x00R\\\\xce\\\\x00\\\\x00\\\\x00R\\\\xc2\\\\x00\\\\x00\\\\x00(\\\\x04\\\\x00\\\\x00\\\\x00R\\\\xb2\\\\x01\\\\x00\\\\x00R\\\\xb3\\\\x01\\\\x00\\\\x00R\\\\xb4\\\\x01\\\\x00\\\\x00t\\\\x07\\\\x00\\\\x00\\\\x00methdoc(\\\\x00\\\\x00\\\\x00\\\\x00(\\\\x02\\\\x00\\\\x00\\\\x00R\\\\xb2\\\\x01\\\\x00\\\\x00R\\\\xb3\\\\x01\\\\x00\\\\x00s,\\\\x00\\\\x00\\\\x00lib/python2.7/site-packages/numpy/ma/core.pyt\\\\x0c\\\\x00\\\\x00\\\\x00_arraymethod\\\\xd9\\\\t\\\\x00\\\\x00s\\\\x0c\\\\x00\\\\x00\\\\x00\\\\x00\\\\x1b\\\\x12\\\\x0e$\\\\x01\\\\x0c\\\\x01\\\\x0f\\\\x01\\\\t\\\\x01t\\\\x0e\\\\x00\\\\x00\\\\x00MaskedIteratorc\\\\x00\\\\x00\\\\x00\\\\x00\\\\x00\\\\x00\\\\x00\\\\x00\\\\x01\\\\x00\\\\x00\\\\x00B`\\\\x01\\\\x00sA\\\\x00\\\\x00\\\\x00e\\\\x00\\\\x00Z\\\\x01\\\\x00d\\\\x00\\\\x00Z\\\\x02\\\\x00d\\\\x01\\\\x00\\\\x84\\\\x00\\\\x00Z\\\\x03\\\\x00d\\\\x02\\\\x00\\\\x84\\\\x00\\\\x00Z\\\\x04\\\\x00d\\\\x03\\\\x00\\\\x84\\\\x00\\\\x00Z\\\\x05\\\\x00d\\\\x04\\\\x00\\\\x84\\\\x00\\\\x00Z\\\\x06\\\\x00d\\\\x05\\\\x00\\\\x84\\\\x00\\\\x00Z\\\\x07\\\\x00e\\\\x07\\\\x00Z\\\\x08\\\\x00RS(\\\\x06\\\\x00\\\\x00\\\\x00s\\\\xbf\\\\x04\\\\x00\\\\x00\\\\n    Flat iterator object to iterate over masked arrays.\\\\n\\\\n    A `MaskedIterator` iterator is returned by ``x.flat`` for any masked array\\\\n    `x`. It allows iterating over the array as if it were a 1-D array,\\\\n    either in a for-loop or by calling its `next` method.\\\\n\\\\n    Iteration is done in C-contiguous style, with the last index varying the\\\\n    fastest. The iterator can also be indexed using basic slicing or\\\\n    advanced indexing.\\\\n\\\\n    See Also\\\\n    --------\\\\n    MaskedArray.flat : Return a flat iterator over an array.\\\\n    MaskedArray.flatten : Returns a flattened copy of an array.\\\\n\\\\n    Notes\\\\n    -----\\\\n    `MaskedIterator` is not exported by the `ma` module. Instead of\\\\n    instantiating a `MaskedIterator` directly, use `MaskedArray.flat`.\\\\n\\\\n    Examples\\\\n    --------\\\\n    >>> x = np.ma.array(arange(6).reshape(2, 3))\\\\n    >>> fl = x.flat\\\\n    >>> type(fl)\\\\n    <class \\\\\\\'numpy.ma.core.MaskedIterator\\\\\\\'>\\\\n    >>> for item in fl:\\\\n    ...     print(item)\\\\n    ...\\\\n    0\\\\n    1\\\\n    2\\\\n    3\\\\n    4\\\\n    5\\\\n\\\\n    Extracting more than a single element b indexing the `MaskedIterator`\\\\n    returns a masked array:\\\\n\\\\n    >>> fl[2:4]\\\\n    masked_array(data = [2 3],\\\\n                 mask = False,\\\\n           fill_value = 999999)\\\\n\\\\n    c\\\\x02\\\\x00\\\\x00\\\\x00\\\\x02\\\\x00\\\\x00\\\\x00\\\\x02\\\\x00\\\\x00\\\\x00C`\\\\x01\\\\x00sF\\\\x00\\\\x00\\\\x00|\\\\x01\\\\x00|\\\\x00\\\\x00_\\\\x00\\\\x00|\\\\x01\\\\x00j\\\\x01\\\\x00j\\\\x02\\\\x00|\\\\x00\\\\x00_\\\\x03\\\\x00|\\\\x01\\\\x00j\\\\x04\\\\x00t\\\\x05\\\\x00k\\\\x08\\\\x00r3\\\\x00d\\\\x00\\\\x00|\\\\x00\\\\x00_\\\\x07\\\\x00n\\\\x0f\\\\x00|\\\\x01\\\\x00j\\\\x04\\\\x00j\\\\x02\\\\x00|\\\\x00\\\\x00_\\\\x07\\\\x00d\\\\x00\\\\x00S(\\\\x01\\\\x00\\\\x00\\\\x00N(\\\\x08\\\\x00\\\\x00\\\\x00Rb\\\\x01\\\\x00\\\\x00R/\\\\x01\\\\x00\\\\x00t\\\\x04\\\\x00\\\\x00\\\\x00flatt\\\\x08\\\\x00\\\\x00\\\\x00dataiterR6\\\\x01\\\\x00\\\\x00R\\\\x95\\\\x00\\\\x00\\\\x00R\\\\xc4\\\\x00\\\\x00\\\\x00t\\\\x08\\\\x00\\\\x00\\\\x00maskiter(\\\\x02\\\\x00\\\\x00\\\\x00R9\\\\x01\\\\x00\\\\x00Rb\\\\x01\\\\x00\\\\x00(\\\\x00\\\\x00\\\\x00\\\\x00(\\\\x00\\\\x00\\\\x00\\\\x00s,\\\\x00\\\\x00\\\\x00lib/python2.7/site-packages/numpy/ma/core.pyR:\\\\x01\\\\x00\\\\x009\\\\n\\\\x00\\\\x00s\\\\n\\\\x00\\\\x00\\\\x00\\\\x00\\\\x01\\\\t\\\\x01\\\\x0f\\\\x02\\\\x0f\\\\x01\\\\x0c\\\\x02c\\\\x01\\\\x00\\\\x00\\\\x00\\\\x01\\\\x00\\\\x00\\\\x00\\\\x01\\\\x00\\\\x00\\\\x00C`\\\\x01\\\\x00s\\\\x04\\\\x00\\\\x00\\\\x00|\\\\x00\\\\x00S(\\\\x01\\\\x00\\\\x00\\\\x00N(\\\\x00\\\\x00\\\\x00\\\\x00(\\\\x01\\\\x00\\\\x00\\\\x00R9\\\\x01\\\\x00\\\\x00(\\\\x00\\\\x00\\\\x00\\\\x00(\\\\x00\\\\x00\\\\x00\\\\x00s,\\\\x00\\\\x00\\\\x00lib/python2.7/site-packages/numpy/ma/core.pyR\\\\x82\\\\x01\\\\x00\\\\x00B\\\\n\\\\x00\\\\x00s\\\\x02\\\\x00\\\\x00\\\\x00\\\\x00\\\\x01c\\\\x02\\\\x00\\\\x00\\\\x00\\\\x04\\\\x00\\\\x00\\\\x00\\\\x06\\\\x00\\\\x00\\\\x00C`\\\\x01\\\\x00s\\\\xab\\\\x00\\\\x00\\\\x00|\\\\x00\\\\x00j\\\\x00\\\\x00j\\\\x01\\\\x00|\\\\x01\\\\x00\\\\x83\\\\x01\\\\x00j\\\\x02\\\\x00t\\\\x03\\\\x00|\\\\x00\\\\x00j\\\\x04\\\\x00\\\\x83\\\\x01\\\\x00\\\\x83\\\\x01\\\\x00}\\\\x02\\\\x00|\\\\x00\\\\x00j\\\\x05\\\\x00d\\\\x00\\\\x00k\\\\t\\\\x00r\\\\xa7\\\\x00|\\\\x00\\\\x00j\\\\x05\\\\x00j\\\\x01\\\\x00|\\\\x01\\\\x00\\\\x83\\\\x01\\\\x00}\\\\x03\\\\x00t\\\\x07\\\\x00|\\\\x03\\\\x00t\\\\x08\\\\x00\\\\x83\\\\x02\\\\x00rl\\\\x00|\\\\x02\\\\x00j\\\\t\\\\x00|\\\\x03\\\\x00_\\\\t\\\\x00|\\\\x03\\\\x00|\\\\x02\\\\x00_\\\\n\\\\x00q\\\\xa7\\\\x00t\\\\x07\\\\x00|\\\\x03\\\\x00t\\\\x0b\\\\x00j\\\\x0c\\\\x00\\\\x83\\\\x02\\\\x00r\\\\x9a\\\\x00t\\\\r\\\\x00|\\\\x02\\\\x00d\\\\x01\\\\x00|\\\\x03\\\\x00d\\\\x02\\\\x00|\\\\x00\\\\x00j\\\\x04\\\\x00j\\\\x0e\\\\x00\\\\x83\\\\x01\\\\x02S|\\\\x03\\\\x00r\\\\xa7\\\\x00t\\\\x0f\\\\x00Sn\\\\x00\\\\x00|\\\\x02\\\\x00S(\\\\x03\\\\x00\\\\x00\\\\x00NR3\\\\x01\\\\x00\\\\x00t\\\\x08\\\\x00\\\\x00\\\\x00hardmask(\\\\x10\\\\x00\\\\x00\\\\x00R\\\\xb9\\\\x01\\\\x00\\\\x00t\\\\x0b\\\\x00\\\\x00\\\\x00__getitem__R1\\\\x01\\\\x00\\\\x00R&\\\\x01\\\\x00\\\\x00Rb\\\\x01\\\\x00\\\\x00R\\\\xba\\\\x01\\\\x00\\\\x00R\\\\xc4\\\\x00\\\\x00\\\\x00R\\\\xed\\\\x00\\\\x00\\\\x00R\\\\x04\\\\x00\\\\x00\\\\x00R\\\\xab\\\\x00\\\\x00\\\\x00R6\\\\x01\\\\x00\\\\x00R\\\\xee\\\\x00\\\\x00\\\\x00R\\\\x15\\\\x01\\\\x00\\\\x00R\\\\x92\\\\x00\\\\x00\\\\x00t\\\\t\\\\x00\\\\x00\\\\x00_hardmaskRy\\\\x00\\\\x00\\\\x00(\\\\x04\\\\x00\\\\x00\\\\x00R9\\\\x01\\\\x00\\\\x00t\\\\x04\\\\x00\\\\x00\\\\x00indxR \\\\x01\\\\x00\\\\x00R6\\\\x01\\\\x00\\\\x00(\\\\x00\\\\x00\\\\x00\\\\x00(\\\\x00\\\\x00\\\\x00\\\\x00s,\\\\x00\\\\x00\\\\x00lib/python2.7/site-packages/numpy/ma/core.pyR\\\\xbc\\\\x01\\\\x00\\\\x00E\\\\n\\\\x00\\\\x00s\\\\x16\\\\x00\\\\x00\\\\x00\\\\x00\\\\x01$\\\\x01\\\\x0f\\\\x01\\\\x12\\\\x01\\\\x0f\\\\x02\\\\x0c\\\\x01\\\\x0c\\\\x01\\\\x12\\\\x01\\\\x1c\\\\x01\\\\x06\\\\x01\\\\x07\\\\x01c\\\\x03\\\\x00\\\\x00\\\\x00\\\\x03\\\\x00\\\\x00\\\\x00\\\\x03\\\\x00\\\\x00\\\\x00C`\\\\x01\\\\x00s<\\\\x00\\\\x00\\\\x00t\\\\x00\\\\x00|\\\\x02\\\\x00\\\\x83\\\\x01\\\\x00|\\\\x00\\\\x00j\\\\x01\\\\x00|\\\\x01\\\\x00<|\\\\x00\\\\x00j\\\\x02\\\\x00d\\\\x00\\\\x00k\\\\t\\\\x00r8\\\\x00t\\\\x04\\\\x00|\\\\x02\\\\x00\\\\x83\\\\x01\\\\x00|\\\\x00\\\\x00j\\\\x02\\\\x00|\\\\x01\\\\x00<n\\\\x00\\\\x00d\\\\x00\\\\x00S(\\\\x01\\\\x00\\\\x00\\\\x00N(\\\\x05\\\\x00\\\\x00\\\\x00RX\\\\x00\\\\x00\\\\x00R\\\\xb9\\\\x01\\\\x00\\\\x00R\\\\xba\\\\x01\\\\x00\\\\x00R\\\\xc4\\\\x00\\\\x00\\\\x00RZ\\\\x00\\\\x00\\\\x00(\\\\x03\\\\x00\\\\x00\\\\x00R9\\\\x01\\\\x00\\\\x00t\\\\x05\\\\x00\\\\x00\\\\x00indexR\\\\x8e\\\\x01\\\\x00\\\\x00(\\\\x00\\\\x00\\\\x00\\\\x00(\\\\x00\\\\x00\\\\x00\\\\x00s,\\\\x00\\\\x00\\\\x00lib/python2.7/site-packages/numpy/ma/core.pyt\\\\x0b\\\\x00\\\\x00\\\\x00__setitem__T\\\\n\\\\x00\\\\x00s\\\\x06\\\\x00\\\\x00\\\\x00\\\\x00\\\\x01\\\\x13\\\\x01\\\\x0f\\\\x01c\\\\x01\\\\x00\\\\x00\\\\x00\\\\x03\\\\x00\\\\x00\\\\x00\\\\x06\\\\x00\\\\x00\\\\x00C`\\\\x01\\\\x00sl\\\\x00\\\\x00\\\\x00t\\\\x00\\\\x00|\\\\x00\\\\x00j\\\\x01\\\\x00\\\\x83\\\\x01\\\\x00}\\\\x01\\\\x00|\\\\x00\\\\x00j\\\\x02\\\\x00d\\\\x03\\\\x00k\\\\t\\\\x00rh\\\\x00t\\\\x00\\\\x00|\\\\x00\\\\x00j\\\\x02\\\\x00\\\\x83\\\\x01\\\\x00}\\\\x02\\\\x00t\\\\x04\\\\x00|\\\\x02\\\\x00t\\\\x05\\\\x00j\\\\x06\\\\x00\\\\x83\\\\x02\\\\x00r[\\\\x00t\\\\x07\\\\x00|\\\\x01\\\\x00d\\\\x01\\\\x00|\\\\x02\\\\x00d\\\\x02\\\\x00|\\\\x00\\\\x00j\\\\x08\\\\x00j\\\\t\\\\x00\\\\x83\\\\x01\\\\x02S|\\\\x02\\\\x00rh\\\\x00t\\\\n\\\\x00Sn\\\\x00\\\\x00|\\\\x01\\\\x00S(\\\\x04\\\\x00\\\\x00\\\\x00s@\\\\x02\\\\x00\\\\x00\\\\n        Return the next value, or raise StopIteration.\\\\n\\\\n        Examples\\\\n        --------\\\\n        >>> x = np.ma.array([3, 2], mask=[0, 1])\\\\n        >>> fl = x.flat\\\\n        >>> fl.next()\\\\n        3\\\\n        >>> fl.next()\\\\n        masked_array(data = --,\\\\n                     mask = True,\\\\n               fill_value = 1e+20)\\\\n        >>> fl.next()\\\\n        Traceback (most recent call last):\\\\n          File "<stdin>", line 1, in <module>\\\\n          File "/home/ralf/python/numpy/numpy/ma/core.py", line 2243, in next\\\\n            d = self.dataiter.next()\\\\n        StopIteration\\\\n\\\\n        R3\\\\x01\\\\x00\\\\x00R\\\\xbb\\\\x01\\\\x00\\\\x00N(\\\\x0b\\\\x00\\\\x00\\\\x00t\\\\x04\\\\x00\\\\x00\\\\x00nextR\\\\xb9\\\\x01\\\\x00\\\\x00R\\\\xba\\\\x01\\\\x00\\\\x00R\\\\xc4\\\\x00\\\\x00\\\\x00R\\\\xed\\\\x00\\\\x00\\\\x00R\\\\xee\\\\x00\\\\x00\\\\x00R\\\\x15\\\\x01\\\\x00\\\\x00R\\\\x92\\\\x00\\\\x00\\\\x00Rb\\\\x01\\\\x00\\\\x00R\\\\xbd\\\\x01\\\\x00\\\\x00Ry\\\\x00\\\\x00\\\\x00(\\\\x03\\\\x00\\\\x00\\\\x00R9\\\\x01\\\\x00\\\\x00RT\\\\x01\\\\x00\\\\x00R\\\\xde\\\\x00\\\\x00\\\\x00(\\\\x00\\\\x00\\\\x00\\\\x00(\\\\x00\\\\x00\\\\x00\\\\x00s,\\\\x00\\\\x00\\\\x00lib/python2.7/site-packages/numpy/ma/core.pyt\\\\x08\\\\x00\\\\x00\\\\x00__next__Y\\\\n\\\\x00\\\\x00s\\\\x10\\\\x00\\\\x00\\\\x00\\\\x00\\\\x16\\\\x0f\\\\x01\\\\x0f\\\\x01\\\\x0f\\\\x01\\\\x12\\\\x01\\\\x1c\\\\x01\\\\x06\\\\x01\\\\x07\\\\x01(\\\\t\\\\x00\\\\x00\\\\x00R\\\\xc2\\\\x00\\\\x00\\\\x00R\\\\xc3\\\\x00\\\\x00\\\\x00R\\\\xce\\\\x00\\\\x00\\\\x00R:\\\\x01\\\\x00\\\\x00R\\\\x82\\\\x01\\\\x00\\\\x00R\\\\xbc\\\\x01\\\\x00\\\\x00R\\\\xc0\\\\x01\\\\x00\\\\x00R\\\\xc2\\\\x01\\\\x00\\\\x00R\\\\xc1\\\\x01\\\\x00\\\\x00(\\\\x00\\\\x00\\\\x00\\\\x00(\\\\x00\\\\x00\\\\x00\\\\x00(\\\\x00\\\\x00\\\\x00\\\\x00s,\\\\x00\\\\x00\\\\x00lib/python2.7/site-packages/numpy/ma/core.pyR\\\\xb7\\\\x01\\\\x00\\\\x00\\\\t\\\\n\\\\x00\\\\x00s\\\\x0e\\\\x00\\\\x00\\\\x00\\\\x06.\\\\x06\\\\x02\\\\t\\\\t\\\\t\\\\x03\\\\t\\\\x0f\\\\t\\\\x05\\\\t\\\\x1fc\\\\x00\\\\x00\\\\x00\\\\x00\\\\x00\\\\x00\\\\x00\\\\x00\\\\x0c\\\\x00\\\\x00\\\\x00B`\\\\x01\\\\x00s\\\\xa1\\\\x06\\\\x00\\\\x00e\\\\x00\\\\x00Z\\\\x01\\\\x00d\\\\x00\\\\x00Z\\\\x02\\\\x00d\\\\x01\\\\x00Z\\\\x03\\\\x00e\\\\x04\\\\x00Z\\\\x05\\\\x00e\\\\x06\\\\x00Z\\\\x07\\\\x00e\\\\x08\\\\x00Z\\\\t\\\\x00d\\\\x02\\\\x00Z\\\\n\\\\x00d\\\\x03\\\\x00Z\\\\x0b\\\\x00d\\\\x83\\\\x00e\\\\x04\\\\x00d\\\\x83\\\\x00e\\\\x06\\\\x00e\\\\r\\\\x00d\\\\x04\\\\x00d\\\\x83\\\\x00e\\\\r\\\\x00d\\\\x83\\\\x00e\\\\r\\\\x00d\\\\x83\\\\x00d\\\\x05\\\\x00\\\\x84\\\\x0b\\\\x00Z\\\\x0e\\\\x00d\\\\x06\\\\x00\\\\x84\\\\x00\\\\x00Z\\\\x0f\\\\x00d\\\\x07\\\\x00\\\\x84\\\\x00\\\\x00Z\\\\x10\\\\x00d\\\\x83\\\\x00d\\\\x08\\\\x00\\\\x84\\\\x01\\\\x00Z\\\\x11\\\\x00d\\\\x83\\\\x00d\\\\x83\\\\x00d\\\\x83\\\\x00d\\\\t\\\\x00\\\\x84\\\\x03\\\\x00Z\\\\x12\\\\x00e\\\\x08\\\\x00j\\\\x12\\\\x00j\\\\x02\\\\x00e\\\\x12\\\\x00_\\\\x02\\\\x00d\\\\n\\\\x00\\\\x84\\\\x00\\\\x00Z\\\\x13\\\\x00d\\\\x0b\\\\x00\\\\x84\\\\x00\\\\x00Z\\\\x14\\\\x00d\\\\x0c\\\\x00\\\\x84\\\\x00\\\\x00Z\\\\x15\\\\x00d\\\\r\\\\x00\\\\x84\\\\x00\\\\x00Z\\\\x16\\\\x00d\\\\x0e\\\\x00\\\\x84\\\\x00\\\\x00Z\\\\x17\\\\x00d\\\\x0f\\\\x00\\\\x84\\\\x00\\\\x00Z\\\\x18\\\\x00e\\\\x06\\\\x00d\\\\x10\\\\x00\\\\x84\\\\x01\\\\x00Z\\\\x19\\\\x00e\\\\x19\\\\x00Z\\\\x1a\\\\x00d\\\\x11\\\\x00\\\\x84\\\\x00\\\\x00Z\\\\x1b\\\\x00e\\\\x1c\\\\x00d\\\\x12\\\\x00e\\\\x1b\\\\x00d\\\\x13\\\\x00e\\\\x19\\\\x00d\\\\x14\\\\x00d\\\\x15\\\\x00\\\\x83\\\\x00\\\\x03Z\\\\x1d\\\\x00d\\\\x16\\\\x00\\\\x84\\\\x00\\\\x00Z\\\\x1e\\\\x00d\\\\x17\\\\x00\\\\x84\\\\x00\\\\x00Z\\\\x1f\\\\x00e\\\\x1c\\\\x00d\\\\x12\\\\x00e\\\\x1e\\\\x00\\\\x83\\\\x00\\\\x01Z \\\\x00d\\\\x18\\\\x00\\\\x84\\\\x00\\\\x00Z!\\\\x00d\\\\x19\\\\x00\\\\x84\\\\x00\\\\x00Z"\\\\x00e\\\\x1c\\\\x00d\\\\x12\\\\x00d\\\\x1a\\\\x00\\\\x84\\\\x00\\\\x00d\\\\x14\\\\x00d\\\\x1b\\\\x00\\\\x83\\\\x00\\\\x02Z#\\\\x00d\\\\x1c\\\\x00\\\\x84\\\\x00\\\\x00Z$\\\\x00e\\\\x1c\\\\x00d\\\\x12\\\\x00d\\\\x1d\\\\x00\\\\x84\\\\x00\\\\x00d\\\\x14\\\\x00d\\\\x1e\\\\x00\\\\x83\\\\x00\\\\x02Z%\\\\x00d\\\\x1f\\\\x00\\\\x84\\\\x00\\\\x00Z&\\\\x00e\\\\x1c\\\\x00d\\\\x12\\\\x00d \\\\x00\\\\x84\\\\x00\\\\x00d\\\\x14\\\\x00d!\\\\x00\\\\x83\\\\x00\\\\x02Z\\\\\\\'\\\\x00d"\\\\x00\\\\x84\\\\x00\\\\x00Z(\\\\x00e\\\\x1c\\\\x00d\\\\x12\\\\x00e(\\\\x00\\\\x83\\\\x00\\\\x01Z)\\\\x00e\\\\x1c\\\\x00d\\\\x12\\\\x00e(\\\\x00\\\\x83\\\\x00\\\\x01Z*\\\\x00d#\\\\x00\\\\x84\\\\x00\\\\x00Z+\\\\x00d$\\\\x00\\\\x84\\\\x00\\\\x00Z,\\\\x00e\\\\x1c\\\\x00d\\\\x12\\\\x00e+\\\\x00d\\\\x13\\\\x00e,\\\\x00d\\\\x14\\\\x00d%\\\\x00\\\\x83\\\\x00\\\\x03Z-\\\\x00d&\\\\x00\\\\x84\\\\x00\\\\x00Z.\\\\x00d\\\\x83\\\\x00d\\\\\\\'\\\\x00\\\\x84\\\\x01\\\\x00Z/\\\\x00e\\\\x1c\\\\x00d\\\\x12\\\\x00e.\\\\x00d\\\\x13\\\\x00e/\\\\x00d\\\\x14\\\\x00d(\\\\x00\\\\x83\\\\x00\\\\x03Z0\\\\x00d\\\\x83\\\\x00d)\\\\x00\\\\x84\\\\x01\\\\x00Z1\\\\x00d*\\\\x00\\\\x84\\\\x00\\\\x00Z2\\\\x00d\\\\x83\\\\x00d\\\\x83\\\\x00d+\\\\x00\\\\x84\\\\x02\\\\x00Z3\\\\x00d,\\\\x00\\\\x84\\\\x00\\\\x00Z4\\\\x00d-\\\\x00\\\\x84\\\\x00\\\\x00Z5\\\\x00d.\\\\x00\\\\x84\\\\x00\\\\x00Z6\\\\x00d/\\\\x00\\\\x84\\\\x00\\\\x00Z7\\\\x00d0\\\\x00\\\\x84\\\\x00\\\\x00Z8\\\\x00d1\\\\x00\\\\x84\\\\x00\\\\x00Z9\\\\x00d2\\\\x00\\\\x84\\\\x00\\\\x00Z:\\\\x00d3\\\\x00\\\\x84\\\\x00\\\\x00Z;\\\\x00d4\\\\x00\\\\x84\\\\x00\\\\x00Z<\\\\x00d5\\\\x00\\\\x84\\\\x00\\\\x00Z=\\\\x00d6\\\\x00\\\\x84\\\\x00\\\\x00Z>\\\\x00d7\\\\x00\\\\x84\\\\x00\\\\x00Z?\\\\x00d8\\\\x00\\\\x84\\\\x00\\\\x00Z@\\\\x00d9\\\\x00\\\\x84\\\\x00\\\\x00ZA\\\\x00d:\\\\x00\\\\x84\\\\x00\\\\x00ZB\\\\x00d;\\\\x00\\\\x84\\\\x00\\\\x00ZC\\\\x00d<\\\\x00\\\\x84\\\\x00\\\\x00ZD\\\\x00d=\\\\x00\\\\x84\\\\x00\\\\x00ZE\\\\x00d>\\\\x00\\\\x84\\\\x00\\\\x00ZF\\\\x00d?\\\\x00\\\\x84\\\\x00\\\\x00ZG\\\\x00d@\\\\x00\\\\x84\\\\x00\\\\x00ZH\\\\x00dA\\\\x00\\\\x84\\\\x00\\\\x00ZI\\\\x00dB\\\\x00\\\\x84\\\\x00\\\\x00ZJ\\\\x00dC\\\\x00\\\\x84\\\\x00\\\\x00ZK\\\\x00dD\\\\x00\\\\x84\\\\x00\\\\x00ZL\\\\x00dE\\\\x00\\\\x84\\\\x00\\\\x00ZM\\\\x00dF\\\\x00\\\\x84\\\\x00\\\\x00ZN\\\\x00dG\\\\x00\\\\x84\\\\x00\\\\x00ZO\\\\x00e\\\\x1c\\\\x00d\\\\x12\\\\x00eO\\\\x00d\\\\x14\\\\x00dH\\\\x00\\\\x83\\\\x00\\\\x02ZP\\\\x00dI\\\\x00\\\\x84\\\\x00\\\\x00ZQ\\\\x00e\\\\x1c\\\\x00d\\\\x12\\\\x00eQ\\\\x00d\\\\x14\\\\x00dJ\\\\x00\\\\x83\\\\x00\\\\x02ZR\\\\x00d\\\\x83\\\\x00eS\\\\x00jT\\\\x00dK\\\\x00\\\\x84\\\\x02\\\\x00ZU\\\\x00eV\\\\x00dL\\\\x00\\\\x83\\\\x01\\\\x00ZW\\\\x00dM\\\\x00dN\\\\x00\\\\x84\\\\x01\\\\x00ZX\\\\x00eV\\\\x00dO\\\\x00\\\\x83\\\\x01\\\\x00ZY\\\\x00dP\\\\x00\\\\x84\\\\x00\\\\x00ZZ\\\\x00e\\\\r\\\\x00e\\\\x06\\\\x00dQ\\\\x00\\\\x84\\\\x02\\\\x00Z[\\\\x00dR\\\\x00dS\\\\x00\\\\x84\\\\x01\\\\x00Z\\\\\\\\\\\\x00d'
tb.