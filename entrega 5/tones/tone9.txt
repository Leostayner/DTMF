cnumpy.core.multiarray
_reconstruct
p1
(cnumpy
ndarray
p2
(I0
tS'b'
tRp3
(I1
(I44100
tcnumpy
dtype
p4
(S'f4'
I0
I1
tRp5
(I3
S'<'
NNNI-1
I-1
I0
tbI00
S'ho\\\xbctA\x07\xbcn\xc9\x15\xbc\xdd\xa4]\xbc,\x81\x8b\xbcnU\x8e\xbc\xd1\x9dU\xbcK\xebo\xbb\xd6k\x17<\x911\xc5<\xed\xe9\x17=\xbd\x1e8=\xcfQ>=\x1bY(=\xd8\xb4\xfc<\xcf\x0e\xa0<\x1b\x895<\xb6\x9b\x02<[\x0fE<}\xa2\xca<\xee\xb63=l\xa6\x87=e\x89\xb5=\x05\xf0\xd9=\x15\xa6\xf0=20\xf9=\x85\xc9\xf3=Z\xf9\xe5=\xbb\x91\xd5=\x82\x8d\xc4=P"\xb5=\xd9\xb2\xa6=8{\x95=#O|=\xa0\xf7:=uF\xd0<e\xcd\t;{\x05\xc0\xbcV\xe6J\xbd\x9f7\x99\xbdU\x0f\xc9\xbd\x95\xed\xf1\xbdcX\t\xbe\xd4\xfc\x15\xbe\xee\xfc\x1e\xbe\xae@$\xbe\xc5\xb7%\xbe\xc1\xd1"\xbe\xac\xca\x1a\xbe!1\r\xbe#\xd8\xf5\xbd|K\xcc\xbd\xf4\xa5\x9c\xbd\xe9\xc2N\xbd\xa4G\xca\xbc\xf5\xdc\xa4\xba{\xca\x85<\xa0\xd4\xd9<\x1c1\xfc<\xfa\xcf\xf3<2\xbb\xd2<\xe54\xb3<\xc7N\xab<\xe5\xfe\xd4<Ku!=\x15bv=\xc0q\xae=I\x83\xe0=\xe6\x8f\x02>\x00)\t>)\x9a\x02>\xde\xf7\xe2=N\xf1\xb2=\xfe\xd5}=\x1b\xf7 =\x15\xe0\xb7<2]f<\xf8\xe3]<\x9f\xfe\x94<\xf8\x98\xcf<\x08(\x01=$-\x0b=\xe8\x9e\x02=\xe4`\xd5<\xa2c\x91<\x9e\xdc\x17<eD\x14;C\x85\x13\xbb\xb4\xf20\xbb`\xc9\x0c\xba\x19@\xcb:\xcc{\x07;\x8db\x83\xba\x9d\xa0\x17\xbc\x86\xf5\xbe\xbc\xba\xfb.\xbdT\xff\x84\xbd\xa6!\xb2\xbdt\xe6\xd9\xbd\x902\xf8\xbd\x153\x06\xbef"\x0b\xbe\x11\xd2\x0b\xbef\xbc\t\xbe\xc5\xc6\x05\xbe\xdbT\x01\xbe\xd7\xd9\xf2\xbdj\xc0\xd5\xbdW\xe0\xac\xbd\xa7\xb0o\xbd\x07\x86\xf1\xbc\xdc\xaa\xa4\xba\x9c\x0c\xc6<\x02\xad5=\x93\x89n=Ln\x88=\xf9X\x90=\xde\xba\x94=\xb4L\x9e=d\x1e\xaf=\xb7\xd0\xc5=\xac\xa6\xe2=\x14t\x01>\xf9g\x10>D:\x1b>\xd5\xb3\x1e>r\x88\x18>\x95\x18\t>{W\xe5=O\x98\xb0=\xbe\xccu=\x00S\x13=\xc7ny<tx\xab\xba%\xf5I\xbc\xed\xc9\x95\xbc\xa2\xa7\xab\xbc\x18W\xb1\xbc\xbc\xf8\xbe\xbc\xd6\xce\xea\xbc9\x9a\x1f\xbd,\x82_\xbd\xd2\xdc\x94\xbd\x12T\xb8\xbd\x1d\xfa\xd1\xbdP\xae\xd8\xbdMK\xcb\xbd\x00\xd4\xad\xbd\xf2|\x86\xbd\xc5k;\xbd\x06<\xed\xbc\xad\xaa\x91\xbc(3c\xbc<=\x90\xbcE\xc1\xe5\xbcJ\x03.\xbd~\x04h\xbd\x1f\xa4\x8b\xbd2\xe5\x95\xbd\x03m\x8d\xbd\xa2\xe5s\xbd^\xbeE\xbd\xab\xfe \xbd7_\x0e\xbd\x1f\x1b\x06\xbd\xc9\x92\x01\xbdt\xc1\xec\xbcy"\xb2\xbc\x8ao\x1f\xbc\xef\xe9\xfa; \x9c\xfe<u\xeci=\x8d\x10\xa8=md\xd7=\x19\x0b\xff=m\x99\r>?q\x16>\xfb4\x1a>\xe2\x9d\x19>\xeaY\x16>P\xf2\x10>\xb6s\t>\x91*\xfd=\x0e\xab\xdc=2\x8f\xb0=\x0b\xe9x=v\x1d\r=\xc3\xdb\'<e{%\xbc\x99\x8b\xd2\xbc\xba\xd8\x16\xbd\xf7G9\xbdXYX\xbd;\x1ey\xbd\xc6\xef\x8e\xbd\xca\xd4\xa4\xbd\xb4\xdd\xbf\xbd\x8dJ\xde\xbd\xca\xac\xfc\xbd3,\x0c\xbe\xe7\xed\x15\xbel\x83\x18\xbe\xa9\xc5\x11\xbeZ\x1e\x01\xbe`\x00\xd2\xbd3i\x9b\xbd\x9a\xbcM\xbd\xf2\xd9\xea\xbc#\xd1W\xbcZ\xba\x8a\xbb\xd5\x89\xd98\xbf\xc0\t;7\xf6/;i\xb9L;\xe5\xef\xab;\xd5\x941<\xedQ\xad<we\x10=\xaf\x08M=\xf5\x08~=,\xd5\x8a=L\x9b\x87=p\x91q=\xa9\xa3E=\xf2\x80\x19=\x7f\xc0\xf6<\xdc\xc4\xdd<\x05x\xf1<\xe4e\x1b=q\x1eP=CQ\x87=Q\x0c\xa6=\xe9/\xbe=\x8d\xfd\xcb=\x99\x0b\xce=\xd75\xc5=\xddz\xb6=\xce\xb8\xa7=\xe1\x81\x9c=`\x10\x94=\xec*\x89=\x16\xd0n=\xa3\xdf6=\xec\xe0\xd1<WW ;qX\xbf\xbcX\x9cK\xbd\xaf\x99\x99\xbdpN\xc9\xbdt\xb9\xf2\xbd{f\n\xbe\'t\x17\xbe\xc7\x83 \xbe\x07\t&\xbe\xb5T(\xbe\xd0\xbf&\xbeCb \xbe\x18\xb3\x14\xbe3\xa9\x01\xbe2\x8d\xce\xbdy\xa8\x90\xbd\xbb\x0f\x1f\xbdD\x92&\xbc\x12\xa2M<\xff\xa1\xe5<w\xc1\x10=\x9aR\x15=\xbbc\n=\xc1\x17\xef<\xe3m\xd6<\xed}\xe4<v\x02\x10=\xa9\x8aI=b\xbb\x8f=\xd6\x87\xc1=\xdb\xdf\xf0=e}\n>\xdf\x84\x12>\n\xa8\x0e>\xc6\x85\x00>uh\xd6=\xad\xab\xa4=Q\x81g=k\\\x12=\x92\xb1\xa3<\x02J-<\x12\xfa\xea;\xb1\x19\x02<.\xd8(<R\x07R<}\x18a<\xe5Y/<$7Y;\xcc\x17\xee\xbb\xa7\x91\x99\xbc\xed\xdd\xe8\xbc\xca\xd4\n\xbd1\xcf\x0b\xbdp\xf4\xf8\xbcjO\xc8\xbc\xc9\x01\x97\xbc0\x8d~\xbc\xec?\x94\xbc\xa9w\xdd\xbc\xd82,\xbd\xbe\xaaz\xbdtm\xa7\xbd(\xf4\xcd\xbd\xfb\x81\xeb\xbd\xf3\x07\xfd\xbd\x94B\x01\xbe\xea\xa2\xff\xbd\xe3*\xf8\xbdW\x03\xf0\xbd\xa9\x1a\xe8\xbd/P\xd7\xbd\x90^\xb8\xbd\xed\x19\x8c\xbdO\xa2(\xbd\xa7\xcaN\xbc\x96\x06j<I=\x1d=\x8e\xb0k=\x8c\xe4\x92=\xe5}\xa7=\xb1\xde\xb4=\x7f\x0c\xc2=K4\xd4=o\xfd\xe8=e2\x00>P\xbd\x0c>%\xc6\x16>\xf3\xe2\x1b>y\xf0\x19>1_\x0f>\x19"\xfa=\x96\x13\xcb=\xe2\xcc\x97=$\xcbI=\xe7\x02\xdb<\xbaL\xed;\xb1\x99\x18\xbctd\xb3\xbc\xb9L\xf4\xbci\x0b\n\xbdw\xc3\x10\xbd8\xf5\x14\xbd\xadW"\xbd^+D\xbd7\x9c}\xbd\xb0d\xa5\xbd\x04\xfa\xcd\xbd\xae\xdc\xee\xbdPg\xfe\xbd\x1c(\xf8\xbd\x9c\x1f\xde\xbdy\r\xb5\xbd\x08\x1c\x86\xbd\xb5\xdc4\xbd\xa4\xf0\xe3\xbcf\x89\x9a\xbc\xd6\x00\x99\xbcA\xd7\xd5\xbc\xdac\x1c\xbd\xcf\xe0T\xbd\x97Sx\xbd\xd2\xe4s\xbd \xcaO\xbd\xe9\xe0\x15\xbd\x8bW\xb5\xbc\t\x9a;\xbc\x9c4\x9f\xbb\xb3\xb5n\xbb%\xc9\xd5\xbb\xf9X%\xbc\xbb.K\xbc\xa3O\x15\xbc\xf6\x987;\xe9\x88\xb3<P\x9d==\x126\x95=q\x93\xc7=\xd5\x02\xf0=\x97\xa6\x05>\xbaj\x0c>\x0b\x8a\r>\xc0\x1a\x0b>\r\x0f\x07>2\x8b\x02>iu\xfb=kF\xed=?\xe7\xd5=%\x15\xb4=6\x08\x8a=\xd905=\xb0\xfa\xa4<\xc97\'\xbb_\xed\xba\xbc\x93\xbf%\xbdD\xe4b\xbd\x06~\x8b\xbd\xad\x8c\xa2\xbd\xd0\r\xb9\xbdN\x80\xcf\xbd\xf9\xfd\xe3\xbdD\x8d\xf6\xbd\xcb\x8b\x03\xbe\xe1\x8b\n\xbe\x85_\x0f\xbe$D\x0f\xbe\xd8\xad\x07\xbe\xdf\xf7\xf0\xbd_\x05\xc7\xbd\xb3\xaa\x97\xbd\x1c\xcdP\xbd\x1eF\xf2\xbc\xd5\x035\xbc\x938O;\xa8\xd8H<p\xeb\x88<\xfa\x0f\x8b<@\xfdw<(Yp<\x17\x90\x93<G\xbd\xdb<=\x81\'=\xec\x1bn=\xe6\xd2\x99=s\xc1\xb1={\xcf\xb8=\x98\\\xaf=\xbb|\x99=\xfa\x89{=\x0f|E=\xff\x11\x1c=\x00p\x08=H\xbd\x0e=\x8d\x80+=x\xe3W=AP\x85=\xc8\x1b\x9b=c\xcd\xa6=\xc6>\xa6=EC\x9c=\xc4\xfa\x8d=\x12b\x81=\x05=s=\x17\x85l=4vf=\xee\xeaT=\x13\xad0=\x9c\xc9\xe8<\xd8\xff\x07<SR\x80\xbcr\x06,\xbd\xf1K\x8b\xbd\xcah\xbc\xbd8\xb2\xe6\xbd\t\xfb\x03\xbe\xd0K\x10\xbe\x1a\x1d\x18\xbeo5\x1c\xbe\xf2\xd7\x1d\xbe\x9f\xe5\x1c\xbe\x11\x7f\x19\xbe\x8e\xb4\x11\xbe\xcbP\x01\xbe\xcf\x95\xd0\xbdQ\x98\x92\xbd]\xe6\x1d\xbd#_\xfb\xbb\xfe\x10\x91<+W\x12=\xe6,7=I}==F\x8c0=\x92\xca\x1a=\xb2g\x0f=g*\x1a=\xc6\xb1:=3\x01u=,\x84\xa3=\xe7d\xd1=\xbbk\xfe=\xfc\x84\x11>\xac\x9e\x1a>Ct\x18>|\xe3\x0b>\xe6\xbf\xee=\xe6a\xbe=\x9b\xca\x8d=\xb4\x97B=\x8fg\xf4<\x0er\x8e<B\x86\x1f<\xa6T\xae;\x14WK;\xca\xaa\n;Pk\xe7\xb9\xfb"\xd0\xbb\xf5\x93\x85\xbc\xc75\xf3\xbc\xe5\x9a1\xbd %_\xbd\x9a\xfcw\xbd\xd7Pw\xbdXxa\xbd\xcb\x86=\xbd\x15\x91\x16\xbd\x80\xef\xed\xbc\xfc\x02\xcb\xbczn\xd1\xbc$\xb4\x04\xbd\x06\x969\xbd.\x8d\x7f\xbd\x15X\xa4\xbd\xa8\x97\xc3\xbd\xb0\xd7\xd8\xbdCb\xe1\xbda\x8e\xe0\xbd\x93\x17\xdb\xbd\x81\xa6\xcd\xbd\xcc\x02\xba\xbd\xe3\xb0\xa2\xbd\xe0N\x87\xbd\x0f@T\xbd?K\x10\xbd\x98H\x80\xbc\xa7\xf5\xa9;A\xa8\xd6<<!<=*\x80\x82=\x99\x14\xa7=v\x11\xcb=\xa3\xb5\xe9=\xc3\t\x02>\x8f\xbb\r>\x1e\xd1\x16>\xa0\x9c\x1c>\xb7D\x1e>\xa4\x9c\x1a>\x05\x06\x11> \x92\x01>R\xd9\xda=\xda\x1e\xad=\xcdd|=\xb2\xa9 =\xb4\x03\x95<\xce\xdd[\xb7\xd1\xd1h\xbc\x95\x18\xcb\xbc\xad\xba\x02\xbd\xeb\x1b\x12\xbd}\x1d\x1b\xbd$\xf8$\xbd\x8f\xfa8\xbd+\xf9_\xbd\xab.\x8e\xbd\xc3c\xb5\xbdk=\xde\xbd\x1b\x13\xfe\xbd%I\x06\xbe;\xd4\x02\xbe\x15D\xeb\xbd\x14a\xc3\xbd\x97\x91\x94\xbd(uJ\xbd\'t\xf6\xbc(\xa6\x96\xbc>Tu\xbc\xd3\xa1\x97\xbcx&\xe0\xbc\x0e\x1a\x18\xbd\xf2\xe4+\xbd\xbdZ!\xbd\xe6\x88\xf3\xbc\x1a\x04}\xbcsJO\xb9\x91\x16]<\xc0\xaf\xba<\xa0q\xd2<\xba\x88\xba<U\xa4\x80<_;\xf7;\xd3\xdaE;\x8d\x13\xa4;\xb3\x12h<{%\xff<;3^=\x04\x8d\xa1=\xf1f\xcf=\xf8A\xf3=v\xc3\x04>\xe2\x98\x08>;\x01\x06>yM\xff=\xe2\x8a\xf0=\x02\xe6\xe1=g6\xd2=\xa1#\xbf=\x15\x12\xa7=\xc6y\x89=#\xb4J=\xfc\x89\xea<ci\xc2;\xd6\x0c\x93\xbc\x9e\xb8+\xbdL\xf7\x82\xbd\xd2\x0f\xaa\xbdF\\\xca\xbdhG\xe5\xbd\x04\xaa\xfb\xbd\xbbD\x06\xbe\xbe\xb3\x0c\xbew\xf0\x10\xbe\x8ao\x12\xbe\x90\x1a\x11\xbe\xe1W\x0b\xbe\xf5R\x00\xbem\'\xe0\xbdok\xb8\xbd\x9fg\x8d\xbd.\x8f<\xbd\x05\xb2\xb9\xbc\x9db\x0c\xbb\x08\xc3X<\xa5\xb4\xb3<\xca\xce\xc5<\xfa\xd8\xb0<x\x1f\x8b<\x9d\xea^<}Fo<\xee\xb2\xb5<\x1dt\x1a=\x8f\x1cs=O\xd2\xa7=fO\xcd=7\xe9\xe0=D]\xdd=\x8d\xa4\xc5=b\x94\xa0=\xc8+l=\xf4\xdf\x1f=\xd7\x98\xd4<wS\xa5<:\xd0\xb5<\xd4\xe4\xf8<6\n)=\x905O=\xf91c==\x19a=\xc6\x1fL=\x1f\x0f/=\x07\xe5\x13=?\xb5\x00=\xefn\xf1<\xdf\xe8\xf4<\x9c\xd4\xfd<\xb6\xaa\xf5<\xa8Y\xc5<\n\x95@<\xe7S\xdd\xbb\xd4\xb3\xf7\xbc\xc0yf\xbdN\xd9\xa7\xbd\xa4\x04\xd7\xbdR\xa3\xfc\xbd\x07\x99\x0b\xbe[\x99\x13\xbe\x02i\x17\xbe\x0c\xa2\x18\xbec\'\x18\xbeu\'\x16\xbe(T\x12\xbe(\xc5\x08\xbe\xe5]\xec\xbd!\xf5\xb8\xbd\xef\xdet\xbd\xbb\x9f\xdf\xbc32\x1d;\xc8\xa5\xde<\xde\x9c4=W\x8dV=:\xf3_=A\x82X=\xa6\xf5N=F1V=\x9fGq=Tv\x90=\xccm\xb3=\x18\xad\xdc=\xcf\x0f\x03>M\xd8\x14>\xe8\x0c\x1f>\xdc8\x1e>\xb0N\x12>\x85#\xfb=[Z\xc7=0\xe1\x91=`\x84A=\x8e\xab\xd9<\xa5\xa2\'<\x803\x8e\xba\xbcK\xfd\xbb\xa2\x8f4\xbc\x1b\x19D\xbc\x0b%W\xbc\x95G\x90\xbc\xf9\'\xd8\xbc\xd4\x01#\xbd\xf5\x0ee\xbd\x81\x9b\x91\xbd\xe1\x12\xa8\xbdIb\xb0\xbd\xf7^\xa9\xbd\x07]\x95\xbdR\xbar\xbd\x1a\xdd8\xbd\x96\x8e\t\xbd\xe81\xdd\xbc\xce{\xdb\xbc/~\x08\xbd\x8c+<\xbd\x97\x1a}\xbd`U\x9d\xbd\x91\x03\xb5\xbd\x80\x82\xc0\xbd\xcd\x12\xba\xbd\xf3\xd9\xa6\xbd\xc0z\x8f\xbd\xd5\xe9s\xbd\x1c\xadW\xbdW\xd5C\xbd\x19>/\xbd\x8f\xb6\x14\xbd\x0c\x7f\xd1\xbc\xed^)\xbcb\x8e\x07<\xb4\xfe\xfe<6<g=\xca\x97\xa6=\xcf\xfa\xd6=vi\x00>!\xca\x0f>\xca\xe1\x19>\xdaL\x1f>qV ><\x8e\x1d>/a\x17>b\xab\r>\xb7!\x00>(]\xdc=\x84U\xae=#qr=\xfdI\t=,\x101<\xd0I\x00\xbc\\\xc5\xac\xbc\x00\xc6\xf2\xbc\xc8\x06\x13\xbdb\x1b(\xbd\x91]=\xbd\x0c\x12W\xbd\xe3\x03y\xbd\x00\xa0\x94\xbd\x1d\xe5\xb3\xbd\x80X\xd6\xbd\xd8e\xf6\xbd\x0e\xf5\x06\xbeA\x8a\x0b\xbe}Q\x07\xbe\x9f\xfd\xf3\xbd|?\xcb\xbd\xf6\xa1\x9b\xbd5\x85Y\xbd\xbcg\x0b\xbd\xbd\x7f\xa9\xbcn\xbdX\xbc*)=\xbco\xd0o\xbc\xfc"\x97\xbcn\x80\xa0\xbc-x\x87\xbc\xf1\x89\x05\xbc\x88\x05\x8a;<\x99\x9a<\xb2\x85\x07=v7/=$?>=&\xfb1=)v\r=\x04\xa9\xbe<t&a<\x04\xe6\x10<m2-<\x08\xa7\xa8<9\xbc\x1c=\xba\xaev=&c\xaa=\xc5\r\xd3=\xd2\x98\xee=\xcb\x97\xfb=<Q\xfa=*R\xee=\x1c\x9b\xdd=(g\xcc=_x\xbc=\x83s\xad=Q%\x9d=\x1b\xc4\x87=\x89\xd5R=K\x07\x05=\xb6z&<\x9e\xf5p\xbc=M%\xbd\x96C\x86\xbd\x92\xee\xb6\xbd\xf6Y\xe1\xbd\x8e\x0e\x02\xbe[\x9f\x0f\xbe8\x9b\x19\xbe\xa3+ \xbeK\x06#\xbe\x8a\x11"\xbe\x9e\xa7\x1c\xbev\xb3\x11\xbe\xba\x96\x01\xbe\xecy\xdc\xbd\x1aa\xb0\xbd\xfaM|\xbdE\x96\x12\xbd\x97\xff4\xbc\xdbh\x1b<\xb7\xc2\xbd<\x07h\xf9<\x8e\x8b\x03="\xc4\xf1<9\x9b\xd3<>\x81\xc3<\xa0\xd4\xd8<;\x0e\x16=\x07}_=\xcb\xb8\x9f=EI\xd2=`?\xfc=\nO\t>\xbe\xa6\x07>4\xda\xf4=-\xbd\xc9=\xed\xd7\x96=q\nL=@\xec\xfa<\xcc\xa9\x9c<DJ\x82<\xa9\xcd\x9b<\xa8\xbc\xd2<$\x1d\x06=\xa5U\x17=\x91#\x16=8{\x04=\xbag\xce<\x96\x99\x8b<\xaf\xc2#<\x00F\xa2;*\x98J;\x89\xe4\x8e;\x1b\xdf\xc8;\xec\xab\xcd;\x8c b;c\xea\x85\xbb\xb7\xbf\x8d\xbc5z\x12\xbdO\xd6l\xbd\xde\xea\xa4\xbd\xf0\x18\xcf\xbdH\xb3\xf0\xbd\xef\xf6\x03\xbe\x86\xc2\n\xbec9\r\xbe\x8f{\x0c\xbewv\t\xbeQ\x82\x05\xbeV\xa2\xfd\xbd5\xf1\xe2\xbd\x87\x1d\xbc\xbd"j\x89\xbd\x07\xca\x1c\xbdOF\x1d\xbcG\x1a\x8b< J\x1f=\xae\xa2_=I\xa3\x84=K\xf8\x8e=\x07\xe6\x93=\xadV\x9c=D\xa3\xab=\x1eN\xc1=\x02\x01\xdd=\xab\xad\xfc=\xf3\xde\r>\x04b\x1a>\xb2\x94 >o\xb7\x1d>\xc0f\x11>\x02a\xfa=\xe1y\xc8=H\x01\x94=m!D=\x1e\xe2\xd7<hO\t<\x85\xdb\x9e\xbb\xb7\x87U\xbcn\r\x91\xbcX3\xa3\xbc\xec\x07\xb4\xbc\x0el\xdb\xbc\xafL\x13\xbd\x91\xa8L\xbd\xe3\xda\x89\xbd\xd3\x1c\xae\xbd\x83x\xcb\xbd\x06\x84\xd9\xbd\xadE\xd3\xbd\xd1\xb7\xbb\xbd\xd7\x1d\x98\xbd\xf7L_\xbd\x05M\x16\xbd\xc0\x83\xbe\xbc\x9a\x8a\x87\xbc\xff\xec\x8f\xbcc\xda\xd0\xbc\xad\xfb\x1e\xbd\x81}Z\xbdVz\x87\xbd\x050\x98\xbd\xf6\xff\x96\xbd\xfab\x87\xbd\xc6\x1db\xbd\x86\'8\xbd/\xb0\x1d\xbd>\x14\x10\xbd\x14~\x08\xbdsV\xfb\xbc\x04\x9d\xc9\xbc\x80]b\xbc\xad\n\xdc:F\xe8\xba<)BE=\x89=\x96=\xd4\xdc\xc6=|\x0c\xf2=$]\t>\xc3r\x14>P\x8a\x1a>+\xaf\x1b>fP\x19>\xb4\x8c\x14>\xe0d\r>\x19L\x03>L*\xe9=\x01\xe0\xbf=\xd0D\x8d=f\xef-=*\xc9\x8d<P\xd4\x90\xbbT\xa6\xb1\xbc\xa1\x96\x0b\xbd\xf7\xc60\xbdy\xe4O\xbdW\xe8o\xbd\x90U\x8a\xbd\xff\xbc\x9f\xbd.e\xba\xbd,2\xd9\xbd~\xea\xf8\xbd\xb5d\x0b\xbef\xd5\x16\xbe\x07\xe5\x1b\xbe\xef\x1b\x18\xbe}^\n\xbevy\xe8\xbd1\xd2\xb2\xbd\xa1Sz\xbdR\x06\x1c\xbd,\x10\xa9\xbc\xd7\x06$\xbc\xd6\xf9\x96\xbb\xday\x01\xbb"DA\xba\xce\x0bs8\x11X\xf6:"\xb3\xd6;\xd49}<[\xc0\xe9<\x98\xfa1=c\xabg=2\xb1\x83=\x8a\xb2\x84=\x1a\xb1q=\xd0\xb8H=&\xe9\x1a=%\xf5\xee<r\x87\xcb<Su\xd2<\xad\x0c\x05=\xaa\x9d6=8\x1fu=\xdd,\x9b=\xb4K\xb7=E\xc5\xc9=\xd5\n\xd1=v\xfc\xcc=W\xac\xc0=\xde\xc0\xb1=N>\xa5=\x19\xe6\x9b=\x8b\xd1\x91=\xab\xba\x82=\xbb\xceT=\xfb\xfb\r=Y\x05P<#nK\xbc\x14\xbc\x1e\xbd\xe8g\x84\xbdT\xbb\xb5\xbd\xe9^\xe1\xbdc!\x03\xbep\xcb\x11\xbe1\x86\x1c\xbe^\xa3#\xbe\xcfp\'\xbe\xae\x9a\'\xbe\x03H#\xbe\xd4\xd3\x19\xbe\xdf\n\n\xbe\xb98\xe5\xbd\x07f\xaa\xbd\xdezS\xbdo\xeb\xac\xbc\x08\x91\x8e;<\xe8\xbb<\xc6|\t="\x04\x17=\xb8\xb9\x11=\xe8\xee\x01=\x117\xe4<\x14\xa2\xe4<-\x06\t=\xb8F9=\xc4M\x83=\xee\xc9\xb3=\n\xc7\xe4=n\x99\x06>g\xf2\x11>\x05c\x11>z\xcf\x05> \x06\xe4=\x1a\xd8\xb2=\xa0v\x80=\x8c\xd3&=ya\xbf<*\x9bE<\x01\x96\xe6;\xd3\x88\xdf;\xc4\x91\x0e<\xbeD4<-oJ<\xfeh-<+\xc6\x9a;\xde;\x97\xbbD\xab}\xbcO\x1c\xcf\xbcjg\x01\xbdT\xcb\x06\xbd\x13\x8d\xf5\xbc)]\xc9\xbc\xe0N\x99\xbc\xcf\x85x\xbc\xb2\xca\x87\xbc\xde\xc4\xc6\xbc\xa9?\x1c\xbdP0h\xbd\xe3S\x9e\xbd\xfb\x94\xc6\xbd\x04+\xe7\xbd\xfe\xae\xfc\xbd\xad\xd2\x02\xberz\x02\xbe\xbb\xab\xfe\xbd\x82%\xf6\xbd\xbc\x1c\xef\xbd]O\xe3\xbd\xed{\xca\xbd\x12\x16\xa4\xbd\x90>`\xbdcZ\xd6\xbc\x8e\xd3\xde:\xde:\xe2<\x03aJ=%`\x87=\x98\xde\xa0=\xc5\xc1\xb1=\xa5&\xbf=k3\xd0=\x863\xe4=\xe6c\xfa=#\x94\t>\x9b\xf4\x14>1\x98\x1c>\x94M\x1e>Q\x0b\x18>\xddV\t>~\xd6\xe7=0\xd6\xb5=S\xb2\x81=\xf9L =\xf9\x02\x92<\xc2\xfa\x03\xba\xf2\xf9y\xbc\xbc\x07\xcf\xbc(\xed\xfa\xbcp@\x06\xbdIo\t\xbd\x99\x9b\x11\xbd\xf52*\xbd\x86\x84Z\xbd\xa4\xeb\x90\xbd\xe7\xc8\xb9\xbd!\xa2\xde\xbd\x08a\xf5\xbd\xda\xf4\xf6\xbd\xd8\x96\xe3\xbdz\x11\xbf\xbd\xc4\xdc\x90\xbd9\x8eE\xbd\xd9#\xf2\xbc\xaf\xd6\x8d\xbc\x90\x98\\\xbcW_\x93\xbca9\xe8\xbcS\xad+\xbd\xe9\xb3[\xbd(ti\xbdM$T\xbd\x0e\x13%\xbd\xab\xe7\xd5\xbc\xf9_l\xbc\xc9\xcc\xd2\xbb\xb6;N\xbb\xab>\x93\xbb5\xf6\xf6\xbbz\xf5&\xbc\xad\xcc\x13\xbc6/\x19\xb9\xd6\xe1\x86<D\n\x1f=\xc3\xe9\x83=\x95\x9d\xb7=N\x84\xe3=H\xce\x01>\xf2E\x0b>\x0f\xf4\x0e>\xfaT\x0e>*K\x0b>\x84z\x07>\xd5\x12\x03>\xf9\xfc\xf9=\xa4\x81\xe5=C\xbb\xc5=\x00s\x9c=?\xbdY=\x0f\x99\xe9</!\x9e;\x91\xc6\x84\xbcpf\x0c\xbd\xb5UJ\xbd\xc0~\x7f\xbd\xb6\x8f\x97\xbd\xad~\xae\xbd\xd8P\xc6\xbd<;\xdd\xbd\xcb3\xf2\xbd;\xd5\x02\xbe@X\x0b\xbe\x97\xb1\x11\xbe\xd9\xc5\x13\xbe\xa6\x84\x0e\xbeU\xd4\x00\xbe\xda\x1f\xd9\xbd\xb3\xe4\xa8\xbd\x98\xd9m\xbd]L\x11\xbd \x80\x81\xbcGEK\xb9t\xcd$<>\xb0~<\x18y\x8b<\x06k}<\x87\xe9d<\x1d\xb9\x7f<\xcc\x10\xb6<\xe1-\r=\xa6\'O=DC\x8a=\xcfy\xa5=\x0b\x1c\xb1=\x91\x9b\xab=G\xd4\x97=}{y=[\xe8A=\ne\x13=U\xe2\xf1<\x80\xe7\xef<K\xac\x0f=\xa8\xa09=\xfe\x9fl=\xffo\x8e=\x88N\x9e=\x02\x0f\xa2=1\xe1\x9a=\x83\xd9\x8d=\xd8\xdc\x80=\x92\x92p=\xc8\x90j=\x7f\rh=\x82\x9a]=\x15bB=\xc73\x0f=+y\x88<r\x19\xce\xbb\x06?\x04\xbd\xe7\xb6q\xbd\x9d\xc7\xac\xbd\xdf\xa6\xda\xbd\x92 \x00\xbeN\xa8\x0e\xbe.\xf3\x18\xbe\n(\x1f\xbe\xdb~"\xbe\xba\x1d#\xbe\x8e\xdf \xbe\xa1\xf4\x1a\xbe\xb0a\r\xbe\xb0\n\xed\xbd\xdd\xa1\xb1\xbd(\xf2[\xbd\x9a\xd1\xad\xbc\xce\xdd\xd3;\x94k\xde<Ow\x1f=\x10V-=\xdew$=\xec\x04\x0f=?I\xfc<\xdf\xe2\x01=\xd7\x18\x1c=\x86\xa2N=\x8b\xb8\x8d=\xf2\xc3\xbb=\x01N\xea=\xa3\xaa\t>\xa7\x84\x16>\xcc=\x18>,\x1d\x0f>\x91\x1c\xfa=\xe1w\xcb=\x12\xdf\x99=\x8ciU=EL\x05=\x11\xb6\x92<w\x85\x0e<v\xcbm;\x10o\xa4:\x1a\xc0\x80:\x8c\xf9\xc89\x92?O\xbb*E1\xbc\xf8N\xb9\xbc\x92\xbb\x15\xbd\xd8\x9cI\xbd\xc1\xeak\xbd\x9e\x85u\xbd\x91\x8bg\xbd\x8b\xa8G\xbd\xad\xcb\x1f\xbd1\\\xf9\xbcCM\xcb\xbc\x9a\xad\xc4\xbc(\xc9\xef\xbc\xa1\x9d&\xbd"!k\xbd\xac\xad\x9b\xbdH\xf1\xbd\xbdTt\xd7\xbd\xe3X\xe4\xbd\xfd\xfa\xe4\xbdn\\\xe0\xbd\xf0\x07\xd7\xbd6\xec\xc5\xbd\x9d7\xb0\xbd\xd6Y\x95\xbd\x1chm\xbd\xafI*\xbd%@\xb5\xbc\xe7nD\xba\xa4I\xaa<\x02 *=\xa5\x0bv=QA\x9e=\x12\xcf\xc1=\xf9\x1c\xe2=\r\xa5\xfd=aa\x0b>\xd0M\x16>\x06u\x1e>1\xbe">\xe5\xd4!>\xf2\xfb\x1a>\x19\x85\r>\xba\xc8\xf4=2%\xc7=\xb2H\x96=\xc7\nM=\x04t\xe5<j\x8e\x05<H\xba\x02\xbc\x8f\x94\xa3\xbc\xb4\xf6\xe8\xbcv\xd0\x08\xbd\xae\xa9\x12\xbd|\t\x1b\xbd}(*\xbd3\xb9J\xbd\x1c\xcd\x80\xbd\x8a\xc0\xa5\xbd\x08\xe6\xcf\xbdm\xe8\xf4\xbdWT\x05\xbe\xc4\xec\x05\xbe\x8bs\xf7\xbd\x9c\xab\xd2\xbd\xb1\xa0\xa4\xbd\n\xa8g\xbd\xdaO\x10\xbd\xd9\x91\xa6\xbc\xfcEe\xbcv\xd1z\xbcn\xf5\xb8\xbc\xb7\x9a\x06\xbds\x99#\xbd\xbe?#\xbdPJ\x04\xbd\x86>\x99\xbc[\x86I\xbb\xbdP=<\xf2\xbf\xb9<\xb5\xc8\xe1<\x98\x12\xd5<r\x8b\xa0<x*0<K+\x80;\xbd!=;\x00\r\x13<\xf5\x12\xbc<.P5=\xf1]\x8d=R\xd6\xbd=\x93f\xe6=9/\x01>%\xe2\x07>\x8d\x9e\x07>dX\x02>\xc4\x1a\xf6=\x96\xa4\xe6=\x00\x86\xd6=\x9fu\xc3=\xaa\x92\xab=.v\x8e=&\x8aV=\x890\x04=\x14\x0e&<\xabmY\xbc\x8b\xf4\x17\xbd\xb0&u\xbd\xef{\xa3\xbd\xd4f\xc5\xbd\xb7[\xe1\xbd\xb1D\xf8\xbd*\xdf\x04\xbetI\x0b\xbe\xf0\xca\x0f\xbe\xe7\x02\x12\xbe/\xca\x11\xbe\xc1\x1a\x0e\xbe_l\x05\xbe*\xc6\xee\xbd\x8b\xdc\xc9\xbd0>\xa0\xbd)\xece\xbd\xf1B\x05\xbd\xf3\x94+\xbc6G\xea;\xd6d\x98<\xa0\xeb\xbd<Y\xc0\xb5<\xe2\xd4\x93<j\xf8d<\r\xddX<\x97U\x94<\x0f\xd8\xf9<\xb9WM=\xccI\x95=\xb5\xe6\xbe=9\x88\xd9=\xc6R\xde=zn\xcd=\x024\xad=\xbd3\x85=\xa8\x03<=\xfc{\xff<\xd2\x8f\xbe<c\xd9\xbc<\xfbT\xf3<\r\xf9$=\xf8xP=O\xcdl=\xcf\xdes=\\#f=s\xdfI=\x13u,=s\xeb\x14={\xa7\x06=si\x02=l\xca\x02=B\x9a\xfd<2\x9f\xd4<^\x94w<\x1bW\xdf\xba\x81\x0c\xc2\xbc\xbf\xe4G\xbd\xb5$\x98\xbd\x81[\xc8\xbd\x9bc\xf0\xbd\xcd\xc2\x06\xbe>\x13\x10\xbe+\xd1\x14\xbe\xdc[\x16\xbe\xf05\x16\xbe2\x82\x14\xbeZ\x7f\x11\xbe\xc4\x87\n\xbe\x06\xda\xf5\xbdn\xb5\xc6\xbd\xdbp\x8b\xbd#:\x12\xbd\x06\x95\xa0\xbb\xd5p\xb2<G9*=4\x86V=\xf4\x90f=\x89Jc=\x1d\xb2W=\xcd\xf7W=\x18\x17l=\xd7\xf3\x89=\xa5z\xa9=Iu\xd1=\xc8\xf2\xfb=\xbb\xad\x11>^p\x1f>\x90\xd6">b\xb6\x1a>5\xb8\x08>_x\xe0=\xc4\x05\xab=\xfb\x17p=\xeeU\x16=G@\x99<-+\xb0;\xc1v:\xbb^\x18\xf0\xbb!\xe0\x18\xbcK\xfd)\xbc\xf9\x7fb\xbc\xe3\x93\xaf\xbc\x0f\xbc\t\xbd>nJ\xbd\x84V\x86\xbd\xf6\x95\xa0\xbd\xfa\xc4\xad\xbd\xb0\x89\xab\xbdfT\x9b\xbd\xc6D\x81\xbd\x8d\xf9G\xbdw\xe4\x14\xbdS\x90\xe5\xbc\xf0\xb0\xd2\xbct\x7f\xf9\xbc\x8ao*\xbd\xaf$j\xbd\xf6\xd4\x95\xbd\x9d\xa8\xb0\xbdtC\xc1\xbd\xfa\x8c\xc0\xbd\\\x04\xb0\xbd2\xb0\x98\xbd\xda\xce\x80\xbd\xcfl^\xbdb=G\xbd\x89]1\xbd!-\x17\xbdqj\xdd\xbc\xe9\xffJ\xbc\xe9\\\xb8;\xe9\xad\xe0<\xafbV=\x89.\x9e=;i\xce=\xf0\x93\xf9=\xa8;\r>\xfe\xd3\x17>W\x96\x1d>\x89\xf8\x1e>\xde\x82\x1c>\xc9\xe2\x16>\x02%\x0e>\xd2\x01\x02>=\xf2\xe3=?(\xba=\x91\xc7\x87=\xc4\x9f&=\xc0\xe0\x8b<\x10\x01E\xbb\xc3\xac\x95\xbc\xcf\x9b\xe8\xbc\xab}\x10\xbd\x9b\xc2\x8c\xbd\xa8Y\xbc\xbd-\xea\xe4\xbd\xa9+\x03\xbe&\xbc\x10\xbej:\x1b\xbeOi#\xbe\xb2Y(\xbe\xa0h(\xbe\xd9\xdd"\xbe\xab\xd8\x16\xbe\xc5^\x04\xbe\xe3\\\xdd\xbd\xac\xe5\xb1\xbd\x9f>\x82\xbdj\x80\x1a\xbd\x077G\xbc\x9ew0<\xcb\xc0\xdf<\xcf\xf3\x14=F\x13"=\t\r\x19=\xa0\x81\x05=\xd0\xf6\xee<\xfb\xad\xee<z3\x16=\x86\xc7_=\xbcG\xa4=\x01\x0b\xde=\xd7w\x07>V\x98\x13>[%\x10>Z3\xff=\x1e \xce=D`\x97=\xb1\xaaH=\xa1\xfd\xf2<\x99\xa4\x9b<\x80\x01\x8f<G$\xb6<\x9du\xf2<\x193\x11=a"\x1a=h\xb3\x0f=\xba&\xe9<\x99\xa6\xab<F\xa9^<1\x91\xfd;C\xbb\x8d; \xadI;\xb2\x1a\xa8;\xdf\xdd\xf9;\x06\x19\xe9;\xf2\xcdx;\xfb\x98\x8c\xbbe\xee\x98\xbc\xd6N\x1c\xbd\xd4\x07~\xbd\xae|\xb2\xbd\xedS\xdf\xbd\n\xdf\x00\xbe\x91*\x0b\xbex\x90\x0e\xbe\x93\xd9\x0e\xbeP\xa2\x0c\xbe \xb0\t\xbe9\xb4\t\xbe/\xa8\x04\xbe:\xb0\xec\xbdEf\xc5\xbd\x84\xb9\x8d\xbd\x9c\xec\x1c\xbd;6\r\xbc\xa6\x86\xaa<<l3=\xca\x9eq=\xc0\x99\x8d=(\x0b\x93=\x9b\xc7\x93=*]\x9d=\xe5S\xac=$\x99\xc2=I\x87\xe1=\xf4\x95\x00>\rw\x10>\xf2\x07\x1f>\xd2\x1f&>@\xf2">\xea\n\x15>\xc6\xe7\xfb=\xe7\xbb\xc7=vb\x94=\xe6uF=\n@\xde<\xb0\xc8\x07<\x8d\x87\xcc\xbb\x8ba\x82\xbceL\xb8\xbc\xeb_\xc9\xbc\xc9\x89\xd2\xbcgB\xf5\xbc4_\x1c\xbdA\x10Y\xbd,\xd3\x93\xbd\x82\x98\xbb\xbd\xa3c\xdc\xbdE\x9e\xe8\xbd\x8fL\xdd\xbd\xcf\xab\xc1\xbd6!\x9a\xbd\xb9(c\xbd\x9b\xeb \xbdcu\xdb\xbc\xc2s\xaa\xbc\xb8p\xb4\xbcb\xea\xea\xbc\xe6%)\xbd\xf0\xc6c\xbd5\x84\x89\xbd_\x9b\x9c\xbd\x00\x9a\x9d\xbd\x14\xd9\x89\xbd\xb0qe\xbd\x84\x189\xbd\x91\xad!\xbd\xf3\xb7#\xbd\x878!\xbd\xb1\xd7\x16\xbd\xe1\\\xf2\xbc\xc5\x94j\xbc!\xa4u;[\xb7\xd1<\xd8\xf6W=\xd3\xb8\xa0=\xa3\xb4\xd0=\xb9\xb3\xfc=V\x8d\x0e>ar\x19>7\xef\x1f>\xbc\x87 >\xea#\x1d>S\xb0\x17>\xcf\xde\x0f>l\xb4\x05>F\x9f\xed=ko\xc0=\x1fG\x87=[\x8c\x11=\x13\x10\xe9;\x9b\xb3v\xbcL\x17\x02\xbdH\x8e-\xbdU\x8eH\xbd\xcc\x0be\xbd\xf2\x12\x81\xbdS\x12\x92\xbd\xfc\x15\xa6\xbd\xa0\xda\xbc\xbd\x06y\xda\xbd^\xb2\xfa\xbd\xa6\xaa\x0c\xbe\x17\x0b\x1a\xbe\x15q \xbes\xae\x1c\xbe\x98G\x0e\xbec\x94\xeb\xbd\xf6\x8a\xaf\xbd\x80\xffj\xbd\xe8\xfa\x0b\xbd(K\x96\xbc\x88c1\xbc\x1dB\x00\xbc\xc6\xbf\xad\xbb\xa7_T\xbb}\x9b3\xba\x89{\x03;\xaf\xb1\xc4;g\xcdy<\xfbj\xf1<\x05\x00==\xcd5w=\xe5\x1f\x89=o\xe4\x85=m\x87j=\x9dV;=\xaa<\r=j\x86\xd8<g\xed\xbe<C\x00\xcf<bQ\x07=rs>=\x16]\x81=\xa1X\xa3=(j\xbe=\xc3\xb1\xce=\xe9\x90\xd2=\xdb\xf4\xc9=\xfb\x8b\xb9=\xd8m\xa7=\xbc\xd1\x9a=\xbfL\x96=\x8d\xdc\x91=\xd4\xa9\x86=\xa3\x85\\=\xd4\x9e\n=s-\x10<6\xd9\x9d\xbc\x17\xa7F\xbd\x99\xe2\x9b\xbd\x02m\xcf\xbd\x03\xc9\xfb\xbd\x17D\x0f\xbe\xc6L\x1c\xbe\x01.%\xbe\x19p*\xbe\x1f\x90-\xbe g-\xbe\xef\xef\'\xbeR\x13\x1e\xbec\xab\r\xbeD\xa8\xe8\xbdPz\xaa\xbd\xd4\xc6K\xbd\xd4F\x95\xbc\x92p\xd6;\x85J\xca<\xb7\xfb\x0e=\xb69\x1d=;l\x1d=\xb4x\x10=9L\xfe<M4\xf5<\xcew\x08=\x02\xc1/=\xf2\xf5{=82\xb2=\x0f\xc8\xe8=<n\x0b>\x80\'\x18>n\xc9\x16>\x91\xe7\x08>\x94\xc9\xe4=\xa1Z\xb0=*\xcf~=\xb7\xd4-=\xd7k\xe1<V]\x93<\xd5D]<\x86}W<P\xf3g<\x86Ow<\xd7\xed~<\x83\xb4\\<\xd0\x85\xfc;\xd7\xbb\xaa\xba\xfe\xfa8\xbc^\x90\xa2\xbc\xa7\x1d\xcf\xbc\x8aC\xd5\xbc\xd4V\xc0\xbc\x10p\x9e\xbc\xe0\xe7j\xbcf\x996\xbc\x8a=W\xbcK\x9e\xb4\xbcZ\x18\x19\xbdczl\xbd\xd3u\xa4\xbd\xbf\xad\xce\xbd\x81\xc2\xef\xbd\xf31\x01\xbe!Z\x01\xberQ\xf8\xbdg\\\xeb\xbd\xd8\xab\xe0\xbd f\xdf\xbdp\xcc\xdd\xbd\x85\xfe\xc9\xbd\x86\xfb\xa1\xbd\x04\xadN\xbd\xc1>\x8e\xbc(\xaaY<:@&=\x84F\x81=\xf6\xbb\xa1=\t\x0b\xb8=.\xbd\xc3=\xe7\xdd\xc9=\xc1\xf2\xd7=\xc2\x00\xec=\x96\x08\x01>\x9ce\x0e>\xab^\x1a><I">7\xc7$>o\xac\x1d>\xd1\xc2\x0c>4"\xe9=u\x9a\xb1=Kzy=\xe8\xca\x1b=\xaf8\x95<.\xc7.:\x0ed\x81\xbc\xa0(\xe9\xbc\xba\xc1\x0f\xbd:\x86\x1a\xbd\x11\xc2\x1a\xbd\x11\xd4\x1b\xbd\x93~0\xbd?\x01_\xbd]+\x94\xbd\x0f\xf3\xc0\xbd\r\xa1\xe8\xbdW=\x00\xbeQ\xeb\xff\xbdE\xd8\xe5\xbd\xd0w\xbc\xbd\xc8"\x8c\xbdmW>\xbd\xcaA\xfd\xbc\xbd\xbf\xa8\xbcN\x8b\x8a\xbc9\xe1\xb2\xbc\xff2\x01\xbd\x8cC9\xbd\x9cep\xbd\xeaRz\xbd\x93\xf8Y\xbdnl"\xbd>\x06\xbf\xbc\x0ewL\xbc\xf8F\xef\xbb\xa3F\xb3\xbbg\xc6\x10\xbc\xc1\x1bM\xbc1uj\xbc\xf40\\\xbcf^#\xbb2K\x95<\xa9l2=\xffy\x93=\xda\xc2\xc9==\x92\xf3=\x8a\xfd\x08>x1\x11>8N\x12>\xee6\x0f>5\xee\t>\x8a\x0c\x05>\xe8\x16\x02>\x90\xee\xfb=\'\xe2\xe9=a \xc9=\xc1\xd8\x9a=q\xc5M=\xa9\x1f\xc3<\x89\x88\x94\xba\xba\xaf\xb5\xbc\xe7\xb9%\xbd\xbfWd\xbdK"\x8c\xbd\xbb\xf2\xa3\xbd\x80\x0e\xbb\xbd;\xc5\xd3\xbd\x06\xa5\xea\xbd\xc1`\xfb\xbdJ\xf9\x04\xbe\xcc\xa1\x0c\xbeQ\x11\x14\xbe\x14b\x19\xbe\x8e\x89\x16\xbeF\xc7\x07\xbe \x03\xe1\xbd\xe2F\xaa\xbd(ai\xbd\x12;\x0f\xbd\xbai\x84\xbc.\xd1\xab\xb9\xa1\xea1<\x876\x95<W\xc0\xab<\xbe\xd6\x9d<\xa6&\x91<M\xcd\x98<\x00\xa3\xca<&\xef\x1a=.\x9f`=\xd96\x96=\x00\x9c\xb3=\xc5\xe1\xbb=\x9b7\xb0=\xfa\xd2\x95=\t\xeak=T\x925=\x8a\x0b\r=Y\x01\xee<Z\xbb\xf3<T\xa1\x12=hQ?=\x0euy=\xd5\xc1\x97=\xfc]\xa9=\xa6\xa8\xab=U\x80\x9f=\xd3\x8e\x8e=\xcab\x80=MKt=\xdb\xdcy=\xb3i\x81=!M\x7f=\xc8\xe5d=z\x16*=\xd6{\xa5<\xb4\xb9\xba\xbbD\x95\x0b\xbd\x9f\xc9{\xbdKR\xb2\xbd6n\xe1\xbdds\x03\xbe\xa7?\x12\xbe\xcd\xf4\x1b\xbeC\xf8\x1f\xbe\xe0\xcf!\xbe\xd4z!\xbeL\xaf\x1f\xbeX\xf8\x1c\xbe\x88!\x11\xbe,\xf2\xf2\xbdo\x85\xb4\xbd\xa6uU\xbd\xf3\x19\x8e\xbch\xe06<\xbeZ\x07=\xa8\xf27=AQC=\x04\x8e:=\xc6g#=%\xaa\x14=S,!=\xc0\xb8?=\xcf\x05t=w\xa5\xa1=\xf1\xbe\xcf=#\x99\x00>\x11>\x17>z\x18$>\x0f\x88#>\xa4\x9a\x15>\xee\x9a\xfd=LH\xcb=|I\x99=\xf8DX=r/\r=\xa1\xfa\xa3<\xfa\xdc+<\xe0\xcdu;H\x8f\xad\xba~$A\xbb\x17\xbf\x86\xbb\xcb\xff\xf5\xbb\xf6\x9ad\xbc]\xef\xce\xbcJ\xc2\x1e\xbd\xdc\x0eO\xbd\x7fal\xbd.\xbcj\xbd\x821R\xbd\x0f\xc3.\xbd\x91\x93\x07\xbd\xd8\xd6\xd5\xbc\xd1\xb3\xb4\xbc\xbe&\xad\xbc\xbe\xcf\xda\xbc-\x1a"\xbd\x8a\xf7n\xbd6P\xa3\xbd\xa9\xe9\xc7\xbd\x87\xaf\xdf\xbd\x07\xc5\xe9\xbd5H\xe5\xbdqv\xdf\xbdh\xa2\xdc\xbd\x94\x87\xd1\xbdO\xc0\xc0\xbd\xc8\xa8\xa9\xbd9D\x8a\xbdl\xe1P\xbd\x84\xfd\xf8\xbcI\x0e\xc3\xbbc8\x93<k\xbf\'=\xd8\xd6x=\xad\xaa\x9e=\x13p\xc2={\xec\xe3=?\x00\xff=M%\x0c>\xc0\xdd\x17>\x05\x02!>\x16\xd3&>\xfc\x8d\'>\xc4\xe1 >-\x9a\x11>.\xa2\xf6=\x85\xbf\xc3=\x8b\x90\x91=\x19IH=\x1aj\xe9<4E\x14<\xda.\x04\xbc+}\xb3\xbc\x8c\x9c\x07\xbd\x86d&\xbdf\x9c5\xbd\x86t?\xbd\xd0\xd9J\xbd\x84Pe\xbdj\xc0\x8c\xbd<\xe1\xb2\xbd\xd4\x9b\xe1\xbd\\xc8\\x8f\\xb9\\xf3\\xfc\\x9a\\xb9l\\x8b\\xbc\\xb9\\xb3\\xa8\\xe2\\xb9K9\\xfb\\xb9q!\\x02\\xbah*\\x03\\xba&\\xac\\xff\\xb9\\xaf\\x96\\xf4\\xb9\\x1aI\\xfd\\xb9\\xec\\xba\\x05\\xba\\xc41\\x12\\xba\\x1a\\x08$\\xbaPa1\\xbaBAG\\xba\\x01\\xaf`\\xbas\\x9fq\\xbaNmm\\xba).j\\xba\\xdf\\xa4]\\xba\\xa0|P\\xbae\\x8dM\\xbaw4:\\xba\\x17\\xf9:\\xba\\xba\\xbdF\\xban`P\\xba\\x18\\x97e\\xbaf\\xbdt\\xba \\xe7}\\xba\\xb9\\x07\\x87\\xba\\xc9\\x0b\\x89\\xba\\xee\\xbf\\x7f\\xba\\xb2\\x1aq\\xba5Ai\\xba:\\xa4_\\xba\\xd2_f\\xba\\xab\\x08g\\xba\\x92#k\\xba \\xcdu\\xba7\\rv\\xba\\xb5\\x0f\\x80\\xba\\x13c\\x83\\xba\\xde\\xc6\\x86\\xba\\xd1\\n\\x89\\xbav\\x83\\x83\\xba\\x15\\xb7r\\xba\\xca\\xfae\\xba6\\x1bd\\xba\\xba1h\\xbal\\x11y\\xba(B~\\xba\\xc3\\xe8\\x7f\\xba\\\'l}\\xbaI\\x05d\\xbaI\\xbcU\\xba\\xf7*?\\xba\\xd6\\xc5"\\xba\\xf2\\xfc&\\xba\\x12\\x0c\\\'\\xba\\x17\\x9b$\\xba=\\xef*\\xbaK\\x91\\x1b\\xba\\x0c%\\x08\\xba\\x8bE\\xec\\xb9\\xf3\\xcc\\xbf\\xb9\\xdco\\x9f\\xb9\\x81\\xa4\\x88\\xb9[1g\\xb9\\x039z\\xb9\\x99\\x97\\x93\\xb9)\\x1c\\x92\\xb9\\x14\\xee\\x87\\xb9cBU\\xb9\\x0bM#\\xb9\\xd5\\xcf$\\xb9?\\n\\\'\\xb9\\x10">\\xb9%En\\xb9ZE\\x81\\xb9\\xe6\\xd3\\x88\\xb9w\\x92\\x85\\xb9\\xd9\\xe7\\\\\\xb9]\\x85F\\xb9\\xa9\\x9e\\xfb\\xb83\\xad0\\xb7<\\xaa98\\x0c\\xde\\xaa8\\xcc\\xa7\\xb48\\x92\\x00\\xc678\\xa3\\x9a\\xb8\\xcb\\xb0A\\xb9\\xa7\\xa8\\x9f\\xb9\\x03q\\xb9\\xb9\\xfe\\xa0\\xc0\\xb9}\\x9a\\xab\\xb9\\xd2\\x8bn\\xb9\\xa8\\x96\\x1c\\xb9\\xc9\\xf5\\xd3\\xb8\\x92\\xe1\\x9e\\xb8\\xf7_\\xe8\\xb8\\xd0\\x86*\\xb9\\xef\\xfdG\\xb9\\xc0h]\\xb9\\x85\\xc9G\\xb9d\\xa96\\xb9c\\xf4\\x18\\xb9N\\x13\\x0e\\xb9\\xbb\\x93>\\xb9\\n^E\\xb9;\\xef(\\xb9p-:\\xb9\\x8e~I\\xb9n\\xd8N\\xb9\\xa26$\\xb9\\tD\\xa3\\xb8\\xdc\\xa1\\x83\\xb7.\\xeb\\xdf6B\\xbdH8\\xff\\x11\\xb88F\\x02\\xe08\\r5\\x139\\x83*\\xd48\\xa6\\xa1\\xb18Ux\\xa08H358!zF8\\x82\\xcd\\xef7\\xdf\\xafG\\xb3l\\x93\\xf07\\x0b>O8\\x8a-c8}/\\xae8\\xb5 \\xec8\\xa3`\\xe38*\\xed\\xf28\\x12\\xad\\x1f9\\xafTH9\\xff0\\x819\\xdb\\xfa\\x859\\xd6\\xff\\x949|\\xf5\\x9e9\\xa0\\\'\\x909\\xa8m\\x9b9\\xfb\\x06\\x9e9\\xbe\\x86\\x989\\xab\\x80\\xa69\\xb0[\\xa79D}\\xa59T\\x12\\xad9\\xd5\\xf3\\xaf9c\\x96\\xa99\\xaeP\\xb69I\\x05\\xde9\\xf3\\x80\\xf79|q\\x03:\\x85\\xf2\\x06:nL\\x06:\\xfdl\\xfc9\\xae\\x95\\xf29\\xad6\\xf89\\xd2\\xf5\\xf79\\xedb\\x0e:\\x07\\xb1\\\':e\\x1f2:)\\xa9;:J\\xee/:\\xce]\\x16:\\x86h\\x04:0*\\xf49F\\xaa\\xdf9O\\x87\\xd49\\xbd\\xed\\xdc9\\x9f\\xb8\\xe59n\\xa2\\x0b:\\xeb\\xc4\\x1e:>=!:\\xa9J-:d\\xae*:\\xe32\\\':hK!:P/\\x0c:d\\xf6\\xeb9\\x03\\xfe\\xbf9eW\\x8f9~%x9\\xe2\\x06\\x949^\\xa0\\x9a9\\xb8(\\x9d9\\xdf(\\x9f9+\\xce\\x889\\xa90v9\\x00\\xb389)\\xc0\\xa38lv\\xaa\\xb7\\x0b\\r\\xd5\\xb8E\\xa0\\x08\\xb9\\x13\\xb6\\x14\\xb9\\xcd2%\\xb9H@\\x16\\xb9/\\xf2\\x02\\xb9\\\'\\xb7\\x1f\\xb9\\xc0\\xda\\x0b\\xb9\\x12\\x80\\x96\\xb8\\x99\\x89\\x86\\xb8\\xa4S\\x80\\xb7\\xb3\\x80\\xa37\\xe1=\\xcb\\xb6\\xbfY\\xc5\\xb7)\\xf7\\x9f\\xb8H\\x15%\\xb9]\\x99{\\xb9R\\x91\\xb1\\xb9\\x08\\xf0\\xd9\\xb9X\\x1a\\xe3\\xb9\\x8b8\\xd0\\xb9\\xf1\\x8f\\xad\\xb9\\x82\\x1fp\\xb9\\xed\\x0e2\\xb9\\x15IA\\xb9&$r\\xb9\\x8b\\x02\\xb8\\xb9K=\\xf7\\xb9\\xed\\xcf\\x14\\xba\\x05\\x023\\xba#3M\\xba}\\xa1`\\xba\\x06"f\\xba\\xeb\\xe9U\\xbaL\\x89G\\xba)\\xbf8\\xba\\x15\\x872\\xba\\x98\\x8b4\\xba\\x05\\x1b6\\xba\\x8c\\xf18\\xbaF\\x919\\xba\\x1e\\xc15\\xba\\x9a]3\\xba5\\x8a9\\xbaU\\x15:\\xba\\x92\\xd2/\\xba901\\xba\\xe5\\xd62\\xba\\xfa\\xf1.\\xba3\\x1f2\\xba\\t\\xeb"\\xbaE\\x89\\x1b\\xba_\\x99#\\xba\\xf8\\x91$\\xba\\xa4\\xe5)\\xba\\xc5\\x00*\\xba\\xcf\\x08#\\xba\\xdf\\x8f*\\xba\\x82\\xd76\\xba\\xa4\\x9d:\\xba\\xdb$=\\xba\\xb4\\xbe:\\xba\\x8053\\xba\\xc5<&\\xbad#\\x13\\xba\\xcf\\xb4\\x05\\xba\\x06`\\x06\\xba\\xe2\\xe8\\r\\xba\\x04\\x14\\x16\\xba\\x88\\xd9\\x1e\\xba\\xa6\\xce"\\xba\\x97B*\\xba\\xda,2\\xba\\xc3kB\\xba\\xba\\xe7O\\xba\\x1e\\xb2P\\xba\\x86\\xfbM\\xba\\x81\\x0cH\\xba7[;\\xbam\\xba1\\xba0\\x18 \\xbag\\xff\\n\\xbae\\x9a\\x01\\xba\\xcc\\x9a\\xd9\\xb9\\xd2]\\xba\\xb90i\\xb8\\xb9\\xadp\\xc2\\xb9x\\xfa\\xda\\xb9\\x99\\x87\\xeb\\xb9u\\x80\\xf0\\xb9\\x021\\xdf\\xb9\\xc6\\xe5\\xb8\\xb9\\xe2\\x0b\\x94\\xb9\\\\#t\\xb9u\\xc3{\\xb9Sn]\\xb9\\xca\\x1e\\x0f\\xb9\\xd5\\x18\\xf2\\xb5\\xcb}C9\\n\\x0c\\x989\\x8ea\\xb79\\x87\\xab\\xa89\\xbcwn9F;?9\\x19\\xeb\\r9Fr\\xd48\\xdbS\\x089D\\xa2J9\\xf6\\x92\\x9a9\\xd6\\x1f\\xc49Z\\x85\\xe29t\\xcb\\x00:\\x7fN\\x0f:H\\x88\\x1b:\\x84\\xcf :m\\x1e.:\\x1c\\xcf?:w\\xf0S:\\x95\\x9fe:\\xb2\\xe8g:\\x11\\xdbw:\\xf9\\x04\\x89:\\xf8$\\x91:^X\\x9a:r7\\xa2:s\\x0e\\xa4:\\xdd\\x83\\xa4:vV\\xa8:\\x16l\\xa6:g\\xaf\\xa5:S6\\xae:\\xd9\\x86\\xb2:[@\\xbe:H\\xa2\\xc9:\\xf2\\xb8\\xce:\\xf7\\xe8\\xd7:\\xa0\\x8a\\xda:\\x9c\\xbb\\xdc:\\xb4\\xb3\\xdd:5\\x11\\xd7:rb\\xcf:d\\xdb\\xca:\\\'\\xd1\\xc6:\\x1f\\xbf\\xc4:F\\x92\\xc8:\\xef\\xcc\\xc9:\\\\\\xcc\\xd3:E\\xab\\xdf:\\xe7\\xc4\\xdd:\\xf3^\\xde:\\xb8\\xb7\\xd9:\\xf4\\x9f\\xd4:\\xa9K\\xd7:+s\\xd5:u]\\xcd:1\\xe1\\xc9:&\\xb5\\xca:u:\\xc9:\\x084\\xcc:hq\\xca:Y:\\xca:\\nZ\\xca:3/\\xbe:\\xb9\\x81\\xb0:R\\xc9\\xa4:E\\x18\\x9c:\\x95\\xa8\\x9b:\\xce\\xf6\\x9e:\\x12\\x87\\x9f:\\xf6\\xcd\\x9f:m!\\x9d:dJ\\x9a:#\\x9b\\x98:\\xbd4\\x8f:\\xd6\\x9d\\x87:\\xf2\\xa4\\x85:\\xef\\xdf\\x84:\\xbe\\xed\\x88:n\\xc0\\x88:b\\xf2\\x81:U\\x82q:wI\\\\:z\\xdbE:\\xeb\\x9d*:u\\xb5\\x19:\\x83\\xea\\x0b:\\xfb\\xa4\\xf69\\x7fj\\xda9\\x1f\\x17\\xbf9ut\\xbb9\\xc6[\\xa19\\x98\\\'u9\\x12\\xc2a9i\\xe2\\x0e9c/G8\\xd8\\xcb\\xdd\\xb7j\\xf5\\xbc\\xb8G\\x90\\x01\\xb9w\\xc1\\x1f\\xb9\\xae?,\\xb9\\xe1\\xbb8\\xb9&\\xca\\x83\\xb9/\\xcb\\xb0\\xb9,\\xa9\\xce\\xb9\\xe1\\x9f\\n\\xba\\x139\\x1f\\xba\\xb4\\xf6 \\xba\\x9b\\xad#\\xbae>\\x1b\\xba}\\xca\\x1a\\xba\\xc5\\x1b\\x19\\xba\\xb9\\x14\\x19\\xbaW7)\\xba\\xa5\\xc7.\\xbat\\x990\\xba}\\xdd*\\xba\\xfd\\xd0%\\xba\\xef\\xc9)\\xba\\xdb\\x8a(\\xba\\xddl1\\xba\\x15\\xe31\\xbab\\xf4/\\xba\\xfe\\xbf\\\'\\xbaGh\\x18\\xba\\x17\\xcb\\x13\\xba[\\xe6\\x0c\\xbaQ8\\t\\xba\\xdaI\\x00\\xba\\x89\\xbe\\xe3\\xb9\\xc2\\xa9\\xce\\xb9\\xcd\\xbe\\xc0\\xb9#\\xed\\xc2\\xb9\\xb9w\\xc0\\xb9\\xc8 \\xcd\\xb9\\xee\\x96\\xce\\xb9\\xd0\\x80\\xc4\\xb9\\xad\\xd0\\xc1\\xb9\\xc6\\x13\\x9d\\xb9\\xbb\\xb3\\x91\\xb9\\xba|\\x83\\xb9mf:\\xb9l\\xc0)\\xb9\\xe6E\\xe8\\xb8\\x8d\\x95d\\xb8-\\x0e\\x027;\\xdf\\xc38\\xe2\\x9b\\xff8\\xdb\\x1a\\n9_)\\x079Xm\\x9d8\\xdap\\x0f8\\xe4\\xa8\\xe87F\\xad\\xa37\\xe4\\xc738\\xffL\\xcf8\\xbbm 9\\xe8|\\x829\\xf6\\x96\\xb29\\xd0$\\xc59\\xdc(\\xd19\\x04*\\xd39[\\xd5\\xb09\\x91\\x12\\xa29@\\xf9\\xa59\\xa8\\xb6\\x9f9^O\\xc69\\xf3\\x0f\\xee9\\x1df\\t:\\x88\\xfe\\x1a:\\x8f\\xed\\x1b:\\xe2\\xc4\\x1b:\\xe2\\xb3\\x1a:?\\xa5\\x14:\\xd2f\\n:\\xabj\\x05:"\\xe8\\xf998\\xb1\\xf89-\\xd1\\t:\\x15\\xe5\\x0e:\\xc1\\x89\\x16:<0\\x06:dA\\xc99A#\\x969\\xe1:29\\x9f\\xa0\\x039\\x0e\\x07\\x139f\\xab09[\\x1dU9-\\xa3i9\\x9d7[9\\x01b\\t9\\x15D\\xc08\\x19\\xf4\\xfb7\\xc3f(\\xb8E\\xff\\xd1\\xb8l\\x87L\\xb9H\\x9fH\\xb9$\\xa7"\\xb9\\xee\\x0f%\\xb9EvN\\xb9\\x03\\xc3\\x8e\\xb9\\xc6a\\xbd\\xb9d4\\xed\\xb9\\x19\\x99\\x03\\xbal\\xe1\\xfe\\xb9\\xa1;\\xee\\xb9\\xaf\\xc5\\xea\\xb9\\x7fF\\xe6\\xb9\\xcc\\xb6\\xcb\\xb9\\x04\\x84\\xb0\\xb9\\xf9P\\xb2\\xb9\\x01\\xcc\\xc8\\xb9\\xf2\\x8d\\x01\\xba\\x02)&\\xba\\xe2\\x11I\\xba\\x8d\\xf6k\\xba$\\xe7u\\xba\\x99%u\\xbaa/l\\xbaB\\x7fU\\xba\\x84AF\\xba\\x14\\x078\\xba\\x17\\x8e2\\xba\\x13\\xe44\\xba\\x04\\xed9\\xba\\x8c\\xf9G\\xbax2M\\xba\\xfd\\x0eO\\xbae1M\\xba\\xe5\\x13A\\xbat\\x836\\xba)\\xc94\\xba\\xa7d7\\xba\\xc9x<\\xbaHEF\\xba\\x17(J\\xbaX\\xa4C\\xba\\xb1\\t<\\xba\\xd5\\xcf.\\xba\\xd6v\\x1b\\xbaC\\xf2\\r\\xba\\x93\\xab\\xf9\\xb9eB\\xcd\\xb9\\x10A\\xb3\\xb9\\xcc\\x83\\x9f\\xb9\\xcc\\x87\\x9d\\xb9\\x98\\xfd\\xa8\\xb9\\x8ed\\xad\\xb9\\xafr\\xb0\\xb9\\x16W\\x98\\xb9\\x87si\\xb9\\x01\\xba2\\xb9M\\r\\x9c\\xb8\\xc4\\x9c\\x8e\\xb7VL\\x158\\xba_\\x8b8\\xd5\\xbcA8\\xba5\\x968\\x01\\x8a\\xcd8\\xd6z\\xff8\\x84\\x1179wym9\\xed\\xc9\\x8c9\\x19\\xa8\\xa39\\x88\\xc3\\xb59\\x91\\xd4\\xbf9\\x91\\x0b\\xca9\\x85\\xce\\xd29GC\\xd69\\x0e~\\xe29\\x86W\\xf695-\\x04:\\xeey\\x0e:i\\xfc\\x0b:\\xb6\\xc1\\xfd94\\x9c\\xe19\\xf8\\x18\\xc89\\xc1\\xe7\\xd79\\x94/\\xf69b\\x98\\t:5T&:\\xdf\\xdeG:\\xb4p]:\\xa6\\x8aa:\\xf8lR:\\xf3\\x08A:\\xa9\\xb43:\\x12\\xb3\\x19:\\x87#\\xfd9\\xb5\\x8c\\xdf9\\r\\xd9\\xd29\\x9d\\x1b\\xd69\\xbe\\xbd\\xf79o\\xb3\\x06:_D\\x0f:\\xc6!\\x1d:\\x05\\xdd\\x0f:Lb\\x02:\\xf82\\xf39a\\xb3\\xd09\\xc3p\\xbb9\\x12\\xca\\xa49\\x10\\xc4\\x889\\xefRF9\\xc3\\x9f\\x1a9#\\x1f\\xf98\\xec1v8\\x8f\\xad\\xac7#H\\xbc\\xb7\\x81\\xf6\\x96\\xb8!\\xb3\\xa0\\xb8[o\\xd6\\xb8\\x1ft\\t\\xb9\\xfa\\x16\\xf9\\xb8\\x04\\xc7\\\'\\xb9\\x12\\\\r\\xb9\\xccU\\x8e\\xb9\\xb2\\xb6\\xb5\\xb9k\\xd2\\xe9\\xb9\\xec\\xa2\\xfe\\xb9\\xf7t\\x06\\xba3B\\x17\\xba\\x1a\\xad\\x17\\xba\\x05\\xd7\\x0e\\xba\\xea2\\x0b\\xbay\\xea\\xf4\\xb9/\\xc2\\xdc\\xb9\\xf9\\x1f\\xd3\\xb9C\\xb7\\xd0\\xb9y\\x17\\xe7\\xb9?\\xfb\\x03\\xbaj\\xe4\\x15\\xba!\\x90!\\xba[\\x97(\\xba\\xe7\\xb5"\\xba\\xd0_\\x12\\xba?:\\x00\\xba\\x1c\\xfa\\xde\\xb9\\xc3\\x8e\\xd7\\xb9\\xab\\xf3\\xdf\\xb9\\\'\\x00\\xee\\xb9p0\\xfa\\xb9\\x076\\xfa\\xb9\\xbfq\\xed\\xb9Pp\\xe2\\xb9\\xb0\\x8c\\xd3\\xb9\\x1b\\xa6\\xc4\\xb90\\x9d\\xb8\\xb9\\nP\\x9f\\xb9+\\xab\\xa1\\xb9\\xd1\\x1c\\x98\\xb9\\xb9z\\x84\\xb9\\x16\\xd0\\x97\\xb9\\xd1\\xcd\\x9c\\xb9\\xde\\x8c\\xab\\xb9\\xceW\\xba\\xb9Bs\\xa9\\xb9j<\\xa5\\xb9\\xb5J\\x93\\xb9\\xda\\xdbh\\xb9Z[c\\xb9\\xb6\\xbc\\x80\\xb9i\\xdfz\\xb9\\n\\x0b|\\xb9\\xcdN\\x8c\\xb9\\xa54m\\xb9\\xf8\\x10\\x80\\xb9\\x14\\x90\\xa5\\xb9V\\x8b\\xb5\\xb9xq\\xe3\\xb9UM\\xff\\xb9KY\\x08\\xba\\xe0Y\\x16\\xba\\xef\\x86\\x10\\xba\\xccR\\x08\\xba$A\\xf1\\xb9m\\xec\\xb9\\xb9\\xf3[\\x9b\\xb9\\xa4\\xf2v\\xb9)\\x98I\\xb9\\xa3gz\\xb9\\xb6`\\x9b\\xb9\\n6\\xb0\\xb9l+\\xc8\\xb9\\xeam\\xc3\\xb9\\x97W\\xa3\\xb9\\x18\\xa2\\x8f\\xb9g\\xffd\\xb9-\\x130\\xb9\\xcd\\xf2V\\xb9T\\xc4L\\xb9\\xd6\\xd4K\\xb9\\x94\\x1e\\x7f\\xb9\\xf1\\x0f}\\xb9\\x83o\\x94\\xb9J\\xbd\\x9f\\xb9\\x1f\\x00\\x8d\\xb9\\x94\\x9b\\x84\\xb9X\\xb6w\\xb9\\xd5;w\\xb9\\x11\\x80\\x92\\xb90\\xbe\\xab\\xb9=\\xb9\\xc1\\xb9=\\x83\\xe5\\xb9q\\x07\\x02\\xba\\x9aF\\t\\xba\\x9d\\xb4\\x0b\\xba\\xaf\\x14\\x02\\xba:\\xed\\xfa\\xb9#\\\\\\xf4\\xb9+\\x14\\xf2\\xb9\\xde\\xd3\\x02\\xba\\x03\\x04\\xfe\\xb9\\xb98\\xe3\\xb9|\\x98\\xda\\xb9\\x99\\x7f\\xdf\\xb9\\xe0\\xe5\\xdb\\xb9o\\x02\\xcc\\xb9H\\xb3\\xb2\\xb9\\x86\\xd6\\x85\\xb979S\\xb9\\xe9\\xed\\x1b\\xb9\\xc4\\x89\\xe2\\xb8\\xf0\\xdf\\x0c\\xb9\\x8c\\xc2\\x04\\xb9\\x8f\\x87\\x14\\xb9!\\x83E\\xb9\\x02EC\\xb9\\x0caP\\xb9,\\x7fA\\xb9\\xfd1\\xd2\\xb8\\x9d>]\\xb8H3\\x04\\xb8\\xe0\\xe1\\x96\\xb7\\xc9\\xc0\\xb6\\xb6\\x8f\\xd9U\\xb7$\\x1eE\\xb7\\xcf\\xfa\\xa47zL\\xf57\\x8f\\x0e\\xea7\\xe7\\x98\\x9b8\\xacZ\\xec8\\xc5"\\xfd8\\x93u\\x119\\x85h\\x019\\x00\\x80\\xb38\\xe3\\x8e\\x0c8(\\x98\\xc3\\xb7d\\xbc\\x87\\xb82f\\x1d\\xb72\\xa418\\nq\\xe48\\x8d\\xc1n9\\xdb\\xf7\\x809Y\\xffm9\\x88\\x8cd9\\xa7.)9\\x1e\\x80\\xe68\\xf4,\\xc78\\nI\\xa78\\x04;\\xde8\\x95\\xb0-9\\xb0\\x07A9:\\xafM9\\x19\\x88I9\\x93\\xb5\\x159\\xcf\\xee\\x019\\x10|\\x968\\xa2Z\\xba7\\xba\\x16\\xaf7\\x9b2\\xbd6F\\x9f38\\xb9f\\xfc8\\x06c\\x1e9o)/9GM\\x0c9!|\\x848F\\xea\\xd57\\xcc\\xfd\\xf2\\xb7\\xcc]\\xb1\\xb8+\\xbb\\xd2\\xb8\\x92\\x97\\xcf\\xb8\\xd3G\\xba\\xb8\\x07^\\x11\\xb8\\x11\\xea\\x94\\xb7\\xf0\\xb8H\\xb8\\x83\\xeeS\\xb8\\x1c0\\xa6\\xb8H\\xd3\\x00\\xb9\\xc6\\xb5\\xe7\\xb8]\\xf8\\x0c\\xb9ns\\x11\\xb9\\xb1a\\x0b\\xb9Z\\x9a5\\xb9\\xa6\\xeev\\xb9\\xed\\x88\\x98\\xb9E\\x99\\xa0\\xb9\\xed\\x97\\xbb\\xb9\\xce~\\xd1\\xb9yW\\xf3\\xb9\\x8ad\\x08\\xba\\xe8\\x92\\x13\\xba_\\xc7\\x1b\\xba\\xc7\\\\\\r\\xbac8\\x02\\xba\\xa36\\xfb\\xb9\\x14\\xf3\\xf9\\xb9\\x0e\\x15\\xfd\\xb9\\xad\\xed\\xff\\xb9\\xdc\\\'\\x0c\\xba\\x954\\x18\\xba\\xd0\\x82\\x1f\\xba\\x88G"\\xbay$ \\xba\\xa0\\x96\\x19\\xba\\x86i\\x0e\\xba\\xef\\xa1\\t\\xba\\x8f\\\'\\xf5\\xb9\\xc6\\xde\\xe0\\xb9|\\xa6\\xde\\xb9xbaB\\\\xd4\\\\x96\\\\xba\\\\xf8\\\\xb7\\\\xa9\\\\xbaE\\\\x96\\\\xb9\\\\xba\\\\x8c\\\\x18\\\\xc7\\\\xba\\\\xe6f\\\\xd4\\\\xba{9\\\\xda\\\\xba\\\\xc57\\\\xdb\\\\xbap\\\\xe1\\\\xd7\\\\xba_r\\\\xd4\\\\xba\\\\xd0a\\\\xcf\\\\xba\\\\xb8\\\\x10\\\\xc9\\\\xbaO\\\\x8e\\\\xc4\\\\xba\\\\xad\\\\xcd\\\\xb2\\\\xba\\\\x97\\\\n\\\\xa2\\\\xba9\\\\x86\\\\x92\\\\xba\\\\x89ex\\\\xba!$Y\\\\xba\\\\x81%3\\\\xbaK\\\\x1b\\\\x12\\\\xban\\\\x08\\\\xdf\\\\xb9e0y\\\\xb9\\\\x0f\\\\x1cv\\\\xb8P\\\\xaf\\\\n9N\\\\x88\\\\x979\\\\xa2\\\\xd2\\\\xe79\\\\xac\\\\xb7!:\\\\xda\\\\x1cJ:\\\\x96di:\\\\xae\\\\x9d\\\\x84:\\\\x97#\\\\x93:\\\\x96R\\\\x9f:\\\\xfd\\\\xfd\\\\xae:\\\\xaf\\\\xed\\\\xbb:\\\\x8f\\\\x81\\\\xc5:\\\\x90\\\\x8f\\\\xcc:\\\\xba\\\\x8d\\\\xce:O\\\\xf0\\\\xca:7\\\\x9d\\\\xcf:\\\\x81\\\\x96\\\\xd4:\\\\xa0\\\\xe6\\\\xd3:sP\\\\xd4:\\\\x0b\\\\\\\\\\\\xcd:j\\\\xb4\\\\xc5:\\\\xfe\\\\xb0\\\\xbc:\\\\xf9\\\\xb0\\\\xb2:\\\\xda\\\\x19\\\\xab:g\\\\r\\\\xa2:K[\\\\x9a:\\\\xc7\\\\x81\\\\x89:P\\\\x9eo:v9R:\\\\xadY/:\\\\x9f<\\\\x14:\\\\x98\\\\xbc\\\\xd09\\\\xa9\\\\xf9\\\\x8b9Zz 9\\\\t\\\\xa2\\\\x896\\\\x81\\\\x91\\\\xb0\\\\xb8g\\\\xf7I\\\\xb9Rb\\\\x98\\\\xb9/\\\\x8b\\\\xc6\\\\xb9Lm\\\\x05\\\\xba\\\\xc3\\\\xf8\\\\x19\\\\xba\\\\xb4\\\\xdb0\\\\xba\\\\xc8\\\\xc5G\\\\xba\\\\x00\\\\xe4[\\\\xbaEHp\\\\xba\\\\x91\\\\x8ap\\\\xba\\\\xebby\\\\xba\\\\x03h\\\\x83\\\\xbaf)\\\\x84\\\\xbaU\\\\xf7\\\\x86\\\\xba5n\\\\x89\\\\xbaJV\\\\x89\\\\xba\\\\xe3D\\\\x8a\\\\xbaA\\\\x9d\\\\x89\\\\xba\\\\x8a\\\\x8d\\\\x86\\\\xba\\\\xe4H\\\\x84\\\\xba>\\\\x94|\\\\xba3uv\\\\xba\\\\xc3\\\\x0fz\\\\xba\\\\x7f\\\\x90k\\\\xbam\\\\xcc_\\\\xbaF\\\\xf1R\\\\xba>\\\\xa2?\\\\xbaS\\\\x865\\\\xbaO\\\\x97\\\\x19\\\\xba(\\\\xf0\\\\x03\\\\xbaa\\\\xe8\\\\xe0\\\\xb9K\\\\xa6\\\\xa3\\\\xb9\\\\xd2\\\\xaa\\\\\\\\\\\\xb9 \\\\r\\\\xe9\\\\xb8\\\\xcf\\\\x8dK\\\\xb8\\\\x1c\\\\xa2\\\\x128\\\\x97G\\\\xc98ZB,9n\\\\xf7|9o\\\\x05\\\\x9d9\\\\xe8\\\\xb1\\\\xc99\\\\xcd\\\\xfa\\\\xd29\\\\xc0w\\\\xd79\\\\x9ch\\\\xdf9\\\\x93f\\\\xcd9f/\\\\xcc9O\\\\xef\\\\xd59\\\\x9e\\\\xfe\\\\xd39\\\\xf4\\\\x91\\\\xc09\\\\x87\\\\x84\\\\xb49\\\\xad\\\\xd8\\\\xb29i=\\\\x859\\\\x18\\\\x80N9#\\\\xef\\\\x0e9*\\\\x8fT\\\\xb7\\\\xd7\\\\x06\\\\x00\\\\xb9\\\\xec\\\\xea]\\\\xb9\\\\\\\\v\\\\xa7\\\\xb9\\\\xf8%\\\\xe4\\\\xb9\\\\xa8r\\\\x0b\\\\xba\\\\\\\'\\\\xa4\\\\x1c\\\\xba\\\\x04_2\\\\xba\\\\xf3\\\\x17=\\\\xba+\\\\nD\\\\xbau\\\\x9aV\\\\xba\\\\xb8\\\\xe1^\\\\xba,\\\\xc9n\\\\xba.\\\\xa0u\\\\xba\\\\xa6%n\\\\xbai:r\\\\xbaqWj\\\\xba\\\\xd4\\\\xecZ\\\\xba<xN\\\\xba\\\\xf1gE\\\\xba\\\\x7f[D\\\\xbah\\\\xc3E\\\\xba\\\\xe9jG\\\\xba2\\\\x1fD\\\\xba\\\\x99o=\\\\xba\\\\xf9\\\\x948\\\\xba\\\\xf5\\\\xe73\\\\xba\\\\xe2;+\\\\xba>\\\\x86\\\\x1f\\\\xba\\\\xcf\\\\x07\\\\x1a\\\\xba\\\\x1b\\\\x7f\\\\x08\\\\xba4\\\\xc0\\\\xe3\\\\xb9m[\\\\xd1\\\\xb9L\\\\xba\\\\xaf\\\\xb9H\\\\xb9\\\\x99\\\\xb9\\\\x0f\\\\xac\\\\x85\\\\xb9\\\\x0c|P\\\\xb9\\\\xf8\\\\x90V\\\\xb9W\\\\xadb\\\\xb9w\\\\xafm\\\\xb9\\\\xa8\\\\xc6\\\\x8d\\\\xb9\\\\xc4\\\\xdd\\\\x95\\\\xb9\\\\xecx\\\\x9f\\\\xb9\\\\xbe\\\\xcb\\\\xbe\\\\xb9k\\\\xa6\\\\xda\\\\xb9\\\\xdd\\\\x12\\\\xe2\\\\xb9\\\\x90\\\\xb7\\\\xe3\\\\xb9\\\\x8d\\\\xcd\\\\xed\\\\xb9\\\\x11;\\\\xf4\\\\xb9a"\\\\x06\\\\xba\\\\xa7\\\\x8c\\\\x13\\\\xba\\\\x15 \\\\x19\\\\xba\\\\xa7\\\\x1d\\\\x19\\\\xba\\\\x19\\\\xf6\\\\x0b\\\\xba;Q\\\\x02\\\\xbas\\\\x9d\\\\x01\\\\xba\\\\xee\\\\xa1\\\\xfa\\\\xb9\\\\\\\'a\\\\xed\\\\xb9\\\\t\\\\xaa\\\\xde\\\\xb9\\\\xba\\\\xf0\\\\xcf\\\\xb9\\\\x98\\\\xff\\\\xc7\\\\xb9\\\\xec-\\\\xbf\\\\xb9V\\\\xa3\\\\xad\\\\xb9\\\\x87U\\\\x8d\\\\xb9[\\\\x0fT\\\\xb9\\\\xc0W<\\\\xb9_\\\\xd32\\\\xb9O{\\\\x04\\\\xb94XF\\\\xb8\\\\xa2k\\\\xbf7\\\\xf4\\\\x7f\\\\xc68\\\\xafJ\\\\xfe8\\\\x12\\\\x93\\\\x119_\\\\xe0F9\\\\xa25i9\\\\x14\\\\x17x9\\\\xb2\\\\x80k9\\\\xf0\\\\x85M9\\\\xb3=-9\\\\xea\\\\x16!9!N\\\\xfa8*\\\\\\\'\\\\x968\\\\xf8\\\\xb8=8\\\\xf1\\\\xa6\\\\xc86\\\\x9e\\\\xe7\\\\x1a\\\\xb8=H\\\\xc1\\\\xb8S\\\\xd5\\\\x1e\\\\xb9\\\\x9b\\\\xebW\\\\xb9\\\\xa2\\\\x05\\\\x8f\\\\xb9\\\\x01\\\\x93\\\\x8f\\\\xb9\\\\xd9\\\\x08\\\\xa3\\\\xb9\\\\xf1\\\\x80\\\\xb0\\\\xb9\\\\x91\\\\xdf\\\\xa6\\\\xb9\\\\x89\\\\x87\\\\xc1\\\\xb9\\\\xd5x\\\\xc6\\\\xb9\\\\xd8\\\\xad\\\\xd7\\\\xb9&\\\\xfb\\\\xdd\\\\xb9\\\\x0b\\\\x95\\\\xd9\\\\xb9\\\\x1f&\\\\xc9\\\\xb9\\\\xff\\\\xeb\\\\x9d\\\\xb9=\\\\x13\\\\x90\\\\xb9\\\\x95\\\\x86U\\\\xb9`\\\\xe9\\\\x12\\\\xb9\\\\x08\\\\xf0\\\\xd8\\\\xb8 @\\\\t\\\\xb8\\\\x06q\\\\xda7\\\\xa6\\\\x10\\\\xe78mP\\\\r9,M\\\\\\\'9Q\\\\xbd[9\\\\x1aJx9&I\\\\xa79\\\\xa9\\\\xca\\\\xc29\\\\xa3\\\\x18\\\\xdc9FK\\\\x00:\\\\x06`\\\\x0c:q\\\\x86\\\\x1a:\\\\xf7:#:;\\\\xe80:\\\\xc7\\\\xc5=:\\\\x93sL:\\\\xf7*[:\\\\xca\\\\xf9^:n\\\\x06c:\\\\x1b\\\\x01a:$!_:;\\\\xb9_:(\\\\xb4a:\\\\xf9\\\\xa0c:v\\\\xdei:\\\\xd3\\\\x06p:\\\\x9b\\\\x96m:\\\\xa9\\\\xa5w:\\\\xee\\\\xa6\\\\x81:4\\\\x8f\\\\x80:\\\\x90\\\\x02\\\\x87:\\\\xeb\\\\x08\\\\x8f:\\\\xc6&\\\\x8f:\\\\xb73\\\\x92:\\\\x9c\\\\xa6\\\\x90:\\\\x97|\\\\x8d:\\\\x00\\\\x81\\\\x8d:tO\\\\x89:-J\\\\x86:\\\\x8a\\\\xe0\\\\x7f:\\\\xe9\\\\x94x:\\\\\\\'\\\\x1dy:Z\\\\xeco:\\\\xea\\\\xf6k:\\\\xac\\\\xc6\\\\\\\\:\\\\xe0\\\\x94F:\\\\xbb\\\\t6:\\\\xf8\\\\xf7\\\\x1f:\\\\x06\\\\xe1\\\\n:\\\\xb0u\\\\xeb90\\\\xd9\\\\xc79\\\\xe1Z\\\\xa79@8w9\\\\xd9\\\\x02\\\\xed8\\\\xe7B\\\\x01\\\\xb7\\\\x8d\\\\xcc\\\\xfe\\\\xb8\\\\xe9\\\\xc9x\\\\xb9\\\\x10\\\\xee\\\\xae\\\\xb93M\\\\xe8\\\\xb9\\\\xbc2\\\\t\\\\xba*\\\\xf4!\\\\xbaC\\\\x9eR\\\\xba\\\\x1b\\\\xce{\\\\xba/\\\\xa8\\\\x8f\\\\xba*l\\\\xa4\\\\xbaGQ\\\\xb4\\\\xba\\\\xa3\\\\xe4\\\\xc1\\\\xba\\\\x1aD\\\\xcd\\\\xba{\\\\x07\\\\xd6\\\\xba\\\\xd9t\\\\xde\\\\xba\\\\xb2\\\\x1e\\\\xe3\\\\xbatq\\\\xe1\\\\xbawN\\\\xdf\\\\xba\\\\x03\\\\x98\\\\xdd\\\\xba~\\\\xbd\\\\xd7\\\\xba;\\\\xba\\\\xce\\\\xba\\\\x1b\\\\xe0\\\\xc5\\\\xba\\\\xc6~\\\\xb5\\\\xba\\\\x16\\\\xa1\\\\xa9\\\\xba\\\\xbd\\\\t\\\\xa5\\\\xba\\\\xd4.\\\\x98\\\\xbaw\\\\xce\\\\x8a\\\\xba\\\\x06ls\\\\xba\\\\xeb\\\\xdeO\\\\xba3\\\\x9f&\\\\xbaP\\\\xeb\\\\xf7\\\\xb9\\\\x95\\\\xd1\\\\xaf\\\\xb9\\\\xaeV2\\\\xb9E\\\\x9f\\\\xee\\\\xb7\\\\xc7\\\\xde\\\\xf78l\\\\xe0\\\\x829J\\\\xff\\\\xc59\\\\x97N\\\\x04:m\\\\xaa&:u\\\\x05N:\\\\xdf\\\\rj:\\\\x88q\\\\x81:\\\\x1b?\\\\x8d:\\\\xad\\\\xe8\\\\x97:\\\\xfe\\\\\\\\\\\\xa4:\\\\xd1\\\\xa0\\\\xaf:\\\\xa8\\\\x9e\\\\xb7:\\\\x01\\\\xd3\\\\xb6:\\\\xf5A\\\\xb8:\\\\xfb\\\\x80\\\\xba:9i\\\\xba:LN\\\\xb5:x\\\\x01\\\\xab:\\\\xad\\\\x03\\\\x9e::\\\\xf7\\\\x92:%\\\\x83\\\\x8c:\\\\xfd\\\\xb4\\\\x81:u}y:z5`:\\\\x17\\\\x11;:\\\\xec-&:q6\\\\n:\\\\xef\\\\xfe\\\\xd99\\\\x08\\\\xfe\\\\xa39\\\\x9d\\\\x85p9Z\\\\xcb\\\\x1595\\\\x89\\\\xaa7\\\\xe3\\\\xc1:\\\\xb8Z~\\\\x01\\\\xb9,\\\\xd7v\\\\xb9\\\\x84O\\\\xb3\\\\xb9\\\\xbd\\\\x17\\\\xf4\\\\xb9\\\\x02\\\\x80\\\\x16\\\\xba\\\\xa2\\\\xfe0\\\\xba^SE\\\\xba\\\\x87\\\\x88P\\\\xba4\\\\xd1c\\\\xba\\\\x9c-o\\\\xba\\\\xb0\\\\xc9y\\\\xba\\\\x84\\\\xcc\\\\x84\\\\xba\\\\xbf\\\\x80\\\\x82\\\\xba\\\\x10\\\\xc2\\\\x80\\\\xba\\\\x89d}\\\\xbaS0w\\\\xba\\\\xfexz\\\\xba_\\\\xbfu\\\\xba4\\\\x90q\\\\xba}\\\\xf6j\\\\xba\\\\x02\\\\x00f\\\\xba\\\\xd0\\\\xfd_\\\\xba\\\\x12\\\\xbcO\\\\xba7\\\\x17K\\\\xba\\\\x1c%A\\\\xba\\\\x8dQ-\\\\xba\\\\x1c\\\\n(\\\\xba\\\\xb1\\\\x9c\\\\x1a\\\\xbar\\\\x9c\\\\x0e\\\\xba~\\\\xa1\\\\x04\\\\xba\\\\xac\\\\x01\\\\xde\\\\xb9\\\\xe1\\\\xdd\\\\xca\\\\xb9\\\\x1a*\\\\xb3\\\\xb9p\\\\x87\\\\x98\\\\xb9\\\\\\\\\\\\x04\\\\x82\\\\xb9"\\\\xe2G\\\\xb9<N\\\\x19\\\\xb91\\\\x0b\\\\xcd\\\\xb8\\\\x83\\\\xdf8\\\\xb8\\\\x85/08L\\\\xa6\\\\x049\\\\xd9CE9\\\\x857\\\\x829\\\\x01B\\\\x929-\\\\xa7\\\\xba9\\\\x9a\\\\xde\\\\xda9\\\\xf6\\\\x0b\\\\xd49\\\\xfb-\\\\xdd9|k\\\\xd29\\\\xd2\\\\x9b\\\\xc29E\\\\xd9\\\\xd39G8\\\\xd69\\\\x8e\\\\xc9\\\\xc89v\\\\x9b\\\\xc39\\\\x0f?\\\\xb59\\\\x13\\\\xbf\\\\xa19\\\\xc4\\\\x05\\\\x989\\\\x94\\\\xd2\\\\x8b9\\\\x83\\\\xe0j9\\\\xc5\\\\xd4K9\\\\x97\\\\x8aN9i\\\\x1f\\\\x189\\\\x87d\\\\xe28\\\\xce\\\\xce\\\\xa98\\\\xcc\\\\xd2\\\\x0682l\\\\x0e7\\\\t<]6aJ58\\\\x9d\\\\x03\\\\x878\\\\x18\\\\x14\\\\xc48X\\\\x9b.9=Wh9\\\\x89\\\\xbd\\\\x9b9u\\\\xe9\\\\xbe9\\\\xba5\\\\xcd9\\\\x08\\\\x91\\\\xe39\\\\xf5\\\\xcc\\\\xf89Vj\\\\r:\\\\x90b$:<\\\\x1e>:\\\\xb9-W:m\\\\x88r:\\\\xb72\\\\x88:\\\\x04\\\\x88\\\\x94:\\\\xfd\\\\x08\\\\xa1:\\\\xc1\\\\x1a\\\\xb1:\\\\x98\\\\xf3\\\\xbc:\\\\x96\\\\x92\\\\xc2:y\\\\xb7\\\\xcd:ni\\\\xd5:\\\\xc6l\\\\xdb:X\\\\xe0\\\\xe2:\\\\x91;\\\\xdf:\\\\xd9(\\\\xe2:8[\\\\xe6:P\\\\xf4\\\\xe4:\\\\xed\\\\xdc\\\\xe6:\\\\x0c=\\\\xe5:\\\\xb7\\\\x06\\\\xdf:\\\\xb5\\\\x02\\\\xd1:\\\\xf7W\\\\xca:y\\\\x00\\\\xc2:\\\\x82\\\\x12\\\\xb8:\\\\xd0\\\\xa5\\\\xb3:\\\\r\\\\x86\\\\xa3:\\\\x8b\\\\xf9\\\\x94:\\\\x07\\\\xcd\\\\x87:I\\\\xf1k:\\\\xd2OR:\\\\xa8{3:\\\\xc6,\\\\x0e:\\\\xca\\\\xb1\\\\xd69R\\\\xb9\\\\x969\\\\x00\\\\xc3E95Wf8\\\\xb4\\\\x1f\\\\xb8\\\\xb8}@<\\\\xb9\\\\xdf\\\\x8c\\\\x8e\\\\xb9+\\\\x1d\\\\xcd\\\\xb9<\\\\xf5\\\\xf3\\\\xb9\\\\x13\\\\xb5\\\\x0f\\\\xba\\\\xfa\\\\xd4*\\\\xba @/\\\\xba\\\\x02\\\\x1b4\\\\xba\\\\xee*H\\\\xba\\\\x9e\\\\x14Q\\\\xba\\\\xa8?]\\\\xba\\\\xea\\\\x9av\\\\xba$^y\\\\xba\\\\xe2\\\\xe3\\\\x83\\\\xba\\\\x87q\\\\x8d\\\\xba\\\\x8e\\\\x9b\\\\x8c\\\\xba\\\\xf95\\\\x91\\\\xba\\\\xf8\\\\xa4\\\\x94\\\\xba\\\\x99\\\\x1a\\\\x93\\\\xba\\\\xad\\\\xdf\\\\x91\\\\xba{\\\\xda\\\\x8f\\\\xba,\\\\x8e\\\\x89\\\\xba3\\\\xee\\\\x86\\\\xba+#\\\\x88\\\\xba`\\\\x0b\\\\x83\\\\xba<`y\\\\xba\\\\x96$h\\\\xbao\\\\xbaY\\\\xba\\\\x9a\\\\xb9N\\\\xba\\\\xf4\\\\t3\\\\xba\\\\xd4o\\\\x1a\\\\xbaf:\\\\x07\\\\xbay\\\\xd8\\\\xe3\\\\xb9\\\\x81\\\\x08\\\\xbe\\\\xb9\\\\xe6f\\\\x98\\\\xb9[\\\\xa6c\\\\xb9\\\\x1bI\\\\x1e\\\\xb9\\\\xcf\\\\xfd~\\\\xb8O\\\\xaaU8\\\\xa4\\\\xba\\\\xda8\\\\xa9["9\\\\xc0\\\\xacf9F\\\\\\\\\\\\x869Em\\\\xab9\\\\x17\\\\x9a\\\\xce9T\\\\xba\\\\xe492\\\\xf1\\\\x00:k\\\\xf7\\\\r:Gx :\\\\xf4\\\\xce):\\\\x13\\\\x8d,:=\\\\xb84:A\\\\xcd.:\\\\xf7\\\\xf9$:\\\\xf8]\\\\x1f:\\\\xe8\\\\x15\\\\x12:\\\\xc1y\\\\x02:Z\\\\xe9\\\\xdc9\\\\x10\\\\x8c\\\\xb99\\\\xc8\\\\x03\\\\x949g\\\\xb8\\\\x839^cT9\\\\xd5\\\\x99)9\\\\x02\\\\xb9+96=\\\\xcd8wa\\\\x828\\\\xfd[x7\\\\x1e\\\\x9c\\\\x8b\\\\xb7&{\\\\x8d\\\\xb7\\\\x86.S\\\\xb8\\\\x82\\\\xbb\\\\x8a\\\\xb8\\\\xe3\\\\x81\\\\xfd\\\\xb8i\\\\x89$\\\\xb9\\\\xac7\\\\x12\\\\xb9\\\\xd0\\\\\\\\\\\\x15\\\\xb9Y#\\\\xbd\\\\xb8\\\\xcd\\\\x08K\\\\xb8\\\\x10\\\\xf3\\\\x1a\\\\xb8\\\\xf2\\\\xb5W7\\\\x07\\\\x9c=8\\\\xb6\\\\x85\\\\x888\\\\xbf_\\\\xc48\\\\x8a\\\\xee\\\\x079\\\\xf8\\\\xf1\\\\\\\'9f\\\\x8c<9\\\\xdf`h9\\\\x87^\\\\x949p\\\\t\\\\xba9\\\\xed\\\\t\\\\xe39=D\\\\xf69\\\\xbf`\\\\xfa9\\\\x17\\\\x93\\\\xff9\\\\xeb`\\\\x00:\\\\xc58\\\\x08:\\\\xaa\\\\x84\\\\x0e:N\\\\xfe\\\\x15:\\\\xbc\\\\xef\\\\x1e:K\\\\xfa\\\\x1f:_r&:\\\\xdb\\\\xfd):\\\\xd2\\\\xd0.:\\\\xbd\\\\x84/:\\\\x9f\\\\x06):\\\\xc0\\\\xfe-:0\\\\xe2-:\\\\xc5\\\\xf9-:k3-:~\\\\x19):\\\\xe4\\\\x80):\\\\xaa\\\\xef\\\\x1f:2y\\\\x17:c\\\\xb6\\\\n:6\\\\x94\\\\x00:\\\\xfb\\\\x86\\\\xd19\\\\xc0\\\\xd5\\\\xa79\\\\x8b\\\\xa9\\\\x949\\\\xffIV9\\\\xbf\\\\x97<9\\\\\\\\\\\\x8e\\\\xaf8P\\\\x84\\\\xd7\\\\xb7#\\\\x9c\\\\xba\\\\xb8\\\\xb7HC\\\\xb9[\\\\xec\\\\x86\\\\xb9\\\\xdb5\\\\xbb\\\\xb9\\\\x9f\\\\x8d\\\\xe3\\\\xb9\\\\xd83\\\\x06\\\\xba\\\\x03}\\\\x14\\\\xbaJ  \\\\xba\\\\xa5\\\\xab7\\\\xba\\\\xf6FD\\\\xba>\\\\xe3U\\\\xba\\\\x85\\\\xbe_\\\\xbaCyg\\\\xba\\\\x11by\\\\xbaA\\\\xbdt\\\\xba\\\\xc9{o\\\\xba\\\\xbcBt\\\\xba\\\\x01\\\\x16x\\\\xba\\\\xdb\\\\x1cv\\\\xba\\\\x1d\\\\xd0j\\\\xbaX\\\\xc9b\\\\xba\\\\x1b&Y\\\\xbaY8W\\\\xba\\\\xad\\\\xddP\\\\xba\\\\xba\\\\xb7G\\\\xba\\\\xea\\\\xf0F\\\\xba\\\\x8b\\\\x98:\\\\xba\\\\xe8\\\\x8a7\\\\xba564\\\\xba\\\\xdd",\\\\xba;\\\\xc10\\\\xba,M&\\\\xba\\\\xb6\\\\x90\\\\x1f\\\\xba,%\\\\\\\'\\\\xba\\\\xba1%\\\\xba-\\\\x86%\\\\xbaX\\\\\\\\+\\\\xba-&1\\\\xba\\\\xa1\\\\xe3<\\\\xba\\\\xd5\\\\xc0N\\\\xba)\\\\xb3]\\\\xbaM\\\\x06m\\\\xba.\\\\xc9u\\\\xba\\\\xe1\\\\x1az\\\\xba\\\\xf5\\\\x84~\\\\xban\\\\xca\\\\x81\\\\xba\\\\xa4\\\\x95\\\\x82\\\\xbaL!\\\\x81\\\\xba@9\\\\x83\\\\xba\\\\x1fB\\\\x82\\\\xbaX\\\\xbb\\\\x82\\\\xba\\\\x9cO\\\\x86\\\\xba3<\\\\x85\\\\xba=L\\\\x85\\\\xba+\\\\xcb\\\\x85\\\\xba\\\\x06\\\\xeex\\\\xba\\\\xa1Tl\\\\xba\\\\xf3\\\\xc1g\\\\xba}(U\\\\xba\\\\xd3\\\\tF\\\\xba;\\\\x8b2\\\\xbah\\\\x82!\\\\xba\\\\x17\\\\x19\\\\x13\\\\xba\\\\xffB\\\\xfe\\\\xb9<\\\\x14\\\\xdf\\\\xb9,v\\\\xbe\\\\xb9\\\\xa1\\\\x15\\\\x94\\\\xb9EgJ\\\\xb9\\\\xd6F\\\\t\\\\xb9\\\\xccm\\\\xd0\\\\xb8B\\\\x80\\\\xa6\\\\xb8z2\\\\x94\\\\xb84R\\\\x8e\\\\xb8\\\\xc6\\\\x020\\\\xb8M8m\\\\xb7v\\\\x9c\\\\x86\\\\xb7\\\\xe0\\\\xdb(\\\\xb6\\\\x12\\\\x8e\\\\xef\\\\xb5 \\\\t-\\\\xb7\\\\\\\'\\\\xec\\\\x107)2\\\\t7\\\\x131\\\\x0e7\\\\xe1\\\\xe1\\\\x08\\\\xb8E\\\\x7f\\\\xcb\\\\xb8N\\\\x12\\\\xb8\\\\xb8\\\\x8e\\\\xed\\\\xb5\\\\xb8\\\\x16N\\\\xd0\\\\xb8\\\\x0e\\\\xdf\\\\x8e\\\\xb8\\\\\\\'\\\\xa9\\\\x9f\\\\xb8\\\\xfe\\\\x8f\\\\xae\\\\xb8\\\\xf4w\\\\x89\\\\xb8?>\\\\x92\\\\xb8\\\\xc8_(\\\\xb8&\\\\x9f\\\\xa0\\\\xb7\\\\x93r1\\\\xb7\\\\x02\\\\xa1\\\\xe86\\\\xf2%\\\\xe97\\\\xf1\\\\x8e%8\\\\x08k\\\\x948f\\\\x06\\\\n9l\\\\xcb\\\\x159d\\\\xcfE9\\\\x7f}~9N\\\\xa8\\\\x8d9\\\\x0c\\\\xc9\\\\xa59T\\\\n\\\\x9c9\\\\x01\\\\xa4\\\\x979\\\\x14e\\\\xa49\\\\xb5\\\\xa3\\\\xb19\\\\xea\\\\xb5\\\\xdb9\\\\xd5\\\\x95\\\\xf19d\\\\xbd\\\\x05:\\\\xde\\\\xb0\\\\x0b:\\\\x83\\\\x12\\\\t:k\\\\\\\\\\\\x16:|-\\\\x1d:\\\\xf2n/:`W::\\\\xf5\\\\xdd::T\\\\x82G:\\\\xe6\\\\x1aJ:V\\\\xcf[:\\\\xa0\\\\xd7e:`\\\\x89m:\\\\x9a\\\\\\\'\\\\x81:\\\\x08\\\\x8a\\\\x81:\\\\xbc\\\\xb2\\\\x87:\\\\x14\\\\x14\\\\x8e:9\\\\xad\\\\x90:\\\\xfa\\\\xba\\\\x96:\\\\xf4r\\\\x96:]|\\\\x97:\\\\x9c:\\\\x97:RS\\\\x94:\\\\xab%\\\\x95:\\\\xab\\\\xbc\\\\x91:\\\\xf9\\\\xf2\\\\x90:\\\\x93\\\\xa7\\\\x95:\\\\xa5\\\\x10\\\\x99:\\\\xd2\\\\x91\\\\x9a:\\\\xbb\\\\x8c\\\\x9b:\\\\xce\\\\xb8\\\\x9d:dz\\\\x99:q4\\\\x96:\\\\xbe\\\\xad\\\\x95:\\\\xa5\\\\xb5\\\\x8e:"M\\\\x8b:\\\\xd3\\\\xd7\\\\x89:5\\\\x12\\\\x87:$\\\\xda\\\\x81:\\\\xc3\\\\x10\\\\x81:\\\\x13\\\\xfa\\\\x83:V\\\\xad\\\\x80:K\\\\xea\\\\x80:\\\\xb8\\\\xde~:\\\\xa8~n:T\\\\xd6Y:\\\\x8b\\\\xf7A:B\\\\xa9+:\\\\x12\\\\x96\\\\x1c:\\\\xd6U\\\\x16:!\\\\xac\\\\r:i\\\\x0f\\\\xfb9\\\\xe8\\\\xed\\\\xd69\\\\xda\\\\xfd\\\\xbd9N\\\\xf1\\\\xa39\\\\xbc(h9\\\\x9ch%9>\\\\n\\\\xfb8g\\\\xf8\\\\x848c\\\\x91\\\\x01\\\\xb7J\\\\xf2\\\\xae\\\\xb8\\\\xd0\\\\xc3)\\\\xb9\\\\xe1W{\\\\xb9\\\\x12\\\\x90\\\\x9d\\\\xb9\\\\x05\\\\x19\\\\xc0\\\\xb9\\\\xc5}\\\\xe3\\\\xb9P\\\\xfc\\\\x03\\\\xbao\\\\xa1\\\\x18\\\\xba\\\\x1d\\\\xb4+\\\\xba\\\\xa2A>\\\\xba\\\\x0cbX\\\\xba\\\\xac\\\\x19n\\\\xba\\\\xf9i~\\\\xba\\\\x7f\\\\xfe\\\\x88\\\\xba\\\\x08;\\\\x91\\\\xbaE\\\\xb3\\\\x99\\\\xba\\\\xb1\\\\xd8\\\\xa1\\\\xba\\\\xd3\\\\x11\\\\xab\\\\xbaJ\\\\xf3\\\\xb2\\\\xbaH\\\\x9b\\\\xb6\\\\xba\\\\x86\\\\xfd\\\\xbb\\\\xba\\\\xf3\\\\xf4\\\\xc1\\\\xba\\\\xf6\\\\xd7\\\\xc2\\\\xba\\\\x14H\\\\xc4\\\\xba>]\\\\xc7\\\\xbaY\\\\xab\\\\xc4\\\\xbaz3\\\\xc6\\\\xba\\\\x83\\\\xe8\\\\xc8\\\\xba\\\\xb2\\\\xd3\\\\xc6\\\\xba]$\\\\xc9\\\\xba\\\\xef\\\\x19\\\\xc2\\\\xba\\\\xd3+\\\\xb8\\\\xba{\\\\x17\\\\xb1\\\\xba\\\\xf1\\\\xfa\\\\xa6\\\\xba\\\\xe6\\\\xbb\\\\xa3\\\\xbaV\\\\xf7\\\\x9c\\\\xba\\\\xd4<\\\\x99\\\\xbap\\\\xfd\\\\x93\\\\xbarm\\\\x8a\\\\xba\\\\x1b\\\\x85\\\\x83\\\\xba\\\\xfb\\\\x15p\\\\xba\\\\x0b\\\\xa4`\\\\xbaY\\\\xffE\\\\xba\\\\xc1\\\\xa8(\\\\xbaCK\\\\x17\\\\xba^f\\\\x02\\\\xba\\\\x9c\\\\xde\\\\xdf\\\\xb9X:\\\\xa2\\\\xb9\\\\x15\\\\x05Y\\\\xb9\\\\r\\\\xeb\\\\x16\\\\xb9\\\\xc0\\\\xa4\\\\xa4\\\\xb8J\\\\xc9\\\\xca\\\\xb7\\\\x12\\\\xa5q8\\\\xd0!\\\\x179j\\\\x10{9x\\\\xd1\\\\xa19\\\\x1fC\\\\xb19\\\\x8e\\\\xfb\\\\xd09\\\\x06\\\\t\\\\xe99\\\\xcf`\\\\x08:v\\\\xdd\\\\x19:\\\\xf8E\\\\x1b:"\\\\xcc&:Y\\\\xe6):\\\\t\\\\xcb/:"O@:\\\\x7f\\\\x1c=:V\\\\xc1B:\\\\x98\\\\x8bO:W\\\\rV:M\\\\xc4_:\\\\x14\\\\xdda:3t]:QwQ:\\\\xacUK:n\\\\x04::\\\\x8c\\\\\\\\ :&/\\\\x1d:\\\\xb7\\\\x99\\\\x0c:\\\\x11\\\\x05\\\\xf39\\\\xaa\\\\xf9\\\\xd89\\\\xe2\\\\xb4\\\\xad9\\\\xcff\\\\x9a9N\\\\x89f9b\\\\xa7$9T\\\\x9f!9\\\\xe3\\\\xb1\\\\x009\\\\x1c\\\\xa4\\\\x009\\\\xa9\\\\xed\\\\xfd8\\\\x95\\\\xd8\\\\xc18\\\\xc1\\\\x9b\\\\x8e8\\\\x98sJ8\\\\xd9\\\\xe0\\\\xed7PS\\\\xa66k\\\\xce\\\\xc55\\\\xde\\\\x1a\\\\x0c\\\\xb8\\\\xbd\\\\xc1E\\\\xb8\\\\x148Q\\\\xb8=\\\\xbe\\\\x9d\\\\xb8/\\\\xd0\\\\x7f\\\\xb8\\\\xf5*&\\\\xb8\\\\xdc\\\\x01\\\\x0e\\\\xb8?\\\\xc0\\\\x1d\\\\xb7\\\\xd3\\\\n\\\\xbf\\\\xb6\\\\xeee\\\\x15\\\\xb8MN\\\\xa8\\\\xb7-\\\\\\\'\\\\x076w\\\\xfe97j\\\\x08\\\\x048\\\\xae\\\\\\\\\\\\x996\\\\xf0k\\\\x87\\\\xb8G\\\\x08\\\\xea\\\\xb8"..\\\\xb9Y\\\\xb6X\\\\xb9\\\\t\\\\xed\\\\x84\\\\xb9\\\\x00D\\\\xac\\\\xb9\\\\x05\\\\xcf\\\\xc5\\\\xb9\\\\\\\'{\\\\xdb\\\\xb9\\\\xe5\\\\x0c\\\\xf0\\\\xb9\\\\xe6R\\\\x02\\\\xba5\\\\x19\\\\t\\\\xba:\\\\x82\\\\x1b\\\\xba\\\\xf94#\\\\xba\\\\x18u\\\\x1f\\\\xba.\\\\\\\\\\\\x1e\\\\xba\\\\xb6&\\\\x1a\\\\xbav\\\\xb2\\\\x1d\\\\xbai\\\\x18\\\\x15\\\\xbal9\\\\x05\\\\xba\\\\xff\\\\xa9\\\\xfe\\\\xb9\\\\x8d\\\\xe8\\\\xef\\\\xb9\\\\x8c\\\\x03\\\\xea\\\\xb9\\\\xca\\\\xc1\\\\xe2\\\\xb9\\\\xdd\\\\x15\\\\xdb\\\\xb9\\\\xd6n\\\\xe5\\\\xb9\\\\x88\\\\xb1\\\\xe4\\\\xb9\\\\x02\\\\x93\\\\xe3\\\\xb9#\\\\x00\\\\xeb\\\\xb9v"\\\\xf0\\\\xb9)~\\\\xe9\\\\xb9\\\\xc4\\\\xc3\\\\xe2\\\\xb9\\\\x9b\\\\xf0\\\\xd6\\\\xb9\\\\t\\\\x1a\\\\xcf\\\\xb9\\\\xed\\\\x85\\\\xcc\\\\xb9\\\\xbc\\\\xdc\\\\xc4\\\\xb9\\\\x18\\\\x02\\\\xbb\\\\xb9,g\\\\xbf\\\\xb9?\\\\xab\\\\xd0\\\\xb9\\\\x98/\\\\xce\\\\xb9\\\\xcf[\\\\xe1\\\\xb9.k\\\\xfa\\\\xb9Q\\\\x08\\\\x01\\\\xba\\\\xc6\\\\x15\\\\x18\\\\xba\\\\x00\\\\x11+\\\\xba\\\\x01\\\\xb24\\\\xba\\\\x076B\\\\xba\\\\xc9ZH\\\\xba\\\\xae\\\\x98X\\\\xba\\\\x8d\\\\x80h\\\\xbaR\\\\x15n\\\\xba\\\\xfc\\\\xdfz\\\\xba\\\\x16\\\\x86\\\\x81\\\\xbaE\\\\x06\\\\x83\\\\xba\\\\td\\\\x85\\\\xbaz5\\\\x8c\\\\xba\\\\xe4j\\\\x90\\\\xba^\\\\x02\\\\x94\\\\xba\\\\xa9\\\\xd3\\\\x98\\\\xbaY\\\\xda\\\\x96\\\\xba\\\\xc2d\\\\x96\\\\xba\\\\x7f<\\\\x90\\\\xba\\\\\\\\\\\\x93\\\\x89\\\\xba\\\\xaf~\\\\x88\\\\xbaE\\\\x02\\\\x83\\\\xba\\\\x92\\\\xbd~\\\\xba\\\\x8a\\\\x81o\\\\xba\\\\x0c\\\\x83V\\\\xbaE\\\\x8cF\\\\xba\\\\x00\\\\x054\\\\xbaq\\\\x92\\\\x1a\\\\xba\\\\x9d\\\\x00\\\\x07\\\\xbabw\\\\xdb\\\\xb9\\\\\\\'t\\\\xa4\\\\xb9F\\\\xa2P\\\\xb9\\\\xa7\\\\xfbL\\\\xb8\\\\xbd\\\\xb7 8\\\\xd38\\\\xeb8\\\\xd8\\\\xafT9\\\\x05\\\\xd2\\\\x9f9g\\\\xbc\\\\xe59\\\\xa2\\\\xe2\\\\x0c:\\\\xfdd\\\\x1d:}\\\\xe47:\\\\x99\\\\xd8P:f\\\\xf9[:\\\\xf7!h:m\\\\xb7o:\\\\xb4\\\\xc0u:\\\\xd6\\\\x91\\\\x80:)\\\\xad}:,\\\\xfas:\\\\xdb\\\\xa4n:\\\\x7f;[:\\\\xba%W:\\\\x83;[:\\\\xa6\\\\xadG:\\\\xb9\\\\xc9>:\\\\x1aY?:\\\\x8d3.:\\\\x12L!:V\\\\x1f\\\\x15:\\\\x1e\\\\xcd\\\\x00:\\\\xb4\\\\r\\\\xed9]^\\\\xd59\\\\xdd`\\\\xb19\\\\xae\\\\\\\'\\\\x9a9\\\\xf7eI9\\\\xa0\\\\xb2\\\\xc48DBi8B\\\\xaat\\\\xb7R\\\\xdf\\\\xb7\\\\xb8\\\\xcf\\\\xd4=\\\\xb98\\\\xda\\\\x86\\\\xb9a\\\\x88\\\\xa0\\\\xb9i\\\\\\\'\\\\xc2\\\\xb9\\\\x1ev\\\\xde\\\\xb9\\\\x95\\\\x90\\\\xf6\\\\xb9:I\\\\x01\\\\xba\\\\xc8B\\\\x0e\\\\xba\\\\xf7\\\\xa2\\\\x1f\\\\xba\\\\x84\\\\n$\\\\xba\\\\xd9\\\\x9e0\\\\xba\\\\x8f4:\\\\xba0<@\\\\xbai\\\\xc6S\\\\xbaH}]\\\\xba\\\\n\\\\xddq\\\\xbaB\\\\xc6\\\\x80\\\\xba\\\\x1c_\\\\x80\\\\xba8\\\\xac\\\\x83\\\\xbaO\\\\x10\\\\x85\\\\xba\\\\xe1\\\\x83\\\\x89\\\\xba9\\\\x1b\\\\x8d\\\\xba\\\\xde\\\\xa8\\\\x8e\\\\xbaMj\\\\x8d\\\\xba\\\\t\\\\x19\\\\x8b\\\\xba{>\\\\x8a\\\\xba\\\\xd7p\\\\x82\\\\xbacA\\\\x7f\\\\xbaI\\\\xb3x\\\\xba\\\\xda\\\\xd0d\\\\xbalLY\\\\xba\\\\xfc=?\\\\xban\\\\xbe!\\\\xba\\\\x19p\\\\x11\\\\xba\\\\x8e`\\\\x03\\\\xbaJZ\\\\xf9\\\\xb9\\\\xfbV\\\\xe3\\\\xb9~d\\\\xd2\\\\xb9L\\\\xcf\\\\xc9\\\\xb9\\\\x0b\\\\xd2\\\\xb0\\\\xb9\\\\xc7\\\\xe3\\\\x9b\\\\xb9\\\\xd9\\\\xa5\\\\x89\\\\xb9q\\\\xacp\\\\xb9\\\\t>\\\\x1f\\\\xb9\\\\xe3\\\\xf1]\\\\xb8\\\\xcdC\\\\x1d\\\\xb7\\\\xc7\\\\xcf\\\\x848E\\\\xda\\\\t9\\\\xbf\\\\xb2J9\\\\x9d\\\\x14\\\\x9f9X9\\\\xb594:\\\\xce9\\\\xbfZ\\\\xe69du\\\\xdf9xR\\\\xf59-\\\\xda\\\\x04:\\\\x07\\\\xb3\\\\x04:\\\\x01G\\\\r:\\\\xbe\\\\x96\\\\x19:\\\\x08\\\\xbd\\\\x1b:\\\\xa8|":\\\\xdav,:W:1:\\\\xfe-@:\\\\xc8\\\\xbcL:\\\\x99QO:\\\\xd8\\\\x97\\\\\\\\:\\\\xbaxf:\\\\xdb\\\\xa1a:\\\\xba\\\\xf7]:\\\\x16{W:\\\\xf8\\\\x94O:l\\\\xe9D:\\\\x1f\\\\xe6E:z]L:\\\\x8fiD:RH4:(\\\\xa0!:\\\\xf03\\\\x1d:)\\\\x05\\\\x15:\\\\xe3"\\\\x01:\\\\xbe\\\\xd7\\\\x04:\\\\x14\\\\xab\\\\xda9D\\\\x04\\\\xa89\\\\xf9?\\\\xa99\\\\xc2P\\\\x859\\\\x848p92YF9h\\\\x8c29\\\\xad\\\\xae\\\\x1f91w\\\\x029 \\\\xbf\\\\x1a9H|\\\\x0394\\\\xf5\\\\xed8c3\\\\n9\\\\xd5\\\\xc8\\\\x029\\\\xa1~\\\\xbf8\\\\x99M\\\\xa48)\\\\xdc\\\\xe98\\\\xcf\\\\xd2\\\\xbe8yAI8\\\\x95v\\\\xfd7\\\\xed\\\\xac.8F\\\\x87\\\\xc08~\\\\xff\\\\xfb8W\\\\r\\\\t9\\\\x14\\\\xb9,9\\\\xad]@9q\\\\xe6m9\\\\x8cm\\\\x8d9%u\\\\x819\\\\xaa+\\\\x849\\\\x03\\\\x9c\\\\x879\\\\xe7\\\\xc1\\\\x889\\\\x14\\\\xf7}9MXc9\\\\x99\\\\x7fB9\\\\xd0\\\\x8e!9}q\\\\x0b9\\\\r\\\\x0f\\\\xb78\\\\xbe6P8\\\\xffR\\\\x91\\\\xb7:\\\\x0b\\\\xa5\\\\xb8\\\\x98\\\\xde\\\\xc3\\\\xb8\\\\xe1a\\\\x04\\\\xb91y;\\\\xb9\\\\xc6\\\\x07T\\\\xb9\\\\x06<X\\\\xb9C(C\\\\xb9m\\\\xf6T\\\\xb9+\\\\x0fK\\\\xb9w\\\\x02\\\\\\\'\\\\xb9\\\\x82\\\\xb8\\\\x13\\\\xb9o\\\\xfb\\\\x8c\\\\xb8\\\\xed0\\\\x91\\\\xb7\\\\xd4\\\\x0c\\\\xde7\\\\xc7\\\\xe6\\\\xd083:\\\\x149\\\\x1a\\\\xad*9\\\\x0e\\\\xebR9\\\\xfa\\\\xc9\\\\x8d9\\\\xda\\\\xe5\\\\xb49\\\\x82\\\\xb4\\\\xd49\\\\x9cZ\\\\x01:l\\\\xd5\\\\x1a:\\\\xaf\\\\xf84:$\\\\xd4S:\\\\xc7\\\\x82n:\\\\xb1\\\\x88\\\\x82:\\\\xf9\\\\xe1\\\\x8d:\\\\xc2\\\\x1a\\\\x99:\\\\xa1\\\\xa9\\\\xa0:\\\\\\\\]\\\\xa6:u\\\\x87\\\\xa9:U\\\\x82\\\\xaa:\\\\x82\\\\xef\\\\xb0:\\\\xcc5\\\\xb3:\\\\xdeZ\\\\xb1:\\\\xf8\\\\x94\\\\xb1:h\\\\xcc\\\\xad:NX\\\\xac:\\\\xa9\\\\x80\\\\xa8:>\\\\xd6\\\\xa1:\\\\xa5o\\\\x98:j"\\\\x90:\\\\x0fS\\\\x8d:\\\\xf4\\\\xbb\\\\x8a:D\\\\xd8\\\\x88:>y\\\\x87:\\\\x8c\\\\x89\\\\x84:\\\\x156\\\\x83:\\\\x0bW\\\\x81:\\\\xda\\\\xd0t:\\\\xe8tb:\\\\x00gQ:d\\\\x12>:\\\\\\\'\\\\x9d):\\\\x93\\\\xcf$:\\\\xc0\\\\xf3\\\\x19:\\\\xe1\\\\x9b\\\\x01:5_\\\\xed9\\\\xd4\\\\xdd\\\\xec9`\\\\x9e\\\\xdb9Ai\\\\xc19\\\\xb3z\\\\xa89\\\\xdb|q9w\\\\x05\\\\x0b9\\\\xabR\\\\x898q\\\\x81\\\\xa1\\\\xb7\\\\xf7A\\\\xb2\\\\xb8\\\\xf2a\\\\x02\\\\xb9\\\\x8bmS\\\\xb9\\\\x8b(\\\\x83\\\\xb93\\\\x9b\\\\x96\\\\xb9\\\\x95\\\\xd5\\\\xaa\\\\xb9\\\\xcd\\\\xf4\\\\xc4\\\\xb9\\\\x89m\\\\xf6\\\\xb9\\\\x16\\\\x07\\\\x0e\\\\xba\\\\xb7\\\\xc0#\\\\xba\\\\\\\'\\\\x904\\\\xba\\\\xc1d7\\\\xba\\\\xeb\\\\xce:\\\\xba\\\\xa2\\\\xa78\\\\xba\\\\xdb\\\\x064\\\\xba\\\\x96\\\\xb9.\\\\xba\\\\x0c\\\\\\\'$\\\\xba*\\\\xd5\\\\x16\\\\xba\\\\xd5\\\\xea\\\\x03\\\\xba|\\\\x08\\\\xef\\\\xb9N\\\\xf3\\\\xde\\\\xb9\\\\x83t\\\\xc9\\\\xb9MF\\\\xa4\\\\xb9\\\\xbebb\\\\xb9A]\\\\xe7\\\\xb8\\\\x19\\\\xc8v7t\\\\x1c\\\\xc28\\\\xcbM\\\\x1f9\\\\x9c\\\\xf3\\\\x819\\\\x1a\\\\xca\\\\xa39\\\\xa3\\\\xe0\\\\xbb9\\\\x8b7\\\\xcd9\\\\x82\\\\xb1\\\\xdc9\\\\x13|\\\\xed9,$\\\\xfe9\\\\xf3#\\\\xfb9z\\\\xc0\\\\xe49\\\\xed\\\\xc0\\\\xe89\\\\x84y\\\\xfc9\\\\xdd\\\\xf1\\\\x03:\\\\xe4\\\\x1e\\\\x05:\\\\x860\\\\x05:\\\\xf1\\\\xf2\\\\x08:\\\\xb32\\\\xf79F?\\\\xd79n\\\\xa7\\\\xb19e\\\\xb4g9\\\\xdbP\\\\x089\\\\x1c\\\\x7ft7\\\\xc5\\\\xa4\\\\x80\\\\xb8q0\\\\xf4\\\\xb8"80\\\\xb9.\\\\x8bg\\\\xb9\\\\x14\\\\x05\\\\x99\\\\xb9\\\\xf1T\\\\xba\\\\xb994\\\\xcc\\\\xb9\\\\xcd\\\\xf8\\\\xc8\\\\xb9\\\\x01C\\\\xcd\\\\xb9\\\\xe83\\\\xd1\\\\xb9\\\\x04\\\\x0f\\\\xd5\\\\xb9\\\\x8as\\\\xdf\\\\xb9m\\\\x10\\\\xdd\\\\xb9f\\\\xa7\\\\xe0\\\\xb9\\\\xe6\\\\x85\\\\xed\\\\xb9\\\\xe8\\\\xb3\\\\xee\\\\xb9\\\\x824\\\\xeb\\\\xb9K\\\\xf9\\\\xed\\\\xb9\\\\xbaf\\\\xf3\\\\xb9d}\\\\x00\\\\xba\\\\x1dN\\\\x04\\\\xbap\\\\xd8\\\\x00\\\\xba\\\\x85U\\\\x0c\\\\xba\\\\xafJ\\\\n\\\\xba\\\\x9a\\\\xb1\\\\t\\\\xba\\\\x87\\\\xc4\\\\x0e\\\\xba.u\\\\x0e\\\\xba\\\\xa7\\\\x98\\\\r\\\\xbad\\\\x8c\\\\x07\\\\xba\\\\xfc\\\\x17\\\\x06\\\\xbaJ\\\\x82\\\\xf2\\\\xb9E&\\\\xe6\\\\xb9O\\\\xca\\\\xe0\\\\xb9\\\\x0bz\\\\xd9\\\\xb9\\\\xff\\\\xd2\\\\xda\\\\xb9\\\\xe7\\\\x87\\\\xd3\\\\xb9n\\\\x07\\\\xd5\\\\xb9\\\\xe0\\\\x9f\\\\xd3\\\\xb9.\\\\xde\\\\xdc\\\\xb9\\\\x8f\\\\x05\\\\xf4\\\\xb9\\\\xb7\\\\xff\\\\xf5\\\\xb9\\\\x17\\\\xf0\\\\xfd\\\\xb9\\\\xb7\\\\xae\\\\xea\\\\xb9\\\\x80\\\\xff\\\\xdb\\\\xb9,\\\\x1d\\\\xda\\\\xb9\\\\xe1\\\\xeb\\\\xc9\\\\xb9\\\\xd7&\\\\xb6\\\\xb9\\\\x9f\\\\xc8\\\\xa1\\\\xb9\\\\xe8P\\\\x8e\\\\xb9\\\\xfe\\\\xbeX\\\\xb9\\\\xb6\\\\xfd6\\\\xb9Fy8\\\\xb9#\\\\xa2"\\\\xb9\\\\xa5\\\\x93:\\\\xb9#\\\\xd8:\\\\xb9\\\\x10\\\\xb6\\\\x0b\\\\xb9\\\\xdc\\\\x9b\\\\x10\\\\xb9\\\\x04\\\\x81\\\\xe8\\\\xb8\\\\xb6A\\\\xc9\\\\xb8\\\\xe8#\\\\x80\\\\xb8\\\\x10\\\\xdb\\\\x0b\\\\xb8\\\\x19bN\\\\xb8zn+\\\\xb8\\\\x86`\\\\x8b\\\\xb8_\\\\x8d\\\\x9e\\\\xb8y\\\\xf7\\\\x00\\\\xb8C\\\\\\\\>\\\\xb7V\\\\x9d@7\\\\x87\\\\x04X8j\\\\xf4N8\\\\x1f\\\\xdd]8\\\\xd6y\\\\xa78%=\\\\x898Zo}8@<\\\\x908\\\\xeb]\\\\x8d8V\\\\xea\\\\xa18\\\\xc3\\\\x8d%8\\\\xc6\\\\xe1\\\\x0b8\\\\xd7\\\\x8eN8\\\\x87\\\\xa9,\\\\xb6rdf\\\\xb7=t&\\\\xb8\\\\x82s\\\\xe8\\\\xb8\\\\xb4\\\\xba\\\\x1c\\\\xb9\\\\xca\\\\xcb)\\\\xb9h0\\\\x0b\\\\xb9;\\\\xf8\\\\xea\\\\xb8\\\\xc5\\\\x1e\\\\x96\\\\xb8\\\\x8f\\\\x10\\\\x92\\\\xb6\\\\xa9\\\\xe5\\\\x927!%\\\\xaa8X\\\\x8a\\\\xf88\\\\x89\\\\xc1\\\\x1f9\\\\xec\\\\x03O9\\\\x90\\\\xe3S9\\\\x10\\\\x98\\\\x8d9L&\\\\x8a9\\\\xe8\\\\x9c\\\\x899b\\\\x0e\\\\x8d9g\\\\x9d\\\\x869\\\\xea\\\\xca\\\\x909\\\\xa2~\\\\x8a9\\\\xc3\\\\xd7\\\\x969B\\\\x9f\\\\xa09\\\\x88\\\\xc3\\\\xbf9s&\\\\xdb92G\\\\xea9\\\\xa1\\\\xb8\\\\x01:ne\\\\xf09\\\\x97\\\\x95\\\\xf79\\\\xcc]\\\\x01:\\\\xb2\\\\x7f\\\\xf69\\\\x97\\\\x92\\\\n:\\\\x90\\\\xb7\\\\x07:u`\\\\x07:\\\\xfa\\\\x1c\\\\x10:\\\\x141\\\\x14:\\\\xb2g\\\\x1e:\\\\xd1J :\\\\x98;,:\\\\x82Q9:\\\\x973<:\\\\xe3%<:\\\\x9d\\\\xd63:So7:\\\\x05\\\\x046:\\\\x9d\\\\xa1(:\\\\x96U(:\\\\xfb\\\\xfd\\\\x1e:\\\\xf5\\\\xe6\\\\x1a:\\\\xdaM\\\\x1d:~\\\\xf4\\\\x1d:@\\\\x92&:\\\\xc7\\\\xb2\\\\\\\':\\\\x05S\\\\\\\':D|&:G\\\\xc3":\\\\xca\\\\x1d#:3\\\\\\\'\\\\x1e:\\\\x12\\\\xa5\\\\x0b:u\\\\x8f\\\\xed9\\\\xec\\\\xb4\\\\xd89\\\\xee)\\\\xb89\\\\xfa\\\\x9e\\\\x9a9\\\\xeb=\\\\x8d9\\\\x0f\\\\xa0j9\\\\xc4"T9f\\\\x8e\\\\x079\\\\xae\\\\xf1\\\\x9c8\\\\x03\\\\xe6\\\\xaa8xh:8Pr\\\\xb7\\\\xb6O\\\\xfd\\\\xda\\\\xb7\\\\xd2\\\\xcb\\\\x17\\\\xb8x\\\\xe7H\\\\xb8\\\\xfc\\\\x0cc\\\\xb8e?g\\\\xb8Q\\\\x9dl\\\\xb7\\\\xa4\\\\x8e \\\\xb8\\\\x10\\\\xa0\\\\xd0\\\\xb8\\\\xef1\\\\xd5\\\\xb8\\\\xd8\\\\x88\\\\x1e\\\\xb9a7m\\\\xb9PR\\\\x8e\\\\xb9~\\\\x15\\\\xa4\\\\xb9\\\\xe5\\\\xf1\\\\xc8\\\\xb9f\\\\xc7\\\\xe6\\\\xb9\\\\x8e\\\\xdc\\\\xfa\\\\xb9\\\\x8f\\\\x93\\\\x0c\\\\xba\\\\x86\\\\x9e\\\\x16\\\\xba\\\\xb9\\\\xf8$\\\\xba`[+\\\\xba\\\\xdfe,\\\\xba#\\\\xb87\\\\xba\\\\xb7\\\\xba:\\\\xba\\\\x1fH=\\\\xba\\\\xdf\\\\xdb<\\\\xbah\\\\xad4\\\\xba\\\\xd3e,\\\\xba\\\\xc8\\\\x12$\\\\xba#t\\\\x1e\\\\xba\\\\xe5\\\\xa2\\\\x15\\\\xba\\\\xc3r\\\\x1d\\\\xba\\\\x94\\\\xcc%\\\\xba8))\\\\xbae\\\\x92?\\\\xba\\\\x1d\\\\x05F\\\\xba\\\\x8c\\\\x81K\\\\xba\\\\xdb\\\\x83Y\\\\xba9\\\\x1b`\\\\xba=zh\\\\xba\\\\x92\\\\xf2i\\\\xba\\\\x03Sj\\\\xba\\\\x86\\\\xf9m\\\\xba\\\\xcbkq\\\\xba\\\\x83Dl\\\\xba\\\\xd0\\\\x0bb\\\\xba\\\\x9d\\\\x93e\\\\xba:\\\\x8dd\\\\xbau\\\\x9ak\\\\xbaQ@v\\\\xba\\\\xfd\\\\xedp\\\\xba\\\\x92.|\\\\xba/\\\\x1d\\\\x7f\\\\xba\\\\xfe\\\\xd2v\\\\xba\\\\xfe-~\\\\xba.\\\\x97y\\\\xba\\\\x8f\\\\xedu\\\\xba\\\\x8e@}\\\\xba\\\\xa8\\\\x10{\\\\xbaS\\\\xbd~\\\\xba\\\\x03\\\\x82~\\\\xba\\\\x1d\\\\x13x\\\\xba\\\\xd2tu\\\\xbaV9t\\\\xba\\\\x91\\\\x9ec\\\\xba\\\\xdcTU\\\\xba\\\\t&N\\\\xba!I9\\\\xba\\\\x14q\\\\\\\'\\\\xba\\\\xbcc\\\\x10\\\\xba*\\\\x0e\\\\xed\\\\xb9\\\\xb1$\\\\xe6\\\\xb9d\\\\xf2\\\\xd0\\\\xb9\\\\xbc\\\\x06\\\\xaf\\\\xb9L.\\\\xa4\\\\xb9v\\\\r{\\\\xb9\\\\xb6\\\\x8c\\\\x1d\\\\xb9.C\\\\xc1\\\\xb8\\\\xf4M\\\\xdc\\\\xb7P\\\\xe5\\\\xc0\\\\xb6\\\\x81\\\\xec\\\\xe17(\\\\xfe\\\\xa68\\\\xe2\\\\xeb\\\\xa08\\\\\\\'\\\\xb3\\\\xfa84%99w\\\\x80Y9\\\\xd6Gv9\\\\xea\\\\xc7\\\\x949\\\\xe5}\\\\xac9w\\\\\\\\\\\\xba9\\\\x00\\\\x9a\\\\xe09\\\\xa9<\\\\xf79B@\\\\xf59#@\\\\x02:AY\\\\n:a\\\\xbb\\\\x0e:m\\\\x9c\\\\x08:\\\\xe3_\\\\xfe9O\\\\x89\\\\xeb9\\\\xdb|\\\\xcd9\\\\xf3\\\\xc6\\\\xbe9\\\\x9el\\\\xb89\\\\x87\\\\x1f\\\\xbb9\\\\xc0\\\\xf6\\\\xa49Xr\\\\x8e9\\\\xa3\\\\xac\\\\x839\\\\x9f:Q9h\\\\x88N9\\\\xe3,,98d\\\\xed8\\\\xd6\\\\xc5\\\\xfc8\\\\xfdp\\\\xa28\\\\x06:\\\\x1e8\\\\x8a\\\\xc0&8\\\\x11~\\\\x92\\\\xb7Z<\\\\x06\\\\xb8\\\\xa5K\\\\x1b\\\\xb8\\\\xc2\\\\x97\\\\xa0\\\\xb8s\\\\x1a\\\\xa1\\\\xb8\\\\x8c\\\\xf9P\\\\xb8\\\\x8c0\\\\x1a\\\\xb7\\\\xac:\\\\x0c\\\\xb7\\\\xbclL8Q\\\\xc5\\\\xb08iQ\\\\xc88\\\\xef-29"\\\\x96\\\\x1e9\\\\x16Y=95\\\\xd8\\\\x839\\\\xdc\\\\x9b\\\\x919d\\\\xcf\\\\xbc9)\\\\xfc\\\\xd397\\\\xa6\\\\xec9\\\\x00\\\\xc3\\\\xf99\\\\x81i\\\\xf49g\\\\xc7\\\\x01:\\\\x87&\\\\x08:\\\\xc6\\\\xd4\\\\x12:\\\\xdc\\\\x18\\\\x19:\\\\x06\\\\x08\\\\x1a:\\\\xca\\\\xe7 :,\\\\x91+:J!9:\\\\x19I6:\\\\x01\\\\x00RS(\\\\x00\\\\x00\\\\x00\\\\x00(\\\\x02\\\\x00\\\\x00\\\\x00t\\\\x08\\\\x00\\\\x00\\\\x00__name__t\\\\n\\\\x00\\\\x00\\\\x00__module__(\\\\x00\\\\x00\\\\x00\\\\x00(\\\\x00\\\\x00\\\\x00\\\\x00(\\\\x00\\\\x00\\\\x00\\\\x00s,\\\\x00\\\\x00\\\\x00lib/python2.7/site-packages/numpy/ma/core.pyR\\\\xc1\\\\x00\\\\x00\\\\x00Z\\\\x00\\\\x00\\\\x00s\\\\x02\\\\x00\\\\x00\\\\x00\\\\x06\\\\x01c\\\\x02\\\\x00\\\\x00\\\\x00\\\\x03\\\\x00\\\\x00\\\\x00\\\\x03\\\\x00\\\\x00\\\\x00C`\\\\x01\\\\x00s4\\\\x00\\\\x00\\\\x00|\\\\x00\\\\x00d\\\\x01\\\\x00k\\\\x08\\\\x00r\\\\x10\\\\x00d\\\\x01\\\\x00S|\\\\x01\\\\x00d\\\\x01\\\\x00k\\\\x08\\\\x00r \\\\x00|\\\\x00\\\\x00Sd\\\\x02\\\\x00}\\\\x02\\\\x00|\\\\x02\\\\x00|\\\\x00\\\\x00|\\\\x01\\\\x00f\\\\x02\\\\x00\\\\x16S(\\\\x03\\\\x00\\\\x00\\\\x00s9\\\\x00\\\\x00\\\\x00\\\\n    Adds a Notes section to an existing docstring.\\\\n\\\\n    Ns(\\\\x00\\\\x00\\\\x00\\\\n    %s\\\\n\\\\n    Notes\\\\n    -----\\\\n    %s\\\\n    (\\\\x01\\\\x00\\\\x00\\\\x00t\\\\x04\\\\x00\\\\x00\\\\x00None(\\\\x03\\\\x00\\\\x00\\\\x00t\\\\n\\\\x00\\\\x00\\\\x00initialdoct\\\\x04\\\\x00\\\\x00\\\\x00notet\\\\x06\\\\x00\\\\x00\\\\x00newdoc(\\\\x00\\\\x00\\\\x00\\\\x00(\\\\x00\\\\x00\\\\x00\\\\x00s,\\\\x00\\\\x00\\\\x00lib/python2.7/site-packages/numpy/ma/core.pyt\\\\x08\\\\x00\\\\x00\\\\x00doc_note^\\\\x00\\\\x00\\\\x00s\\\\x0c\\\\x00\\\\x00\\\\x00\\\\x00\\\\x05\\\\x0c\\\\x01\\\\x04\\\\x01\\\\x0c\\\\x01\\\\x04\\\\x07\\\\x06\\\\x01c\\\\x01\\\\x00\\\\x00\\\\x00\\\\x02\\\\x00\\\\x00\\\\x00\\\\x05\\\\x00\\\\x00\\\\x00C`\\\\x01\\\\x00s4\\\\x00\\\\x00\\\\x00y\\\\x16\\\\x00t\\\\x00\\\\x00t\\\\x01\\\\x00|\\\\x00\\\\x00\\\\x83\\\\x01\\\\x00\\\\x8c\\\\x00\\\\x00}\\\\x01\\\\x00Wn\\\\x17\\\\x00\\\\x04t\\\\x02\\\\x00k\\\\n\\\\x00r/\\\\x00\\\\x01\\\\x01\\\\x01d\\\\x01\\\\x00}\\\\x01\\\\x00n\\\\x01\\\\x00X|\\\\x01\\\\x00S(\\\\x02\\\\x00\\\\x00\\\\x00s%\\\\x00\\\\x00\\\\x00\\\\n    Get the signature from obj\\\\n\\\\n    t\\\\x00\\\\x00\\\\x00\\\\x00(\\\\x03\\\\x00\\\\x00\\\\x00R\\\\r\\\\x00\\\\x00\\\\x00R\\\\x0c\\\\x00\\\\x00\\\\x00t\\\\t\\\\x00\\\\x00\\\\x00TypeError(\\\\x02\\\\x00\\\\x00\\\\x00t\\\\x03\\\\x00\\\\x00\\\\x00objt\\\\x03\\\\x00\\\\x00\\\\x00sig(\\\\x00\\\\x00\\\\x00\\\\x00(\\\\x00\\\\x00\\\\x00\\\\x00s,\\\\x00\\\\x00\\\\x00lib/python2.7/site-packages/numpy/ma/core.pyt\\\\x14\\\\x00\\\\x00\\\\x00get_object_signatureq\\\\x00\\\\x00\\\\x00s\\\\n\\\\x00\\\\x00\\\\x00\\\\x00\\\\x05\\\\x03\\\\x01\\\\x16\\\\x01\\\\r\\\\x01\\\\n\\\\x01c\\\\x00\\\\x00\\\\x00\\\\x00\\\\x00\\\\x00\\\\x00\\\\x00\\\\x01\\\\x00\\\\x00\\\\x00B`\\\\x01\\\\x00s\\\\x0e\\\\x00\\\\x00\\\\x00e\\\\x00\\\\x00Z\\\\x01\\\\x00d\\\\x00\\\\x00Z\\\\x02\\\\x00RS(\\\\x01\\\\x00\\\\x00\\\\x00s1\\\\x00\\\\x00\\\\x00\\\\n    Class for masked array related errors.\\\\n\\\\n    (\\\\x03\\\\x00\\\\x00\\\\x00R\\\\xc2\\\\x00\\\\x00\\\\x00R\\\\xc3\\\\x00\\\\x00\\\\x00t\\\\x07\\\\x00\\\\x00\\\\x00__doc__(\\\\x00\\\\x00\\\\x00\\\\x00(\\\\x00\\\\x00\\\\x00\\\\x00(\\\\x00\\\\x00\\\\x00\\\\x00s,\\\\x00\\\\x00\\\\x00lib/python2.7/site-packages/numpy/ma/core.pyR\\\\x14\\\\x00\\\\x00\\\\x00\\\\x82\\\\x00\\\\x00\\\\x00s\\\\x04\\\\x00\\\\x00\\\\x00\\\\x06\\\\x04\\\\x06\\\\x01c\\\\x00\\\\x00\\\\x00\\\\x00\\\\x00\\\\x00\\\\x00\\\\x00\\\\x01\\\\x00\\\\x00\\\\x00B`\\\\x01\\\\x00s\\\\x0e\\\\x00\\\\x00\\\\x00e\\\\x00\\\\x00Z\\\\x01\\\\x00d\\\\x00\\\\x00Z\\\\x02\\\\x00RS(\\\\x01\\\\x00\\\\x00\\\\x00s)\\\\x00\\\\x00\\\\x00\\\\n    Class for mask related errors.\\\\n\\\\n    (\\\\x03\\\\x00\\\\x00\\\\x00R\\\\xc2\\\\x00\\\\x00\\\\x00R\\\\xc3\\\\x00\\\\x00\\\\x00R\\\\xce\\\\x00\\\\x00\\\\x00(\\\\x00\\\\x00\\\\x00\\\\x00(\\\\x00\\\\x00\\\\x00\\\\x00(\\\\x00\\\\x00\\\\x00\\\\x00s,\\\\x00\\\\x00\\\\x00lib/python2.7/site-packages/numpy/ma/core.pyR\\\\x15\\\\x00\\\\x00\\\\x00\\\\x8a\\\\x00\\\\x00\\\\x00s\\\\x04\\\\x00\\\\x00\\\\x00\\\\x06\\\\x04\\\\x06\\\\x01t\\\\x01\\\\x00\\\\x00\\\\x00bg@\\\\x8c\\\\xb5x\\\\x1d\\\\xaf\\\\x15Dy\\\\x00\\\\x00\\\\x00\\\\x00\\\\x00\\\\x00\\\\x00\\\\x00\\\\x00\\\\x00\\\\x00\\\\x00\\\\x00\\\\x00\\\\x00\\\\x00t\\\\x01\\\\x00\\\\x00\\\\x00ct\\\\x01\\\\x00\\\\x00\\\\x00fi?B\\\\x0f\\\\x00t\\\\x01\\\\x00\\\\x00\\\\x00it\\\\x01\\\\x00\\\\x00\\\\x00?t\\\\x01\\\\x00\\\\x00\\\\x00Os\\\\x03\\\\x00\\\\x00\\\\x00N/At\\\\x01\\\\x00\\\\x00\\\\x00St\\\\x01\\\\x00\\\\x00\\\\x00us\\\\x03\\\\x00\\\\x00\\\\x00???t\\\\x01\\\\x00\\\\x00\\\\x00Vt\\\\x01\\\\x00\\\\x00\\\\x00Ut\\\\x01\\\\x00\\\\x00\\\\x00Yt\\\\x01\\\\x00\\\\x00\\\\x00Mt\\\\x01\\\\x00\\\\x00\\\\x00Wt\\\\x01\\\\x00\\\\x00\\\\x00Dt\\\\x01\\\\x00\\\\x00\\\\x00ht\\\\x01\\\\x00\\\\x00\\\\x00mt\\\\x01\\\\x00\\\\x00\\\\x00st\\\\x02\\\\x00\\\\x00\\\\x00mst\\\\x02\\\\x00\\\\x00\\\\x00ust\\\\x02\\\\x00\\\\x00\\\\x00nst\\\\x02\\\\x00\\\\x00\\\\x00pst\\\\x02\\\\x00\\\\x00\\\\x00fst\\\\x02\\\\x00\\\\x00\\\\x00ast\\\\x03\\\\x00\\\\x00\\\\x00NaTs\\\\x03\\\\x00\\\\x00\\\\x00M8[t\\\\x01\\\\x00\\\\x00\\\\x00]s\\\\x03\\\\x00\\\\x00\\\\x00m8[t\\\\x08\\\\x00\\\\x00\\\\x00float128c\\\\x01\\\\x00\\\\x00\\\\x00\\\\x02\\\\x00\\\\x00\\\\x00\\\\x03\\\\x00\\\\x00\\\\x00C`\\\\x01\\\\x00sJ\\\\x01\\\\x00\\\\x00t\\\\x00\\\\x00|\\\\x00\\\\x00d\\\\x01\\\\x00\\\\x83\\\\x02\\\\x00r$\\\\x00t\\\\x01\\\\x00d\\\\x0c\\\\x00|\\\\x00\\\\x00j\\\\x03\\\\x00\\\\x83\\\\x02\\\\x00}\\\\x01\\\\x00n"\\\\x01t\\\\x04\\\\x00|\\\\x00\\\\x00t\\\\x05\\\\x00j\\\\x03\\\\x00\\\\x83\\\\x02\\\\x00r\\\\xa1\\\\x00|\\\\x00\\\\x00j\\\\x06\\\\x00r^\\\\x00t\\\\x07\\\\x00j\\\\x08\\\\x00|\\\\x00\\\\x00j\\\\x06\\\\x00d\\\\x02\\\\x00\\\\x19j\\\\t\\\\x00d\\\\x03\\\\x00\\\\x83\\\\x02\\\\x00}\\\\x01\\\\x00qF\\\\x01|\\\\x00\\\\x00j\\\\t\\\\x00d\\\\x04\\\\x00k\\\\x06\\\\x00r\\\\x89\\\\x00t\\\\x07\\\\x00j\\\\x08\\\\x00|\\\\x00\\\\x00j\\\\n\\\\x00d\\\\x05\\\\x00\\\\x1fd\\\\x03\\\\x00\\\\x83\\\\x02\\\\x00}\\\\x01\\\\x00qF\\\\x01t\\\\x07\\\\x00j\\\\x08\\\\x00|\\\\x00\\\\x00j\\\\t\\\\x00d\\\\x03\\\\x00\\\\x83\\\\x02\\\\x00}\\\\x01\\\\x00n\\\\xa5\\\\x00t\\\\x04\\\\x00|\\\\x00\\\\x00t\\\\x0b\\\\x00\\\\x83\\\\x02\\\\x00r\\\\xbd\\\\x00t\\\\x07\\\\x00d\\\\x06\\\\x00\\\\x19}\\\\x01\\\\x00n\\\\x89\\\\x00t\\\\x04\\\\x00|\\\\x00\\\\x00t\\\\x0c\\\\x00\\\\x83\\\\x02\\\\x00s\\\\xdb\\\\x00t\\\\x04\\\\x00|\\\\x00\\\\x00t\\\\r\\\\x00\\\\x83\\\\x02\\\\x00r\\\\xe8\\\\x00t\\\\x07\\\\x00d\\\\x07\\\\x00\\\\x19}\\\\x01\\\\x00n^\\\\x00t\\\\x04\\\\x00|\\\\x00\\\\x00t\\\\x0e\\\\x00\\\\x83\\\\x02\\\\x00r\\\\x04\\\\x01t\\\\x07\\\\x00d\\\\x08\\\\x00\\\\x19}\\\\x01\\\\x00nB\\\\x00t\\\\x04\\\\x00|\\\\x00\\\\x00t\\\\x0f\\\\x00\\\\x83\\\\x02\\\\x00r \\\\x01t\\\\x07\\\\x00d\\\\t\\\\x00\\\\x19}\\\\x01\\\\x00n&\\\\x00t\\\\x04\\\\x00|\\\\x00\\\\x00t\\\\x10\\\\x00\\\\x83\\\\x02\\\\x00r<\\\\x01t\\\\x07\\\\x00d\\\\n\\\\x00\\\\x19}\\\\x01\\\\x00n\\\\n\\\\x00t\\\\x07\\\\x00d\\\\x0b\\\\x00\\\\x19}\\\\x01\\\\x00|\\\\x01\\\\x00S(\\\\r\\\\x00\\\\x00\\\\x00sg\\\\x03\\\\x00\\\\x00\\\\n    Return the default fill value for the argument object.\\\\n\\\\n    The default filling value depends on the datatype of the input\\\\n    array or the type of the input scalar:\\\\n\\\\n       ========  ========\\\\n       datatype  default\\\\n       ========  ========\\\\n       bool      True\\\\n       int       999999\\\\n       float     1.e20\\\\n       complex   1.e20+0j\\\\n       object    \\\\\\\'?\\\\\\\'\\\\n       string    \\\\\\\'N/A\\\\\\\'\\\\n       ========  ========\\\\n\\\\n\\\\n    Parameters\\\\n    ----------\\\\n    obj : ndarray, dtype or scalar\\\\n        The array data-type or scalar for which the default fill value\\\\n        is returned.\\\\n\\\\n    Returns\\\\n    -------\\\\n    fill_value : scalar\\\\n        The default fill value.\\\\n\\\\n    Examples\\\\n    --------\\\\n    >>> np.ma.default_fill_value(1)\\\\n    999999\\\\n    >>> np.ma.default_fill_value(np.array([1.1, 2., np.pi]))\\\\n    1e+20\\\\n    >>> np.ma.default_fill_value(np.dtype(complex))\\\\n    (1e+20+0j)\\\\n\\\\n    t\\\\x05\\\\x00\\\\x00\\\\x00dtypei\\\\x00\\\\x00\\\\x00\\\\x00R\\\\xd3\\\\x00\\\\x00\\\\x00t\\\\x02\\\\x00\\\\x00\\\\x00Mmi\\\\x01\\\\x00\\\\x00\\\\x00R\\\\xd1\\\\x00\\\\x00\\\\x00R\\\\xd2\\\\x00\\\\x00\\\\x00R\\\\xd5\\\\x00\\\\x00\\\\x00R\\\\xd8\\\\x00\\\\x00\\\\x00R\\\\xd0\\\\x00\\\\x00\\\\x00R\\\\xd4\\\\x00\\\\x00\\\\x00N(\\\\x11\\\\x00\\\\x00\\\\x00t\\\\x07\\\\x00\\\\x00\\\\x00hasattrt\\\\x11\\\\x00\\\\x00\\\\x00_check_fill_valueR\\\\xc4\\\\x00\\\\x00\\\\x00R\\\\xe9\\\\x00\\\\x00\\\\x00t\\\\n\\\\x00\\\\x00\\\\x00isinstancet\\\\x02\\\\x00\\\\x00\\\\x00npt\\\\x08\\\\x00\\\\x00\\\\x00subdtypet\\\\x0e\\\\x00\\\\x00\\\\x00default_fillert\\\\x03\\\\x00\\\\x00\\\\x00gett\\\\x04\\\\x00\\\\x00\\\\x00kindt\\\\x03\\\\x00\\\\x00\\\\x00strt\\\\x05\\\\x00\\\\x00\\\\x00floatt\\\\x03\\\\x00\\\\x00\\\\x00intR\\\\x0e\\\\x00\\\\x00\\\\x00R\\\\x11\\\\x00\\\\x00\\\\x00R\\\\x10\\\\x00\\\\x00\\\\x00t\\\\x07\\\\x00\\\\x00\\\\x00complex(\\\\x02\\\\x00\\\\x00\\\\x00R\\\\xcb\\\\x00\\\\x00\\\\x00t\\\\x06\\\\x00\\\\x00\\\\x00defval(\\\\x00\\\\x00\\\\x00\\\\x00(\\\\x00\\\\x00\\\\x00\\\\x00s,\\\\x00\\\\x00\\\\x00lib/python2.7/site-packages/numpy/ma/core.pyRB\\\\x00\\\\x00\\\\x00\\\\xb2\\\\x00\\\\x00\\\\x00s(\\\\x00\\\\x00\\\\x00\\\\x00(\\\\x0f\\\\x01\\\\x15\\\\x01\\\\x12\\\\x01\\\\t\\\\x01\\\\x1f\\\\x01\\\\x0f\\\\x01\\\\x1c\\\\x02\\\\x18\\\\x01\\\\x0f\\\\x01\\\\r\\\\x01\\\\x1e\\\\x01\\\\r\\\\x01\\\\x0f\\\\x01\\\\r\\\\x01\\\\x0f\\\\x01\\\\r\\\\x01\\\\x0f\\\\x01\\\\r\\\\x02\\\\n\\\\x01c\\\\x02\\\\x00\\\\x00\\\\x00\\\\x06\\\\x00\\\\x00\\\\x00\\\\x04\\\\x00\\\\x00\\\\x00C`\\\\x01\\\\x00sX\\\\x00\\\\x00\\\\x00|\\\\x00\\\\x00j\\\\x00\\\\x00}\\\\x02\\\\x00|\\\\x02\\\\x00rP\\\\x00g\\\\x00\\\\x00}\\\\x03\\\\x00x.\\\\x00|\\\\x02\\\\x00D]&\\\\x00}\\\\x04\\\\x00t\\\\x01\\\\x00|\\\\x00\\\\x00|\\\\x04\\\\x00\\\\x19|\\\\x01\\\\x00\\\\x83\\\\x02\\\\x00}\\\\x05\\\\x00|\\\\x03\\\\x00j\\\\x02\\\\x00|\\\\x05\\\\x00\\\\x83\\\\x01\\\\x00\\\\x01q\\\\x1c\\\\x00Wt\\\\x03\\\\x00|\\\\x03\\\\x00\\\\x83\\\\x01\\\\x00S|\\\\x01\\\\x00|\\\\x00\\\\x00\\\\x19S(\\\\x01\\\\x00\\\\x00\\\\x00N(\\\\x04\\\\x00\\\\x00\\\\x00t\\\\x05\\\\x00\\\\x00\\\\x00namest\\\\x1e\\\\x00\\\\x00\\\\x00_recursive_extremum_fill_valueR"\\\\x00\\\\x00\\\\x00t\\\\x05\\\\x00\\\\x00\\\\x00tuple(\\\\x06\\\\x00\\\\x00\\\\x00t\\\\x06\\\\x00\\\\x00\\\\x00ndtypet\\\\x08\\\\x00\\\\x00\\\\x00extremumR\\\\xf8\\\\x00\\\\x00\\\\x00t\\\\x07\\\\x00\\\\x00\\\\x00deflistt\\\\x04\\\\x00\\\\x00\\\\x00namet\\\\x04\\\\x00\\\\x00\\\\x00fval(\\\\x00\\\\x00\\\\x00\\\\x00(\\\\x00\\\\x00\\\\x00\\\\x00s,\\\\x00\\\\x00\\\\x00lib/python2.7/site-packages/numpy/ma/core.pyR\\\\xf9\\\\x00\\\\x00\\\\x00\\\\xf2\\\\x00\\\\x00\\\\x00s\\\\x10\\\\x00\\\\x00\\\\x00\\\\x00\\\\x01\\\\t\\\\x01\\\\x06\\\\x01\\\\x06\\\\x01\\\\r\\\\x01\\\\x13\\\\x01\\\\x11\\\\x01\\\\n\\\\x01c\\\\x01\\\\x00\\\\x00\\\\x00\\\\x02\\\\x00\\\\x00\\\\x00\\\\x03\\\\x00\\\\x00\\\\x00C`\\\\x01\\\\x00s\\\\xa9\\\\x00\\\\x00\\\\x00d\\\\x01\\\\x00}\\\\x01\\\\x00t\\\\x00\\\\x00|\\\\x00\\\\x00d\\\\x02\\\\x00\\\\x83\\\\x02\\\\x00r%\\\\x00t\\\\x01\\\\x00|\\\\x00\\\\x00j\\\\x02\\\\x00t\\\\x03\\\\x00\\\\x83\\\\x02\\\\x00St\\\\x04\\\\x00|\\\\x00\\\\x00t\\\\x05\\\\x00\\\\x83\\\\x02\\\\x00rC\\\\x00t\\\\x03\\\\x00t\\\\x06\\\\x00j\\\\x07\\\\x00d\\\\x03\\\\x00\\\\x19\\\\x19St\\\\x04\\\\x00|\\\\x00\\\\x00t\\\\x08\\\\x00\\\\x83\\\\x02\\\\x00ra\\\\x00t\\\\x03\\\\x00t\\\\x06\\\\x00j\\\\x07\\\\x00d\\\\x04\\\\x00\\\\x19\\\\x19St\\\\x04\\\\x00|\\\\x00\\\\x00t\\\\t\\\\x00\\\\x83\\\\x02\\\\x00r\\\\x7f\\\\x00t\\\\x03\\\\x00t\\\\x06\\\\x00j\\\\x07\\\\x00d\\\\x05\\\\x00\\\\x19\\\\x19St\\\\x04\\\\x00|\\\\x00\\\\x00t\\\\n\\\\x00j\\\\x02\\\\x00\\\\x83\\\\x02\\\\x00r\\\\x99\\\\x00t\\\\x03\\\\x00|\\\\x00\\\\x00\\\\x19St\\\\x0b\\\\x00|\\\\x01\\\\x00\\\\x83\\\\x01\\\\x00\\\\x82\\\\x01\\\\x00d\\\\x06\\\\x00S(\\\\x07\\\\x00\\\\x00\\\\x00sX\\\\x04\\\\x00\\\\x00\\\\n    Return the maximum value that can be represented by the dtype of an object.\\\\n\\\\n    This function is useful for calculating a fill value suitable for\\\\n    taking the minimum of an array with a given dtype.\\\\n\\\\n    Parameters\\\\n    ----------\\\\n    obj : ndarray or dtype\\\\n        An object that can be queried for it\\\\\\\'s numeric type.\\\\n\\\\n    Returns\\\\n    -------\\\\n    val : scalar\\\\n        The maximum representable value.\\\\n\\\\n    Raises\\\\n    ------\\\\n    TypeError\\\\n        If `obj` isn\\\\\\\'t a suitable numeric type.\\\\n\\\\n    See Also\\\\n    --------\\\\n    maximum_fill_value : The inverse function.\\\\n    set_fill_value : Set the filling value of a masked array.\\\\n    MaskedArray.fill_value : Return current fill value.\\\\n\\\\n    Examples\\\\n    --------\\\\n    >>> import numpy.ma as ma\\\\n    >>> a = np.int8()\\\\n    >>> ma.minimum_fill_value(a)\\\\n    127\\\\n    >>> a = np.int32()\\\\n    >>> ma.minimum_fill_value(a)\\\\n    2147483647\\\\n\\\\n    An array of numeric data can also be passed.\\\\n\\\\n    >>> a = np.array([1, 2, 3], dtype=np.int8)\\\\n    >>> ma.minimum_fill_value(a)\\\\n    127\\\\n    >>> a = np.array([1, 2, 3], dtype=np.float32)\\\\n    >>> ma.minimum_fill_value(a)\\\\n    inf\\\\n\\\\n    s(\\\\x00\\\\x00\\\\x00Unsuitable type for calculating minimum.R\\\\xe9\\\\x00\\\\x00\\\\x00t\\\\x06\\\\x00\\\\x00\\\\x00float_t\\\\x04\\\\x00\\\\x00\\\\x00int_t\\\\x04\\\\x00\\\\x00\\\\x00uintN(\\\\x0c\\\\x00\\\\x00\\\\x00R\\\\xeb\\\\x00\\\\x00\\\\x00R\\\\xf9\\\\x00\\\\x00\\\\x00R\\\\xe9\\\\x00\\\\x00\\\\x00t\\\\n\\\\x00\\\\x00\\\\x00min_fillerR\\\\xed\\\\x00\\\\x00\\\\x00R\\\\xf4\\\\x00\\\\x00\\\\x00t\\\\x06\\\\x00\\\\x00\\\\x00ntypest\\\\x08\\\\x00\\\\x00\\\\x00typeDictR\\\\xf5\\\\x00\\\\x00\\\\x00R\\\\x0e\\\\x00\\\\x00\\\\x00R\\\\xee\\\\x00\\\\x00\\\\x00R\\\\xca\\\\x00\\\\x00\\\\x00(\\\\x02\\\\x00\\\\x00\\\\x00R\\\\xcb\\\\x00\\\\x00\\\\x00t\\\\x06\\\\x00\\\\x00\\\\x00errmsg(\\\\x00\\\\x00\\\\x00\\\\x00(\\\\x00\\\\x00\\\\x00\\\\x00s,\\\\x00\\\\x00\\\\x00lib/python2.7/site-packages/numpy/ma/core.pyR\\\\x8f\\\\x00\\\\x00\\\\x00\\\\xfd\\\\x00\\\\x00\\\\x00s\\\\x18\\\\x00\\\\x00\\\\x00\\\\x000\\\\x06\\\\x01\\\\x0f\\\\x01\\\\x10\\\\x01\\\\x0f\\\\x01\\\\x0f\\\\x01\\\\x0f\\\\x01\\\\x0f\\\\x01\\\\x0f\\\\x01\\\\x0f\\\\x01\\\\x12\\\\x01\\\\x08\\\\x02c\\\\x01\\\\x00\\\\x00\\\\x00\\\\x02\\\\x00\\\\x00\\\\x00\\\\x03\\\\x00\\\\x00\\\\x00C`\\\\x01\\\\x00s\\\\xa9\\\\x00\\\\x00\\\\x00d\\\\x01\\\\x00}\\\\x01\\\\x00t\\\\x00\\\\x00|\\\\x00\\\\x00d\\\\x02\\\\x00\\\\x83\\\\x02\\\\x00r%\\\\x00t\\\\x01\\\\x00|\\\\x00\\\\x00j\\\\x02\\\\x00t\\\\x03\\\\x00\\\\x83\\\\x02\\\\x00St\\\\x04\\\\x00|\\\\x00\\\\x00t\\\\x05\\\\x00\\\\x83\\\\x02\\\\x00rC\\\\x00t\\\\x03\\\\x00t\\\\x06\\\\x00j\\\\x07\\\\x00d\\\\x03\\\\x00\\\\x19\\\\x19St\\\\x04\\\\x00|\\\\x00\\\\x00t\\\\x08\\\\x00\\\\x83\\\\x02\\\\x00ra\\\\x00t\\\\x03\\\\x00t\\\\x06\\\\x00j\\\\x07\\\\x00d\\\\x04\\\\x00\\\\x19\\\\x19St\\\\x04\\\\x00|\\\\x00\\\\x00t\\\\t\\\\x00\\\\x83\\\\x02\\\\x00r\\\\x7f\\\\x00t\\\\x03\\\\x00t\\\\x06\\\\x00j\\\\x07\\\\x00d\\\\x05\\\\x00\\\\x19\\\\x19St\\\\x04\\\\x00|\\\\x00\\\\x00t\\\\n\\\\x00j\\\\x02\\\\x00\\\\x83\\\\x02\\\\x00r\\\\x99\\\\x00t\\\\x03\\\\x00|\\\\x00\\\\x00\\\\x19St\\\\x0b\\\\x00|\\\\x01\\\\x00\\\\x83\\\\x01\\\\x00\\\\x82\\\\x01\\\\x00d\\\\x06\\\\x00S(\\\\x07\\\\x00\\\\x00\\\\x00s\\\\\\\\\\\\x04\\\\x00\\\\x00\\\\n    Return the minimum value that can be represented by the dtype of an object.\\\\n\\\\n    This function is useful for calculating a fill value suitable for\\\\n    taking the maximum of an array with a given dtype.\\\\n\\\\n    Parameters\\\\n    ----------\\\\n    obj : {ndarray, dtype}\\\\n        An object that can be queried for it\\\\\\\'s numeric type.\\\\n\\\\n    Returns\\\\n    -------\\\\n    val : scalar\\\\n        The minimum representable value.\\\\n\\\\n    Raises\\\\n    ------\\\\n    TypeError\\\\n        If `obj` isn\\\\\\\'t a suitable numeric type.\\\\n\\\\n    See Also\\\\n    --------\\\\n    minimum_fill_value : The inverse function.\\\\n    set_fill_value : Set the filling value of a masked array.\\\\n    MaskedArray.fill_value : Return current fill value.\\\\n\\\\n    Examples\\\\n    --------\\\\n    >>> import numpy.ma as ma\\\\n    >>> a = np.int8()\\\\n    >>> ma.maximum_fill_value(a)\\\\n    -128\\\\n    >>> a = np.int32()\\\\n    >>> ma.maximum_fill_value(a)\\\\n    -2147483648\\\\n\\\\n    An array of numeric data can also be passed.\\\\n\\\\n    >>> a = np.array([1, 2, 3], dtype=np.int8)\\\\n    >>> ma.maximum_fill_value(a)\\\\n    -128\\\\n    >>> a = np.array([1, 2, 3], dtype=np.float32)\\\\n    >>> ma.maximum_fill_value(a)\\\\n    -inf\\\\n\\\\n    s(\\\\x00\\\\x00\\\\x00Unsuitable type for calculating maximum.R\\\\xe9\\\\x00\\\\x00\\\\x00R\\\\x00\\\\x01\\\\x00\\\\x00R\\\\x01\\\\x01\\\\x00\\\\x00R\\\\x02\\\\x01\\\\x00\\\\x00N(\\\\x0c\\\\x00\\\\x00\\\\x00R\\\\xeb\\\\x00\\\\x00\\\\x00R\\\\xf9\\\\x00\\\\x00\\\\x00R\\\\xe9\\\\x00\\\\x00\\\\x00t\\\\n\\\\x00\\\\x00\\\\x00max_fillerR\\\\xed\\\\x00\\\\x00\\\\x00R\\\\xf4\\\\x00\\\\x00\\\\x00R\\\\x04\\\\x01\\\\x00\\\\x00R\\\\x05\\\\x01\\\\x00\\\\x00R\\\\xf5\\\\x00\\\\x00\\\\x00R\\\\x0e\\\\x00\\\\x00\\\\x00R\\\\xee\\\\x00\\\\x00\\\\x00R\\\\xca\\\\x00\\\\x00\\\\x00(\\\\x02\\\\x00\\\\x00\\\\x00R\\\\xcb\\\\x00\\\\x00\\\\x00R\\\\x06\\\\x01\\\\x00\\\\x00(\\\\x00\\\\x00\\\\x00\\\\x00(\\\\x00\\\\x00\\\\x00\\\\x00s,\\\\x00\\\\x00\\\\x00lib/python2.7/site-packages/numpy/ma/core.pyR\\\\x8b\\\\x00\\\\x00\\\\x00<\\\\x01\\\\x00\\\\x00s\\\\x18\\\\x00\\\\x00\\\\x00\\\\x000\\\\x06\\\\x01\\\\x0f\\\\x01\\\\x10\\\\x01\\\\x0f\\\\x01\\\\x0f\\\\x01\\\\x0f\\\\x01\\\\x0f\\\\x01\\\\x0f\\\\x01\\\\x0f\\\\x01\\\\x12\\\\x01\\\\x08\\\\x02c\\\\x01\\\\x00\\\\x00\\\\x00\\\\x04\\\\x00\\\\x00\\\\x00\\\\x05\\\\x00\\\\x00\\\\x00C`\\\\x01\\\\x00s\\\\x7f\\\\x00\\\\x00\\\\x00g\\\\x00\\\\x00}\\\\x01\\\\x00xl\\\\x00|\\\\x00\\\\x00j\\\\x00\\\\x00D]a\\\\x00}\\\\x02\\\\x00|\\\\x00\\\\x00|\\\\x02\\\\x00\\\\x19}\\\\x03\\\\x00|\\\\x03\\\\x00j\\\\x01\\\\x00r9\\\\x00|\\\\x03\\\\x00j\\\\x01\\\\x00d\\\\x01\\\\x00\\\\x19}\\\\x03\\\\x00n\\\\x00\\\\x00|\\\\x03\\\\x00j\\\\x00\\\\x00r^\\\\x00|\\\\x01\\\\x00j\\\\x02\\\\x00t\\\\x03\\\\x00t\\\\x04\\\\x00|\\\\x03\\\\x00\\\\x83\\\\x01\\\\x00\\\\x83\\\\x01\\\\x00\\\\x83\\\\x01\\\\x00\\\\x01q\\\\x10\\\\x00|\\\\x01\\\\x00j\\\\x02\\\\x00t\\\\x05\\\\x00|\\\\x03\\\\x00\\\\x83\\\\x01\\\\x00\\\\x83\\\\x01\\\\x00\\\\x01q\\\\x10\\\\x00Wt\\\\x03\\\\x00|\\\\x01\\\\x00\\\\x83\\\\x01\\\\x00S(\\\\x02\\\\x00\\\\x00\\\\x00s$\\\\x01\\\\x00\\\\x00\\\\n    Create the default fill value for a structured dtype.\\\\n\\\\n    Parameters\\\\n    ----------\\\\n    dt: dtype\\\\n        The structured dtype for which to create the fill value.\\\\n\\\\n    Returns\\\\n    -------\\\\n    val: tuple\\\\n        A tuple of values corresponding to the default structured fill value.\\\\n\\\\n    i\\\\x00\\\\x00\\\\x00\\\\x00(\\\\x06\\\\x00\\\\x00\\\\x00R\\\\xf8\\\\x00\\\\x00\\\\x00R\\\\xef\\\\x00\\\\x00\\\\x00R"\\\\x00\\\\x00\\\\x00R\\\\xfa\\\\x00\\\\x00\\\\x00t!\\\\x00\\\\x00\\\\x00_recursive_set_default_fill_valueRB\\\\x00\\\\x00\\\\x00(\\\\x04\\\\x00\\\\x00\\\\x00t\\\\x02\\\\x00\\\\x00\\\\x00dtR\\\\xfd\\\\x00\\\\x00\\\\x00R\\\\xfe\\\\x00\\\\x00\\\\x00t\\\\x0b\\\\x00\\\\x00\\\\x00currenttype(\\\\x00\\\\x00\\\\x00\\\\x00(\\\\x00\\\\x00\\\\x00\\\\x00s,\\\\x00\\\\x00\\\\x00lib/python2.7/site-packages/numpy/ma/core.pyR\\\\x08\\\\x01\\\\x00\\\\x00{\\\\x01\\\\x00\\\\x00s\\\\x14\\\\x00\\\\x00\\\\x00\\\\x00\\\\x0f\\\\x06\\\\x01\\\\x10\\\\x01\\\\n\\\\x01\\\\t\\\\x01\\\\x10\\\\x02\\\\t\\\\x01\\\\x06\\\\x01\\\\x16\\\\x02\\\\x17\\\\x01c\\\\x02\\\\x00\\\\x00\\\\x00\\\\x06\\\\x00\\\\x00\\\\x00\\\\x06\\\\x00\\\\x00\\\\x00C`\\\\x01\\\\x00s\\\\xbb\\\\x00\\\\x00\\\\x00t\\\\x00\\\\x00j\\\\x01\\\\x00|\\\\x00\\\\x00t\\\\x02\\\\x00|\\\\x01\\\\x00j\\\\x03\\\\x00\\\\x83\\\\x01\\\\x00\\\\x83\\\\x02\\\\x00}\\\\x00\\\\x00g\\\\x00\\\\x00}\\\\x02\\\\x00x\\\\x8d\\\\x00t\\\\x04\\\\x00|\\\\x00\\\\x00|\\\\x01\\\\x00j\\\\x03\\\\x00\\\\x83\\\\x02\\\\x00D]y\\\\x00\\\\\\\\\\\\x02\\\\x00}\\\\x03\\\\x00}\\\\x04\\\\x00|\\\\x01\\\\x00|\\\\x04\\\\x00\\\\x19}\\\\x05\\\\x00|\\\\x05\\\\x00j\\\\x05\\\\x00rc\\\\x00|\\\\x05\\\\x00j\\\\x05\\\\x00d\\\\x01\\\\x00\\\\x19}\\\\x05\\\\x00n\\\\x00\\\\x00|\\\\x05\\\\x00j\\\\x03\\\\x00r\\\\x8b\\\\x00|\\\\x02\\\\x00j\\\\x06\\\\x00t\\\\x07\\\\x00t\\\\x08\\\\x00|\\\\x03\\\\x00|\\\\x05\\\\x00\\\\x83\\\\x02\\\\x00\\\\x83\\\\x01\\\\x00\\\\x83\\\\x01\\\\x00\\\\x01q4\\\\x00|\\\\x02\\\\x00j\\\\x06\\\\x00t\\\\x00\\\\x00j\\\\t\\\\x00|\\\\x03\\\\x00d\\\\x02\\\\x00|\\\\x05\\\\x00\\\\x83\\\\x01\\\\x01j\\\\n\\\\x00\\\\x83\\\\x00\\\\x00\\\\x83\\\\x01\\\\x00\\\\x01q4\\\\x00Wt\\\\x07\\\\x00|\\\\x02\\\\x00\\\\x83\\\\x01\\\\x00S(\\\\x03\\\\x00\\\\x00\\\\x00s\\\\xc3\\\\x01\\\\x00\\\\x00\\\\n    Create a fill value for a structured dtype.\\\\n\\\\n    Parameters\\\\n    ----------\\\\n    fillvalue: scalar or array_like\\\\n        Scalar or array representing the fill value. If it is of shorter\\\\n        length than the number of fields in dt, it will be resized.\\\\n    dt: dtype\\\\n        The structured dtype for which to create the fill value.\\\\n\\\\n    Returns\\\\n    -------\\\\n    val: tuple\\\\n        A tuple of values corresponding to the structured fill value.\\\\n\\\\n    i\\\\x00\\\\x00\\\\x00\\\\x00R\\\\xe9\\\\x00\\\\x00\\\\x00(\\\\x0b\\\\x00\\\\x00\\\\x00R\\\\xee\\\\x00\\\\x00\\\\x00R\\\\xa6\\\\x00\\\\x00\\\\x00t\\\\x03\\\\x00\\\\x00\\\\x00lenR\\\\xf8\\\\x00\\\\x00\\\\x00t\\\\x03\\\\x00\\\\x00\\\\x00zipR\\\\xef\\\\x00\\\\x00\\\\x00R"\\\\x00\\\\x00\\\\x00R\\\\xfa\\\\x00\\\\x00\\\\x00t\\\\x19\\\\x00\\\\x00\\\\x00_recursive_set_fill_valueR\\\\n\\\\x00\\\\x00\\\\x00t\\\\x04\\\\x00\\\\x00\\\\x00item(\\\\x06\\\\x00\\\\x00\\\\x00t\\\\t\\\\x00\\\\x00\\\\x00fillvalueR\\\\t\\\\x01\\\\x00\\\\x00t\\\\x0c\\\\x00\\\\x00\\\\x00output_valueR\\\\xff\\\\x00\\\\x00\\\\x00R\\\\xfe\\\\x00\\\\x00\\\\x00t\\\\x06\\\\x00\\\\x00\\\\x00cdtype(\\\\x00\\\\x00\\\\x00\\\\x00(\\\\x00\\\\x00\\\\x00\\\\x00s,\\\\x00\\\\x00\\\\x00lib/python2.7/site-packages/numpy/ma/core.pyR\\\\r\\\\x01\\\\x00\\\\x00\\\\x98\\\\x01\\\\x00\\\\x00s\\\\x14\\\\x00\\\\x00\\\\x00\\\\x00\\\\x12\\\\x1b\\\\x01\\\\x06\\\\x01\\\\x1f\\\\x01\\\\n\\\\x01\\\\t\\\\x01\\\\x10\\\\x02\\\\t\\\\x01\\\\x1f\\\\x02&\\\\x01c\\\\x02\\\\x00\\\\x00\\\\x00\\\\x06\\\\x00\\\\x00\\\\x00\\\\x06\\\\x00\\\\x00\\\\x00C`\\\\x01\\\\x00s\\\\xba\\\\x01\\\\x00\\\\x00t\\\\x00\\\\x00j\\\\x01\\\\x00|\\\\x01\\\\x00\\\\x83\\\\x01\\\\x00}\\\\x01\\\\x00|\\\\x01\\\\x00j\\\\x02\\\\x00}\\\\x02\\\\x00|\\\\x00\\\\x00d\\\\t\\\\x00k\\\\x08\\\\x00rW\\\\x00|\\\\x02\\\\x00rH\\\\x00t\\\\x00\\\\x00j\\\\x04\\\\x00t\\\\x05\\\\x00|\\\\x01\\\\x00\\\\x83\\\\x01\\\\x00d\\\\x01\\\\x00|\\\\x01\\\\x00\\\\x83\\\\x01\\\\x01}\\\\x00\\\\x00q\\\\xad\\\\x01t\\\\x06\\\\x00|\\\\x01\\\\x00\\\\x83\\\\x01\\\\x00}\\\\x00\\\\x00nV\\\\x01|\\\\x02\\\\x00r\\\\\\\'\\\\x01g\\\\x00\\\\x00|\\\\x01\\\\x00j\\\\x07\\\\x00D]\\\\x1a\\\\x00}\\\\x03\\\\x00|\\\\x03\\\\x00d\\\\x02\\\\x00\\\\x19|\\\\x03\\\\x00d\\\\x03\\\\x00\\\\x19f\\\\x02\\\\x00^\\\\x02\\\\x00qg\\\\x00}\\\\x04\\\\x00t\\\\x08\\\\x00|\\\\x00\\\\x00t\\\\t\\\\x00t\\\\x00\\\\x00j\\\\n\\\\x00f\\\\x02\\\\x00\\\\x83\\\\x02\\\\x00r\\\\xf1\\\\x00y\\\\x1f\\\\x00t\\\\x00\\\\x00j\\\\x04\\\\x00|\\\\x00\\\\x00d\\\\x04\\\\x00t\\\\x0b\\\\x00d\\\\x01\\\\x00|\\\\x04\\\\x00\\\\x83\\\\x01\\\\x02}\\\\x00\\\\x00Wq$\\\\x01\\\\x04t\\\\x0c\\\\x00k\\\\n\\\\x00r\\\\xed\\\\x00\\\\x01\\\\x01\\\\x01d\\\\x05\\\\x00}\\\\x05\\\\x00t\\\\x0c\\\\x00|\\\\x05\\\\x00|\\\\x00\\\\x00|\\\\x04\\\\x00f\\\\x02\\\\x00\\\\x16\\\\x83\\\\x01\\\\x00\\\\x82\\\\x01\\\\x00q$\\\\x01Xq\\\\xad\\\\x01t\\\\x00\\\\x00j\\\\r\\\\x00|\\\\x00\\\\x00d\\\\x01\\\\x00t\\\\x0e\\\\x00\\\\x83\\\\x01\\\\x01}\\\\x00\\\\x00t\\\\x00\\\\x00j\\\\x04\\\\x00t\\\\x0f\\\\x00|\\\\x00\\\\x00|\\\\x01\\\\x00\\\\x83\\\\x02\\\\x00d\\\\x01\\\\x00|\\\\x01\\\\x00\\\\x83\\\\x01\\\\x01}\\\\x00\\\\x00n\\\\x86\\\\x00t\\\\x08\\\\x00|\\\\x00\\\\x00t\\\\x10\\\\x00\\\\x83\\\\x02\\\\x00r^\\\\x01|\\\\x01\\\\x00j\\\\x11\\\\x00d\\\\x06\\\\x00k\\\\x07\\\\x00r^\\\\x01d\\\\x07\\\\x00}\\\\x05\\\\x00t\\\\x12\\\\x00|\\\\x05\\\\x00|\\\\x01\\\\x00\\\\x16\\\\x83\\\\x01\\\\x00\\\\x82\\\\x01\\\\x00nO\\\\x00y\\\\x1f\\\\x00t\\\\x00\\\\x00j\\\\x04\\\\x00|\\\\x00\\\\x00d\\\\x04\\\\x00t\\\\x0b\\\\x00d\\\\x01\\\\x00|\\\\x01\\\\x00\\\\x83\\\\x01\\\\x02}\\\\x00\\\\x00Wn-\\\\x00\\\\x04t\\\\x13\\\\x00k\\\\n\\\\x00r\\\\xac\\\\x01\\\\x01\\\\x01\\\\x01d\\\\x08\\\\x00}\\\\x05\\\\x00t\\\\x12\\\\x00|\\\\x05\\\\x00|\\\\x00\\\\x00|\\\\x01\\\\x00f\\\\x02\\\\x00\\\\x16\\\\x83\\\\x01\\\\x00\\\\x82\\\\x01\\\\x00n\\\\x01\\\\x00Xt\\\\x00\\\\x00j\\\\x04\\\\x00|\\\\x00\\\\x00\\\\x83\\\\x01\\\\x00S(\\\\n\\\\x00\\\\x00\\\\x00s\\\\xaf\\\\x01\\\\x00\\\\x00\\\\n    Private function validating the given `fill_value` for the given dtype.\\\\n\\\\n    If fill_value is None, it is set to the default corresponding to the dtype\\\\n    if this latter is standard (no fields). If the datatype is flexible (named\\\\n    fields), fill_value is set to a tuple whose elements are the default fill\\\\n    values corresponding to each field.\\\\n\\\\n    If fill_value is not None, its value is forced to the given dtype.\\\\n\\\\n    R\\\\xe9\\\\x00\\\\x00\\\\x00i\\\\x00\\\\x00\\\\x00\\\\x00i\\\\x01\\\\x00\\\\x00\\\\x00R<\\\\x00\\\\x00\\\\x00s"\\\\x00\\\\x00\\\\x00Unable to transform %s to dtype %st\\\\x04\\\\x00\\\\x00\\\\x00OSVUs6\\\\x00\\\\x00\\\\x00Cannot set fill value of string with array of dtype %ss \\\\x00\\\\x00\\\\x00Fill value %s overflows dtype %sN(\\\\x14\\\\x00\\\\x00\\\\x00R\\\\xee\\\\x00\\\\x00\\\\x00R\\\\xe9\\\\x00\\\\x00\\\\x00t\\\\x06\\\\x00\\\\x00\\\\x00fieldsR\\\\xc4\\\\x00\\\\x00\\\\x00R\\\\n\\\\x00\\\\x00\\\\x00R\\\\x08\\\\x01\\\\x00\\\\x00RB\\\\x00\\\\x00\\\\x00t\\\\x05\\\\x00\\\\x00\\\\x00descrR\\\\xed\\\\x00\\\\x00\\\\x00R\\\\x04\\\\x00\\\\x00\\\\x00t\\\\x04\\\\x00\\\\x00\\\\x00voidt\\\\x05\\\\x00\\\\x00\\\\x00Falset\\\\n\\\\x00\\\\x00\\\\x00ValueErrorR0\\\\x00\\\\x00\\\\x00t\\\\x06\\\\x00\\\\x00\\\\x00objectR\\\\r\\\\x01\\\\x00\\\\x00R\\\\x0f\\\\x00\\\\x00\\\\x00t\\\\x04\\\\x00\\\\x00\\\\x00charR\\\\xca\\\\x00\\\\x00\\\\x00t\\\\r\\\\x00\\\\x00\\\\x00OverflowError(\\\\x06\\\\x00\\\\x00\\\\x00t\\\\n\\\\x00\\\\x00\\\\x00fill_valueR\\\\xfb\\\\x00\\\\x00\\\\x00R\\\\x13\\\\x01\\\\x00\\\\x00t\\\\x01\\\\x00\\\\x00\\\\x00_t\\\\x06\\\\x00\\\\x00\\\\x00fdtypet\\\\x07\\\\x00\\\\x00\\\\x00err_msg(\\\\x00\\\\x00\\\\x00\\\\x00(\\\\x00\\\\x00\\\\x00\\\\x00s,\\\\x00\\\\x00\\\\x00lib/python2.7/site-packages/numpy/ma/core.pyR\\\\xec\\\\x00\\\\x00\\\\x00\\\\xb8\\\\x01\\\\x00\\\\x00s6\\\\x00\\\\x00\\\\x00\\\\x00\\\\x0c\\\\x0f\\\\x01\\\\t\\\\x01\\\\x0c\\\\x01\\\\x06\\\\x01\\\\x12\\\\x01\\\\x0c\\\\x02\\\\x0f\\\\x01\\\\x06\\\\x01*\\\\x01\\\\x18\\\\x01\\\\x03\\\\x01\\\\x1f\\\\x01\\\\r\\\\x01\\\\x06\\\\x01\\\\x1d\\\\x02\\\\x15\\\\x01\\\\x15\\\\x01\\\\x0c\\\\x02\\\\x1e\\\\x01\\\\x06\\\\x01\\\\x13\\\\x03\\\\x03\\\\x01\\\\x1f\\\\x01\\\\r\\\\x04\\\\x06\\\\x01\\\\x1a\\\\x01c\\\\x02\\\\x00\\\\x00\\\\x00\\\\x02\\\\x00\\\\x00\\\\x00\\\\x03\\\\x00\\\\x00\\\\x00C`\\\\x01\\\\x00s#\\\\x00\\\\x00\\\\x00t\\\\x00\\\\x00|\\\\x00\\\\x00t\\\\x01\\\\x00\\\\x83\\\\x02\\\\x00r\\\\x1f\\\\x00|\\\\x00\\\\x00j\\\\x02\\\\x00|\\\\x01\\\\x00\\\\x83\\\\x01\\\\x00\\\\x01n\\\\x00\\\\x00d\\\\x01\\\\x00S(\\\\x02\\\\x00\\\\x00\\\\x00s\\\\xc4\\\\x05\\\\x00\\\\x00\\\\n    Set the filling value of a, if a is a masked array.\\\\n\\\\n    This function changes the fill value of the masked array `a` in place.\\\\n    If `a` is not a masked array, the function returns silently, without\\\\n    doing anything.\\\\n\\\\n    Parameters\\\\n    ----------\\\\n    a : array_like\\\\n        Input array.\\\\n    fill_value : dtype\\\\n        Filling value. A consistency test is performed to make sure\\\\n        the value is compatible with the dtype of `a`.\\\\n\\\\n    Returns\\\\n    -------\\\\n    None\\\\n        Nothing returned by this function.\\\\n\\\\n    See Also\\\\n    --------\\\\n    maximum_fill_value : Return the default fill value for a dtype.\\\\n    MaskedArray.fill_value : Return current fill value.\\\\n    MaskedArray.set_fill_value : Equivalent method.\\\\n\\\\n    Examples\\\\n    --------\\\\n    >>> import numpy.ma as ma\\\\n    >>> a = np.arange(5)\\\\n    >>> a\\\\n    array([0, 1, 2, 3, 4])\\\\n    >>> a = ma.masked_where(a < 3, a)\\\\n    >>> a\\\\n    masked_array(data = [-- -- -- 3 4],\\\\n          mask = [ True  True  True False False],\\\\n          fill_value=999999)\\\\n    >>> ma.set_fill_value(a, -999)\\\\n    >>> a\\\\n    masked_array(data = [-- -- -- 3 4],\\\\n          mask = [ True  True  True False False],\\\\n          fill_value=-999)\\\\n\\\\n    Nothing happens if `a` is not a masked array.\\\\n\\\\n    >>> a = range(5)\\\\n    >>> a\\\\n    [0, 1, 2, 3, 4]\\\\n    >>> ma.set_fill_value(a, 100)\\\\n    >>> a\\\\n    [0, 1, 2, 3, 4]\\\\n    >>> a = np.arange(5)\\\\n    >>> a\\\\n    array([0, 1, 2, 3, 4])\\\\n    >>> ma.set_fill_value(a, 100)\\\\n    >>> a\\\\n    array([0, 1, 2, 3, 4])\\\\n\\\\n    N(\\\\x03\\\\x00\\\\x00\\\\x00R\\\\xed\\\\x00\\\\x00\\\\x00R\\\\x17\\\\x00\\\\x00\\\\x00R\\\\xaa\\\\x00\\\\x00\\\\x00(\\\\x02\\\\x00\\\\x00\\\\x00t\\\\x01\\\\x00\\\\x00\\\\x00aR\\\\x1b\\\\x01\\\\x00\\\\x00(\\\\x00\\\\x00\\\\x00\\\\x00(\\\\x00\\\\x00\\\\x00\\\\x00s,\\\\x00\\\\x00\\\\x00lib/python2.7/site-packages/numpy/ma/core.pyR\\\\xaa\\\\x00\\\\x00\\\\x00\\\\xe9\\\\x01\\\\x00\\\\x00s\\\\x06\\\\x00\\\\x00\\\\x00\\\\x00<\\\\x0f\\\\x01\\\\x10\\\\x01c\\\\x01\\\\x00\\\\x00\\\\x00\\\\x02\\\\x00\\\\x00\\\\x00\\\\x03\\\\x00\\\\x00\\\\x00C`\\\\x01\\\\x00s+\\\\x00\\\\x00\\\\x00t\\\\x00\\\\x00|\\\\x00\\\\x00t\\\\x01\\\\x00\\\\x83\\\\x02\\\\x00r\\\\x1b\\\\x00|\\\\x00\\\\x00j\\\\x02\\\\x00}\\\\x01\\\\x00n\\\\x0c\\\\x00t\\\\x03\\\\x00|\\\\x00\\\\x00\\\\x83\\\\x01\\\\x00}\\\\x01\\\\x00|\\\\x01\\\\x00S(\\\\x01\\\\x00\\\\x00\\\\x00sr\\\\x00\\\\x00\\\\x00\\\\n    Return the filling value of a, if any.  Otherwise, returns the\\\\n    default filling value for that type.\\\\n\\\\n    (\\\\x04\\\\x00\\\\x00\\\\x00R\\\\xed\\\\x00\\\\x00\\\\x00R\\\\x17\\\\x00\\\\x00\\\\x00R\\\\x1b\\\\x01\\\\x00\\\\x00RB\\\\x00\\\\x00\\\\x00(\\\\x02\\\\x00\\\\x00\\\\x00R\\\\x1f\\\\x01\\\\x00\\\\x00t\\\\x06\\\\x00\\\\x00\\\\x00result(\\\\x00\\\\x00\\\\x00\\\\x00(\\\\x00\\\\x00\\\\x00\\\\x00s,\\\\x00\\\\x00\\\\x00lib/python2.7/site-packages/numpy/ma/core.pyt\\\\x0e\\\\x00\\\\x00\\\\x00get_fill_value*\\\\x02\\\\x00\\\\x00s\\\\x08\\\\x00\\\\x00\\\\x00\\\\x00\\\\x06\\\\x0f\\\\x01\\\\x0c\\\\x02\\\\x0c\\\\x01c\\\\x02\\\\x00\\\\x00\\\\x00\\\\x04\\\\x00\\\\x00\\\\x00\\\\x02\\\\x00\\\\x00\\\\x00C`\\\\x01\\\\x00s,\\\\x00\\\\x00\\\\x00t\\\\x00\\\\x00|\\\\x00\\\\x00\\\\x83\\\\x01\\\\x00}\\\\x02\\\\x00t\\\\x00\\\\x00|\\\\x01\\\\x00\\\\x83\\\\x01\\\\x00}\\\\x03\\\\x00|\\\\x02\\\\x00|\\\\x03\\\\x00k\\\\x02\\\\x00r(\\\\x00|\\\\x02\\\\x00Sd\\\\x01\\\\x00S(\\\\x02\\\\x00\\\\x00\\\\x00s\\\\x1e\\\\x02\\\\x00\\\\x00\\\\n    Return the common filling value of two masked arrays, if any.\\\\n\\\\n    If ``a.fill_value == b.fill_value``, return the fill value,\\\\n    otherwise return None.\\\\n\\\\n    Parameters\\\\n    ----------\\\\n    a, b : MaskedArray\\\\n        The masked arrays for which to compare fill values.\\\\n\\\\n    Returns\\\\n    -------\\\\n    fill_value : scalar or None\\\\n        The common fill value, or None.\\\\n\\\\n    Examples\\\\n    --------\\\\n    >>> x = np.ma.array([0, 1.], fill_value=3)\\\\n    >>> y = np.ma.array([0, 1.], fill_value=3)\\\\n    >>> np.ma.common_fill_value(x, y)\\\\n    3.0\\\\n\\\\n    N(\\\\x02\\\\x00\\\\x00\\\\x00R!\\\\x01\\\\x00\\\\x00R\\\\xc4\\\\x00\\\\x00\\\\x00(\\\\x04\\\\x00\\\\x00\\\\x00R\\\\x1f\\\\x01\\\\x00\\\\x00R\\\\xcf\\\\x00\\\\x00\\\\x00t\\\\x02\\\\x00\\\\x00\\\\x00t1t\\\\x02\\\\x00\\\\x00\\\\x00t2(\\\\x00\\\\x00\\\\x00\\\\x00(\\\\x00\\\\x00\\\\x00\\\\x00s,\\\\x00\\\\x00\\\\x00lib/python2.7/site-packages/numpy/ma/core.pyR7\\\\x00\\\\x00\\\\x007\\\\x02\\\\x00\\\\x00s\\\\n\\\\x00\\\\x00\\\\x00\\\\x00\\\\x19\\\\x0c\\\\x01\\\\x0c\\\\x01\\\\x0c\\\\x01\\\\x04\\\\x01c\\\\x02\\\\x00\\\\x00\\\\x00\\\\x02\\\\x00\\\\x00\\\\x00\\\\x03\\\\x00\\\\x00\\\\x00C`\\\\x01\\\\x00s_\\\\x00\\\\x00\\\\x00t\\\\x00\\\\x00|\\\\x00\\\\x00d\\\\x01\\\\x00\\\\x83\\\\x02\\\\x00r\\\\x1c\\\\x00|\\\\x00\\\\x00j\\\\x01\\\\x00|\\\\x01\\\\x00\\\\x83\\\\x01\\\\x00St\\\\x02\\\\x00|\\\\x00\\\\x00t\\\\x03\\\\x00\\\\x83\\\\x02\\\\x00r/\\\\x00|\\\\x00\\\\x00St\\\\x02\\\\x00|\\\\x00\\\\x00t\\\\x04\\\\x00\\\\x83\\\\x02\\\\x00rN\\\\x00t\\\\x05\\\\x00j\\\\x06\\\\x00|\\\\x00\\\\x00d\\\\x02\\\\x00\\\\x83\\\\x02\\\\x00St\\\\x05\\\\x00j\\\\x06\\\\x00|\\\\x00\\\\x00\\\\x83\\\\x01\\\\x00Sd\\\\x03\\\\x00S(\\\\x04\\\\x00\\\\x00\\\\x00sn\\\\x03\\\\x00\\\\x00\\\\n    Return input as an array with masked data replaced by a fill value.\\\\n\\\\n    If `a` is not a `MaskedArray`, `a` itself is returned.\\\\n    If `a` is a `MaskedArray` and `fill_value` is None, `fill_value` is set to\\\\n    ``a.fill_value``.\\\\n\\\\n    Parameters\\\\n    ----------\\\\n    a : MaskedArray or array_like\\\\n        An input object.\\\\n    fill_value : scalar, optional\\\\n        Filling value. Default is None.\\\\n\\\\n    Returns\\\\n    -------\\\\n    a : ndarray\\\\n        The filled array.\\\\n\\\\n    See Also\\\\n    --------\\\\n    compressed\\\\n\\\\n    Examples\\\\n    --------\\\\n    >>> x = np.ma.array(np.arange(9).reshape(3, 3), mask=[[1, 0, 0],\\\\n    ...                                                   [1, 0, 0],\\\\n    ...                                                   [0, 0, 0]])\\\\n    >>> x.filled()\\\\n    array([[999999,      1,      2],\\\\n           [999999,      4,      5],\\\\n           [     6,      7,      8]])\\\\n\\\\n    RN\\\\x00\\\\x00\\\\x00R\\\\xd4\\\\x00\\\\x00\\\\x00N(\\\\x07\\\\x00\\\\x00\\\\x00R\\\\xeb\\\\x00\\\\x00\\\\x00RN\\\\x00\\\\x00\\\\x00R\\\\xed\\\\x00\\\\x00\\\\x00R\\\\x04\\\\x00\\\\x00\\\\x00t\\\\x04\\\\x00\\\\x00\\\\x00dictR\\\\xee\\\\x00\\\\x00\\\\x00R\\\\n\\\\x00\\\\x00\\\\x00(\\\\x02\\\\x00\\\\x00\\\\x00R\\\\x1f\\\\x01\\\\x00\\\\x00R\\\\x1b\\\\x01\\\\x00\\\\x00(\\\\x00\\\\x00\\\\x00\\\\x00(\\\\x00\\\\x00\\\\x00\\\\x00s,\\\\x00\\\\x00\\\\x00lib/python2.7/site-packages/numpy/ma/core.pyRN\\\\x00\\\\x00\\\\x00W\\\\x02\\\\x00\\\\x00s\\\\x0e\\\\x00\\\\x00\\\\x00\\\\x00#\\\\x0f\\\\x01\\\\r\\\\x01\\\\x0f\\\\x02\\\\x04\\\\x01\\\\x0f\\\\x01\\\\x10\\\\x02c\\\\x00\\\\x00\\\\x00\\\\x00\\\\x06\\\\x00\\\\x00\\\\x00\\\\x04\\\\x00\\\\x00\\\\x00G`\\\\x01\\\\x00s\\\\xc8\\\\x00\\\\x00\\\\x00t\\\\x00\\\\x00|\\\\x00\\\\x00\\\\x83\\\\x01\\\\x00d\\\\x01\\\\x00k\\\\x02\\\\x00rC\\\\x00|\\\\x00\\\\x00d\\\\x02\\\\x00\\\\x19}\\\\x01\\\\x00t\\\\x01\\\\x00|\\\\x01\\\\x00t\\\\x02\\\\x00\\\\x83\\\\x02\\\\x00r:\\\\x00t\\\\x03\\\\x00|\\\\x01\\\\x00\\\\x83\\\\x01\\\\x00}\\\\x02\\\\x00q\\\\xb1\\\\x00t\\\\x02\\\\x00}\\\\x02\\\\x00nn\\\\x00g\\\\x00\\\\x00|\\\\x00\\\\x00D]\\\\x12\\\\x00}\\\\x03\\\\x00t\\\\x03\\\\x00|\\\\x03\\\\x00\\\\x83\\\\x01\\\\x00^\\\\x02\\\\x00qJ\\\\x00}\\\\x04\\\\x00|\\\\x04\\\\x00d\\\\x02\\\\x00\\\\x19}\\\\x02\\\\x00t\\\\x04\\\\x00|\\\\x02\\\\x00t\\\\x02\\\\x00\\\\x83\\\\x02\\\\x00s\\\\x84\\\\x00t\\\\x02\\\\x00}\\\\x02\\\\x00n\\\\x00\\\\x00x*\\\\x00|\\\\x04\\\\x00d\\\\x01\\\\x00\\\\x1fD]\\\\x1e\\\\x00}\\\\x05\\\\x00t\\\\x04\\\\x00|\\\\x05\\\\x00|\\\\x02\\\\x00\\\\x83\\\\x02\\\\x00r\\\\x8f\\\\x00|\\\\x05\\\\x00}\\\\x02\\\\x00q\\\\x8f\\\\x00q\\\\x8f\\\\x00W|\\\\x02\\\\x00j\\\\x05\\\\x00d\\\\x03\\\\x00k\\\\x02\\\\x00r\\\\xc4\\\\x00t\\\\x02\\\\x00S|\\\\x02\\\\x00S(\\\\x04\\\\x00\\\\x00\\\\x00s\\\\x8d\\\\x00\\\\x00\\\\x00\\\\n    Return the youngest subclass of MaskedArray from a list of (masked) arrays.\\\\n\\\\n    In case of siblings, the first listed takes over.\\\\n\\\\n    i\\\\x01\\\\x00\\\\x00\\\\x00i\\\\x00\\\\x00\\\\x00\\\\x00t\\\\x0e\\\\x00\\\\x00\\\\x00MaskedConstant(\\\\x06\\\\x00\\\\x00\\\\x00R\\\\x0b\\\\x01\\\\x00\\\\x00R\\\\xed\\\\x00\\\\x00\\\\x00R\\\\x17\\\\x00\\\\x00\\\\x00t\\\\x04\\\\x00\\\\x00\\\\x00typet\\\\n\\\\x00\\\\x00\\\\x00issubclassR\\\\xc2\\\\x00\\\\x00\\\\x00(\\\\x06\\\\x00\\\\x00\\\\x00t\\\\x06\\\\x00\\\\x00\\\\x00arrayst\\\\x03\\\\x00\\\\x00\\\\x00arrt\\\\x04\\\\x00\\\\x00\\\\x00rclsR\\\\x1f\\\\x01\\\\x00\\\\x00t\\\\x06\\\\x00\\\\x00\\\\x00arrclst\\\\x03\\\\x00\\\\x00\\\\x00cls(\\\\x00\\\\x00\\\\x00\\\\x00(\\\\x00\\\\x00\\\\x00\\\\x00s,\\\\x00\\\\x00\\\\x00lib/python2.7/site-packages/numpy/ma/core.pyt\\\\x13\\\\x00\\\\x00\\\\x00get_masked_subclass\\\\x85\\\\x02\\\\x00\\\\x00s\\\\x1e\\\\x00\\\\x00\\\\x00\\\\x00\\\\x07\\\\x12\\\\x01\\\\n\\\\x01\\\\x0f\\\\x01\\\\x0f\\\\x02\\\\t\\\\x02\\\\x1f\\\\x01\\\\n\\\\x01\\\\x0f\\\\x01\\\\t\\\\x01\\\\x11\\\\x01\\\\x0f\\\\x01\\\\r\\\\x02\\\\x0f\\\\x01\\\\x04\\\\x01c\\\\x02\\\\x00\\\\x00\\\\x00\\\\x03\\\\x00\\\\x00\\\\x00\\\\x06\\\\x00\\\\x00\\\\x00C`\\\\x01\\\\x00sS\\\\x00\\\\x00\\\\x00y\\\\r\\\\x00|\\\\x00\\\\x00j\\\\x00\\\\x00}\\\\x02\\\\x00Wn,\\\\x00\\\\x04t\\\\x01\\\\x00k\\\\n\\\\x00r;\\\\x00\\\\x01\\\\x01\\\\x01t\\\\x02\\\\x00j\\\\x03\\\\x00|\\\\x00\\\\x00d\\\\x01\\\\x00t\\\\x04\\\\x00d\\\\x02\\\\x00|\\\\x01\\\\x00\\\\x83\\\\x01\\\\x02}\\\\x02\\\\x00n\\\\x01\\\\x00X|\\\\x01\\\\x00sO\\\\x00|\\\\x02\\\\x00j\\\\x05\\\\x00t\\\\x06\\\\x00\\\\x83\\\\x01\\\\x00S|\\\\x02\\\\x00S(\\\\x03\\\\x00\\\\x00\\\\x00sE\\\\x04\\\\x00\\\\x00\\\\n    Return the data of a masked array as an ndarray.\\\\n\\\\n    Return the data of `a` (if any) as an ndarray if `a` is a ``MaskedArray``,\\\\n    else return `a` as a ndarray or subclass (depending on `subok`) if not.\\\\n\\\\n    Parameters\\\\n    ----------\\\\n    a : array_like\\\\n        Input ``MaskedArray``, alternatively a ndarray or a subclass thereof.\\\\n    subok : bool\\\\n        Whether to force the output to be a `pure` ndarray (False) or to\\\\n        return a subclass of ndarray if appropriate (True, default).\\\\n\\\\n    See Also\\\\n    --------\\\\n    getmask : Return the mask of a masked array, or nomask.\\\\n    getmaskarray : Return the mask of a masked array, or full array of False.\\\\n\\\\n    Examples\\\\n    --------\\\\n    >>> import numpy.ma as ma\\\\n    >>> a = ma.masked_equal([[1,2],[3,4]], 2)\\\\n    >>> a\\\\n    masked_array(data =\\\\n     [[1 --]\\\\n     [3 4]],\\\\n          mask =\\\\n     [[False  True]\\\\n     [False False]],\\\\n          fill_value=999999)\\\\n    >>> ma.getdata(a)\\\\n    array([[1, 2],\\\\n           [3, 4]])\\\\n\\\\n    Equivalently use the ``MaskedArray`` `data` attribute.\\\\n\\\\n    >>> a.data\\\\n    array([[1, 2],\\\\n           [3, 4]])\\\\n\\\\n    R<\\\\x00\\\\x00\\\\x00t\\\\x05\\\\x00\\\\x00\\\\x00subok(\\\\x07\\\\x00\\\\x00\\\\x00t\\\\x05\\\\x00\\\\x00\\\\x00_datat\\\\x0e\\\\x00\\\\x00\\\\x00AttributeErrorR\\\\xee\\\\x00\\\\x00\\\\x00R\\\\n\\\\x00\\\\x00\\\\x00R\\\\x16\\\\x01\\\\x00\\\\x00t\\\\x04\\\\x00\\\\x00\\\\x00viewR\\\\x04\\\\x00\\\\x00\\\\x00(\\\\x03\\\\x00\\\\x00\\\\x00R\\\\x1f\\\\x01\\\\x00\\\\x00R.\\\\x01\\\\x00\\\\x00t\\\\x04\\\\x00\\\\x00\\\\x00data(\\\\x00\\\\x00\\\\x00\\\\x00(\\\\x00\\\\x00\\\\x00\\\\x00s,\\\\x00\\\\x00\\\\x00lib/python2.7/site-packages/numpy/ma/core.pyRX\\\\x00\\\\x00\\\\x00\\\\xa0\\\\x02\\\\x00\\\\x00s\\\\x0e\\\\x00\\\\x00\\\\x00\\\\x00+\\\\x03\\\\x01\\\\r\\\\x01\\\\r\\\\x01\\\\x1f\\\\x01\\\\x06\\\\x01\\\\r\\\\x01c\\\\x04\\\\x00\\\\x00\\\\x00\\\\x05\\\\x00\\\\x00\\\\x00\\\\x08\\\\x00\\\\x00\\\\x00C`\\\\x01\\\\x00s\\\\x81\\\\x00\\\\x00\\\\x00t\\\\x00\\\\x00|\\\\x00\\\\x00d\\\\x01\\\\x00|\\\\x02\\\\x00d\\\\x02\\\\x00|\\\\x01\\\\x00d\\\\x03\\\\x00t\\\\x01\\\\x00\\\\x83\\\\x01\\\\x03}\\\\x00\\\\x00t\\\\x02\\\\x00j\\\\x03\\\\x00t\\\\x02\\\\x00j\\\\x04\\\\x00|\\\\x00\\\\x00j\\\\x05\\\\x00\\\\x83\\\\x01\\\\x00\\\\x83\\\\x01\\\\x00}\\\\x04\\\\x00|\\\\x04\\\\x00j\\\\x06\\\\x00\\\\x83\\\\x00\\\\x00sI\\\\x00|\\\\x00\\\\x00S|\\\\x00\\\\x00\\\\x04j\\\\x07\\\\x00|\\\\x04\\\\x00O\\\\x02_\\\\x07\\\\x00|\\\\x03\\\\x00d\\\\x04\\\\x00k\\\\x08\\\\x00rp\\\\x00|\\\\x00\\\\x00j\\\\t\\\\x00}\\\\x03\\\\x00n\\\\x00\\\\x00|\\\\x03\\\\x00|\\\\x00\\\\x00j\\\\x05\\\\x00|\\\\x04\\\\x00<|\\\\x00\\\\x00S(\\\\x05\\\\x00\\\\x00\\\\x00s\\\\x84\\\\x05\\\\x00\\\\x00\\\\n    Return input with invalid data masked and replaced by a fill value.\\\\n\\\\n    Invalid data means values of `nan`, `inf`, etc.\\\\n\\\\n    Parameters\\\\n    ----------\\\\n    a : array_like\\\\n        Input array, a (subclass of) ndarray.\\\\n    mask : sequence, optional\\\\n        Mask. Must be convertible to an array of booleans with the same\\\\n        shape as `data`. True indicates a masked (i.e. invalid) data.\\\\n    copy : bool, optional\\\\n        Whether to use a copy of `a` (True) or to fix `a` in place (False).\\\\n        Default is True.\\\\n    fill_value : scalar, optional\\\\n        Value used for fixing invalid data. Default is None, in which case\\\\n        the ``a.fill_value`` is used.\\\\n\\\\n    Returns\\\\n    -------\\\\n    b : MaskedArray\\\\n        The input array with invalid entries fixed.\\\\n\\\\n    Notes\\\\n    -----\\\\n    A copy is performed by default.\\\\n\\\\n    Examples\\\\n    --------\\\\n    >>> x = np.ma.array([1., -1, np.nan, np.inf], mask=[1] + [0]*3)\\\\n    >>> x\\\\n    masked_array(data = [-- -1.0 nan inf],\\\\n                 mask = [ True False False False],\\\\n           fill_value = 1e+20)\\\\n    >>> np.ma.fix_invalid(x)\\\\n    masked_array(data = [-- -1.0 -- --],\\\\n                 mask = [ True False  True  True],\\\\n           fill_value = 1e+20)\\\\n\\\\n    >>> fixed = np.ma.fix_invalid(x)\\\\n    >>> fixed.data\\\\n    array([  1.00000000e+00,  -1.00000000e+00,   1.00000000e+20,\\\\n             1.00000000e+20])\\\\n    >>> x.data\\\\n    array([  1.,  -1.,  NaN,  Inf])\\\\n\\\\n    R<\\\\x00\\\\x00\\\\x00t\\\\x04\\\\x00\\\\x00\\\\x00maskR.\\\\x01\\\\x00\\\\x00N(\\\\n\\\\x00\\\\x00\\\\x00Rz\\\\x00\\\\x00\\\\x00t\\\\x04\\\\x00\\\\x00\\\\x00TrueR\\\\xee\\\\x00\\\\x00\\\\x00Rr\\\\x00\\\\x00\\\\x00t\\\\x08\\\\x00\\\\x00\\\\x00isfiniteR/\\\\x01\\\\x00\\\\x00R!\\\\x00\\\\x00\\\\x00t\\\\x05\\\\x00\\\\x00\\\\x00_maskR\\\\xc4\\\\x00\\\\x00\\\\x00R\\\\x1b\\\\x01\\\\x00\\\\x00(\\\\x05\\\\x00\\\\x00\\\\x00R\\\\x1f\\\\x01\\\\x00\\\\x00R3\\\\x01\\\\x00\\\\x00R<\\\\x00\\\\x00\\\\x00R\\\\x1b\\\\x01\\\\x00\\\\x00t\\\\x07\\\\x00\\\\x00\\\\x00invalid(\\\\x00\\\\x00\\\\x00\\\\x00(\\\\x00\\\\x00\\\\x00\\\\x00s,\\\\x00\\\\x00\\\\x00lib/python2.7/site-packages/numpy/ma/core.pyRO\\\\x00\\\\x00\\\\x00\\\\xd7\\\\x02\\\\x00\\\\x00s\\\\x12\\\\x00\\\\x00\\\\x00\\\\x001\\\\x1e\\\\x01\\\\x1b\\\\x01\\\\x0c\\\\x01\\\\x04\\\\x01\\\\x0f\\\\x01\\\\x0c\\\\x01\\\\x0c\\\\x01\\\\r\\\\x01t\\\\x14\\\\x00\\\\x00\\\\x00_DomainCheckIntervalc\\\\x00\\\\x00\\\\x00\\\\x00\\\\x00\\\\x00\\\\x00\\\\x00\\\\x01\\\\x00\\\\x00\\\\x00B`\\\\x01\\\\x00s \\\\x00\\\\x00\\\\x00e\\\\x00\\\\x00Z\\\\x01\\\\x00d\\\\x00\\\\x00Z\\\\x02\\\\x00d\\\\x01\\\\x00\\\\x84\\\\x00\\\\x00Z\\\\x03\\\\x00d\\\\x02\\\\x00\\\\x84\\\\x00\\\\x00Z\\\\x04\\\\x00RS(\\\\x03\\\\x00\\\\x00\\\\x00s~\\\\x00\\\\x00\\\\x00\\\\n    Define a valid interval, so that :\\\\n\\\\n    ``domain_check_interval(a,b)(x) == True`` where\\\\n    ``x < a`` or ``x > b``.\\\\n\\\\n    c\\\\x03\\\\x00\\\\x00\\\\x00\\\\x03\\\\x00\\\\x00\\\\x00\\\\x02\\\\x00\\\\x00\\\\x00C`\\\\x01\\\\x00s2\\\\x00\\\\x00\\\\x00|\\\\x01\\\\x00|\\\\x02\\\\x00k\\\\x04\\\\x00r\\\\x1c\\\\x00|\\\\x02\\\\x00|\\\\x01\\\\x00\\\\x02}\\\\x01\\\\x00}\\\\x02\\\\x00n\\\\x00\\\\x00|\\\\x01\\\\x00|\\\\x00\\\\x00_\\\\x00\\\\x00|\\\\x02\\\\x00|\\\\x00\\\\x00_\\\\x01\\\\x00d\\\\x01\\\\x00S(\\\\x02\\\\x00\\\\x00\\\\x00s9\\\\x00\\\\x00\\\\x00domain_check_interval(a,b)(x) = true where x < a or y > bN(\\\\x02\\\\x00\\\\x00\\\\x00R\\\\x1f\\\\x01\\\\x00\\\\x00R\\\\xcf\\\\x00\\\\x00\\\\x00(\\\\x03\\\\x00\\\\x00\\\\x00t\\\\x04\\\\x00\\\\x00\\\\x00selfR\\\\x1f\\\\x01\\\\x00\\\\x00R\\\\xcf\\\\x00\\\\x00\\\\x00(\\\\x00\\\\x00\\\\x00\\\\x00(\\\\x00\\\\x00\\\\x00\\\\x00s,\\\\x00\\\\x00\\\\x00lib/python2.7/site-packages/numpy/ma/core.pyt\\\\x08\\\\x00\\\\x00\\\\x00__init__%\\\\x03\\\\x00\\\\x00s\\\\x08\\\\x00\\\\x00\\\\x00\\\\x00\\\\x02\\\\x0c\\\\x01\\\\x10\\\\x01\\\\t\\\\x01c\\\\x02\\\\x00\\\\x00\\\\x00\\\\x02\\\\x00\\\\x00\\\\x00\\\\x05\\\\x00\\\\x00\\\\x00C`\\\\x01\\\\x00s.\\\\x00\\\\x00\\\\x00t\\\\x00\\\\x00j\\\\x01\\\\x00t\\\\x00\\\\x00j\\\\x02\\\\x00|\\\\x01\\\\x00|\\\\x00\\\\x00j\\\\x03\\\\x00\\\\x83\\\\x02\\\\x00t\\\\x00\\\\x00j\\\\x04\\\\x00|\\\\x01\\\\x00|\\\\x00\\\\x00j\\\\x05\\\\x00\\\\x83\\\\x02\\\\x00\\\\x83\\\\x02\\\\x00S(\\\\x01\\\\x00\\\\x00\\\\x00s\\\\x1a\\\\x00\\\\x00\\\\x00Execute the call behavior.(\\\\x06\\\\x00\\\\x00\\\\x00t\\\\x05\\\\x00\\\\x00\\\\x00umathRs\\\\x00\\\\x00\\\\x00R[\\\\x00\\\\x00\\\\x00R\\\\xcf\\\\x00\\\\x00\\\\x00Rj\\\\x00\\\\x00\\\\x00R\\\\x1f\\\\x01\\\\x00\\\\x00(\\\\x02\\\\x00\\\\x00\\\\x00R9\\\\x01\\\\x00\\\\x00t\\\\x01\\\\x00\\\\x00\\\\x00x(\\\\x00\\\\x00\\\\x00\\\\x00(\\\\x00\\\\x00\\\\x00\\\\x00s,\\\\x00\\\\x00\\\\x00lib/python2.7/site-packages/numpy/ma/core.pyt\\\\x08\\\\x00\\\\x00\\\\x00__call__,\\\\x03\\\\x00\\\\x00s\\\\x04\\\\x00\\\\x00\\\\x00\\\\x00\\\\x02\\\\x18\\\\x01(\\\\x05\\\\x00\\\\x00\\\\x00R\\\\xc2\\\\x00\\\\x00\\\\x00R\\\\xc3\\\\x00\\\\x00\\\\x00R\\\\xce\\\\x00\\\\x00\\\\x00R:\\\\x01\\\\x00\\\\x00R=\\\\x01\\\\x00\\\\x00(\\\\x00\\\\x00\\\\x00\\\\x00(\\\\x00\\\\x00\\\\x00\\\\x00(\\\\x00\\\\x00\\\\x00\\\\x00s,\\\\x00\\\\x00\\\\x00lib/python2.7/site-packages/numpy/ma/core.pyR8\\\\x01\\\\x00\\\\x00\\\\x1c\\\\x03\\\\x00\\\\x00s\\\\x06\\\\x00\\\\x00\\\\x00\\\\x06\\\\x07\\\\x06\\\\x02\\\\t\\\\x07t\\\\n\\\\x00\\\\x00\\\\x00_DomainTanc\\\\x00\\\\x00\\\\x00\\\\x00\\\\x00\\\\x00\\\\x00\\\\x00\\\\x01\\\\x00\\\\x00\\\\x00B`\\\\x01\\\\x00s \\\\x00\\\\x00\\\\x00e\\\\x00\\\\x00Z\\\\x01\\\\x00d\\\\x00\\\\x00Z\\\\x02\\\\x00d\\\\x01\\\\x00\\\\x84\\\\x00\\\\x00Z\\\\x03\\\\x00d\\\\x02\\\\x00\\\\x84\\\\x00\\\\x00Z\\\\x04\\\\x00RS(\\\\x03\\\\x00\\\\x00\\\\x00s\\\\x7f\\\\x00\\\\x00\\\\x00\\\\n    Define a valid interval for the `tan` function, so that:\\\\n\\\\n    ``domain_tan(eps) = True`` where ``abs(cos(x)) < eps``\\\\n\\\\n    c\\\\x02\\\\x00\\\\x00\\\\x00\\\\x02\\\\x00\\\\x00\\\\x00\\\\x02\\\\x00\\\\x00\\\\x00C`\\\\x01\\\\x00s\\\\r\\\\x00\\\\x00\\\\x00|\\\\x01\\\\x00|\\\\x00\\\\x00_\\\\x00\\\\x00d\\\\x01\\\\x00S(\\\\x02\\\\x00\\\\x00\\\\x00s/\\\\x00\\\\x00\\\\x00domain_tan(eps) = true where abs(cos(x)) < eps)N(\\\\x01\\\\x00\\\\x00\\\\x00t\\\\x03\\\\x00\\\\x00\\\\x00eps(\\\\x02\\\\x00\\\\x00\\\\x00R9\\\\x01\\\\x00\\\\x00R?\\\\x01\\\\x00\\\\x00(\\\\x00\\\\x00\\\\x00\\\\x00(\\\\x00\\\\x00\\\\x00\\\\x00s,\\\\x00\\\\x00\\\\x00lib/python2.7/site-packages/numpy/ma/core.pyR:\\\\x01\\\\x00\\\\x00:\\\\x03\\\\x00\\\\x00s\\\\x02\\\\x00\\\\x00\\\\x00\\\\x00\\\\x02c\\\\x02\\\\x00\\\\x00\\\\x00\\\\x02\\\\x00\\\\x00\\\\x00\\\\x04\\\\x00\\\\x00\\\\x00C`\\\\x01\\\\x00s%\\\\x00\\\\x00\\\\x00t\\\\x00\\\\x00j\\\\x01\\\\x00t\\\\x00\\\\x00j\\\\x02\\\\x00t\\\\x00\\\\x00j\\\\x03\\\\x00|\\\\x01\\\\x00\\\\x83\\\\x01\\\\x00\\\\x83\\\\x01\\\\x00|\\\\x00\\\\x00j\\\\x04\\\\x00\\\\x83\\\\x02\\\\x00S(\\\\x01\\\\x00\\\\x00\\\\x00s\\\\x1b\\\\x00\\\\x00\\\\x00Executes the call behavior.(\\\\x05\\\\x00\\\\x00\\\\x00R;\\\\x01\\\\x00\\\\x00Rj\\\\x00\\\\x00\\\\x00R\\\\x19\\\\x00\\\\x00\\\\x00R=\\\\x00\\\\x00\\\\x00R?\\\\x01\\\\x00\\\\x00(\\\\x02\\\\x00\\\\x00\\\\x00R9\\\\x01\\\\x00\\\\x00R<\\\\x01\\\\x00\\\\x00(\\\\x00\\\\x00\\\\x00\\\\x00(\\\\x00\\\\x00\\\\x00\\\\x00s,\\\\x00\\\\x00\\\\x00lib/python2.7/site-packages/numpy/ma/core.pyR=\\\\x01\\\\x00\\\\x00>\\\\x03\\\\x00\\\\x00s\\\\x02\\\\x00\\\\x00\\\\x00\\\\x00\\\\x02(\\\\x05\\\\x00\\\\x00\\\\x00R\\\\xc2\\\\x00\\\\x00\\\\x00R\\\\xc3\\\\x00\\\\x00\\\\x00R\\\\xce\\\\x00\\\\x00\\\\x00R:\\\\x01\\\\x00\\\\x00R=\\\\x01\\\\x00\\\\x00(\\\\x00\\\\x00\\\\x00\\\\x00(\\\\x00\\\\x00\\\\x00\\\\x00(\\\\x00\\\\x00\\\\x00\\\\x00s,\\\\x00\\\\x00\\\\x00lib/python2.7/site-packages/numpy/ma/core.pyR>\\\\x01\\\\x00\\\\x002\\\\x03\\\\x00\\\\x00s\\\\x06\\\\x00\\\\x00\\\\x00\\\\x06\\\\x06\\\\x06\\\\x02\\\\t\\\\x04t\\\\x11\\\\x00\\\\x00\\\\x00_DomainSafeDividec\\\\x00\\\\x00\\\\x00\\\\x00\\\\x00\\\\x00\\\\x00\\\\x00\\\\x02\\\\x00\\\\x00\\\\x00B`\\\\x01\\\\x00s#\\\\x00\\\\x00\\\\x00e\\\\x00\\\\x00Z\\\\x01\\\\x00d\\\\x00\\\\x00Z\\\\x02\\\\x00d\\\\x03\\\\x00d\\\\x01\\\\x00\\\\x84\\\\x01\\\\x00Z\\\\x04\\\\x00d\\\\x02\\\\x00\\\\x84\\\\x00\\\\x00Z\\\\x05\\\\x00RS(\\\\x04\\\\x00\\\\x00\\\\x00s-\\\\x00\\\\x00\\\\x00\\\\n    Define a domain for safe division.\\\\n\\\\n    c\\\\x02\\\\x00\\\\x00\\\\x00\\\\x02\\\\x00\\\\x00\\\\x00\\\\x02\\\\x00\\\\x00\\\\x00C`\\\\x01\\\\x00s\\\\r\\\\x00\\\\x00\\\\x00|\\\\x01\\\\x00|\\\\x00\\\\x00_\\\\x00\\\\x00d\\\\x00\\\\x00S(\\\\x01\\\\x00\\\\x00\\\\x00N(\\\\x01\\\\x00\\\\x00\\\\x00t\\\\t\\\\x00\\\\x00\\\\x00tolerance(\\\\x02\\\\x00\\\\x00\\\\x00R9\\\\x01\\\\x00\\\\x00RA\\\\x01\\\\x00\\\\x00(\\\\x00\\\\x00\\\\x00\\\\x00(\\\\x00\\\\x00\\\\x00\\\\x00s,\\\\x00\\\\x00\\\\x00lib/python2.7/site-packages/numpy/ma/core.pyR:\\\\x01\\\\x00\\\\x00I\\\\x03\\\\x00\\\\x00s\\\\x02\\\\x00\\\\x00\\\\x00\\\\x00\\\\x01c\\\\x03\\\\x00\\\\x00\\\\x00\\\\x03\\\\x00\\\\x00\\\\x00\\\\x03\\\\x00\\\\x00\\\\x00C`\\\\x01\\\\x00si\\\\x00\\\\x00\\\\x00|\\\\x00\\\\x00j\\\\x00\\\\x00d\\\\x00\\\\x00k\\\\x08\\\\x00r\\\\\\\'\\\\x00t\\\\x02\\\\x00j\\\\x03\\\\x00t\\\\x04\\\\x00\\\\x83\\\\x01\\\\x00j\\\\x05\\\\x00|\\\\x00\\\\x00_\\\\x00\\\\x00n\\\\x00\\\\x00t\\\\x02\\\\x00j\\\\x06\\\\x00|\\\\x01\\\\x00\\\\x83\\\\x01\\\\x00t\\\\x02\\\\x00j\\\\x06\\\\x00|\\\\x02\\\\x00\\\\x83\\\\x01\\\\x00\\\\x02}\\\\x01\\\\x00}\\\\x02\\\\x00t\\\\x07\\\\x00j\\\\x08\\\\x00|\\\\x01\\\\x00\\\\x83\\\\x01\\\\x00|\\\\x00\\\\x00j\\\\x00\\\\x00\\\\x14t\\\\x07\\\\x00j\\\\x08\\\\x00|\\\\x02\\\\x00\\\\x83\\\\x01\\\\x00k\\\\x05\\\\x00S(\\\\x01\\\\x00\\\\x00\\\\x00N(\\\\t\\\\x00\\\\x00\\\\x00RA\\\\x01\\\\x00\\\\x00R\\\\xc4\\\\x00\\\\x00\\\\x00R\\\\xee\\\\x00\\\\x00\\\\x00t\\\\x05\\\\x00\\\\x00\\\\x00finfoR\\\\xf4\\\\x00\\\\x00\\\\x00t\\\\x04\\\\x00\\\\x00\\\\x00tinyR0\\\\x00\\\\x00\\\\x00R;\\\\x01\\\\x00\\\\x00R\\\\x19\\\\x00\\\\x00\\\\x00(\\\\x03\\\\x00\\\\x00\\\\x00R9\\\\x01\\\\x00\\\\x00R\\\\x1f\\\\x01\\\\x00\\\\x00R\\\\xcf\\\\x00\\\\x00\\\\x00(\\\\x00\\\\x00\\\\x00\\\\x00(\\\\x00\\\\x00\\\\x00\\\\x00s,\\\\x00\\\\x00\\\\x00lib/python2.7/site-packages/numpy/ma/core.pyR=\\\\x01\\\\x00\\\\x00L\\\\x03\\\\x00\\\\x00s\\\\x08\\\\x00\\\\x00\\\\x00\\\\x00\\\\x04\\\\x0f\\\\x01\\\\x18\\\\x02\\\\x1f\\\\x01N(\\\\x06\\\\x00\\\\x00\\\\x00R\\\\xc2\\\\x00\\\\x00\\\\x00R\\\\xc3\\\\x00\\\\x00\\\\x00R\\\\xce\\\\x00\\\\x00\\\\x00R\\\\xc4\\\\x00\\\\x00\\\\x00R:\\\\x01\\\\x00\\\\x00R=\\\\x01\\\\x00\\\\x00(\\\\x00\\\\x00\\\\x00\\\\x00(\\\\x00\\\\x00\\\\x00\\\\x00(\\\\x00\\\\x00\\\\x00\\\\x00s,\\\\x00\\\\x00\\\\x00lib/python2.7/site-packages/numpy/ma/core.pyR@\\\\x01\\\\x00\\\\x00C\\\\x03\\\\x00\\\\x00s\\\\x06\\\\x00\\\\x00\\\\x00\\\\x06\\\\x04\\\\x06\\\\x02\\\\x0c\\\\x03t\\\\x0e\\\\x00\\\\x00\\\\x00_DomainGreaterc\\\\x00\\\\x00\\\\x00\\\\x00\\\\x00\\\\x00\\\\x00\\\\x00\\\\x01\\\\x00\\\\x00\\\\x00B`\\\\x01\\\\x00s \\\\x00\\\\x00\\\\x00e\\\\x00\\\\x00Z\\\\x01\\\\x00d\\\\x00\\\\x00Z\\\\x02\\\\x00d\\\\x01\\\\x00\\\\x84\\\\x00\\\\x00Z\\\\x03\\\\x00d\\\\x02\\\\x00\\\\x84\\\\x00\\\\x00Z\\\\x04\\\\x00RS(\\\\x03\\\\x00\\\\x00\\\\x00s4\\\\x00\\\\x00\\\\x00\\\\n    DomainGreater(v)(x) is True where x <= v.\\\\n\\\\n    c\\\\x02\\\\x00\\\\x00\\\\x00\\\\x02\\\\x00\\\\x00\\\\x00\\\\x02\\\\x00\\\\x00\\\\x00C`\\\\x01\\\\x00s\\\\r\\\\x00\\\\x00\\\\x00|\\\\x01\\\\x00|\\\\x00\\\\x00_\\\\x00\\\\x00d\\\\x01\\\\x00S(\\\\x02\\\\x00\\\\x00\\\\x00s\\\\\\\'\\\\x00\\\\x00\\\\x00DomainGreater(v)(x) = true where x <= vN(\\\\x01\\\\x00\\\\x00\\\\x00t\\\\x0e\\\\x00\\\\x00\\\\x00critical_value(\\\\x02\\\\x00\\\\x00\\\\x00R9\\\\x01\\\\x00\\\\x00RE\\\\x01\\\\x00\\\\x00(\\\\x00\\\\x00\\\\x00\\\\x00(\\\\x00\\\\x00\\\\x00\\\\x00s,\\\\x00\\\\x00\\\\x00lib/python2.7/site-packages/numpy/ma/core.pyR:\\\\x01\\\\x00\\\\x00]\\\\x03\\\\x00\\\\x00s\\\\x02\\\\x00\\\\x00\\\\x00\\\\x00\\\\x02c\\\\x02\\\\x00\\\\x00\\\\x00\\\\x02\\\\x00\\\\x00\\\\x00\\\\x03\\\\x00\\\\x00\\\\x00C`\\\\x01\\\\x00s\\\\x13\\\\x00\\\\x00\\\\x00t\\\\x00\\\\x00j\\\\x01\\\\x00|\\\\x01\\\\x00|\\\\x00\\\\x00j\\\\x02\\\\x00\\\\x83\\\\x02\\\\x00S(\\\\x01\\\\x00\\\\x00\\\\x00s\\\\x1b\\\\x00\\\\x00\\\\x00Executes the call behavior.(\\\\x03\\\\x00\\\\x00\\\\x00R;\\\\x01\\\\x00\\\\x00Rk\\\\x00\\\\x00\\\\x00RE\\\\x01\\\\x00\\\\x00(\\\\x02\\\\x00\\\\x00\\\\x00R9\\\\x01\\\\x00\\\\x00R<\\\\x01\\\\x00\\\\x00(\\\\x00\\\\x00\\\\x00\\\\x00(\\\\x00\\\\x00\\\\x00\\\\x00s,\\\\x00\\\\x00\\\\x00lib/python2.7/site-packages/numpy/ma/core.pyR=\\\\x01\\\\x00\\\\x00a\\\\x03\\\\x00\\\\x00s\\\\x02\\\\x00\\\\x00\\\\x00\\\\x00\\\\x02(\\\\x05\\\\x00\\\\x00\\\\x00R\\\\xc2\\\\x00\\\\x00\\\\x00R\\\\xc3\\\\x00\\\\x00\\\\x00R\\\\xce\\\\x00\\\\x00\\\\x00R:\\\\x01\\\\x00\\\\x00R=\\\\x01\\\\x00\\\\x00(\\\\x00\\\\x00\\\\x00\\\\x00(\\\\x00\\\\x00\\\\x00\\\\x00(\\\\x00\\\\x00\\\\x00\\\\x00s,\\\\x00\\\\x00\\\\x00lib/python2.7/site-packages/numpy/ma/core.pyRD\\\\x01\\\\x00\\\\x00W\\\\x03\\\\x00\\\\x00s\\\\x06\\\\x00\\\\x00\\\\x00\\\\x06\\\\x04\\\\x06\\\\x02\\\\t\\\\x04t\\\\x13\\\\x00\\\\x00\\\\x00_DomainGreaterEqualc\\\\x00\\\\x00\\\\x00\\\\x00\\\\x00\\\\x00\\\\x00\\\\x00\\\\x01\\\\x00\\\\x00\\\\x00B`\\\\x01\\\\x00s \\\\x00\\\\x00\\\\x00e\\\\x00\\\\x00Z\\\\x01\\\\x00d\\\\x00\\\\x00Z\\\\x02\\\\x00d\\\\x01\\\\x00\\\\x84\\\\x00\\\\x00Z\\\\x03\\\\x00d\\\\x02\\\\x00\\\\x84\\\\x00\\\\x00Z\\\\x04\\\\x00RS(\\\\x03\\\\x00\\\\x00\\\\x00s8\\\\x00\\\\x00\\\\x00\\\\n    DomainGreaterEqual(v)(x) is True where x < v.\\\\n\\\\n    c\\\\x02\\\\x00\\\\x00\\\\x00\\\\x02\\\\x00\\\\x00\\\\x00\\\\x02\\\\x00\\\\x00\\\\x00C`\\\\x01\\\\x00s\\\\r\\\\x00\\\\x00\\\\x00|\\\\x01\\\\x00|\\\\x00\\\\x00_\\\\x00\\\\x00d\\\\x01\\\\x00S(\\\\x02\\\\x00\\\\x00\\\\x00s+\\\\x00\\\\x00\\\\x00DomainGreaterEqual(v)(x) = true where x < vN(\\\\x01\\\\x00\\\\x00\\\\x00RE\\\\x01\\\\x00\\\\x00(\\\\x02\\\\x00\\\\x00\\\\x00R9\\\\x01\\\\x00\\\\x00RE\\\\x01\\\\x00\\\\x00(\\\\x00\\\\x00\\\\x00\\\\x00(\\\\x00\\\\x00\\\\x00\\\\x00s,\\\\x00\\\\x00\\\\x00lib/python2.7/site-packages/numpy/ma/core.pyR:\\\\x01\\\\x00\\\\x00l\\\\x03\\\\x00\\\\x00s\\\\x02\\\\x00\\\\x00\\\\x00\\\\x00\\\\x02c\\\\x02\\\\x00\\\\x00\\\\x00\\\\x02\\\\x00\\\\x00\\\\x00\\\\x03\\\\x00\\\\x00\\\\x00C`\\\\x01\\\\x00s\\\\x13\\\\x00\\\\x00\\\\x00t\\\\x00\\\\x00j\\\\x01\\\\x00|\\\\x01\\\\x00|\\\\x00\\\\x00j\\\\x02\\\\x00\\\\x83\\\\x02\\\\x00S(\\\\x01\\\\x00\\\\x00\\\\x00s\\\\x1b\\\\x00\\\\x00\\\\x00Executes the call behavior.(\\\\x03\\\\x00\\\\x00\\\\x00R;\\\\x01\\\\x00\\\\x00Rj\\\\x00\\\\x00\\\\x00RE\\\\x01\\\\x00\\\\x00(\\\\x02\\\\x00\\\\x00\\\\x00R9\\\\x01\\\\x00\\\\x00R<\\\\x01\\\\x00\\\\x00(\\\\x00\\\\x00\\\\x00\\\\x00(\\\\x00\\\\x00\\\\x00\\\\x00s,\\\\x00\\\\x00\\\\x00lib/python2.7/site-packages/numpy/ma/core.pyR=\\\\x01\\\\x00\\\\x00p\\\\x03\\\\x00\\\\x00s\\\\x02\\\\x00\\\\x00\\\\x00\\\\x00\\\\x02(\\\\x05\\\\x00\\\\x00\\\\x00R\\\\xc2\\\\x00\\\\x00\\\\x00R\\\\xc3\\\\x00\\\\x00\\\\x00R\\\\xce\\\\x00\\\\x00\\\\x00R:\\\\x01\\\\x00\\\\x00R=\\\\x01\\\\x00\\\\x00(\\\\x00\\\\x00\\\\x00\\\\x00(\\\\x00\\\\x00\\\\x00\\\\x00(\\\\x00\\\\x00\\\\x00\\\\x00s,\\\\x00\\\\x00\\\\x00lib/python2.7/site-packages/numpy/ma/core.pyRF\\\\x01\\\\x00\\\\x00f\\\\x03\\\\x00\\\\x00s\\\\x06\\\\x00\\\\x00\\\\x00\\\\x06\\\\x04\\\\x06\\\\x02\\\\t\\\\x04t\\\\x15\\\\x00\\\\x00\\\\x00_MaskedUnaryOperationc\\\\x00\\\\x00\\\\x00\\\\x00\\\\x00\\\\x00\\\\x00\\\\x00\\\\x03\\\\x00\\\\x00\\\\x00B`\\\\x01\\\\x00s/\\\\x00\\\\x00\\\\x00e\\\\x00\\\\x00Z\\\\x01\\\\x00d\\\\x00\\\\x00Z\\\\x02\\\\x00d\\\\x01\\\\x00d\\\\x05\\\\x00d\\\\x02\\\\x00\\\\x84\\\\x02\\\\x00Z\\\\x04\\\\x00d\\\\x03\\\\x00\\\\x84\\\\x00\\\\x00Z\\\\x05\\\\x00d\\\\x04\\\\x00\\\\x84\\\\x00\\\\x00Z\\\\x06\\\\x00RS(\\\\x06\\\\x00\\\\x00\\\\x00s\\\\xc8\\\\x01\\\\x00\\\\x00\\\\n    Defines masked version of unary operations, where invalid values are\\\\n    pre-masked.\\\\n\\\\n    Parameters\\\\n    ----------\\\\n    mufunc : callable\\\\n        The function for which to define a masked version. Made available\\\\n        as ``_MaskedUnaryOperation.f``.\\\\n    fill : scalar, optional\\\\n        Filling value, default is 0.\\\\n    domain : class instance\\\\n        Domain for the function. Should be one of the ``_Domain*``\\\\n        classes. Default is None.\\\\n\\\\n    i\\\\x00\\\\x00\\\\x00\\\\x00c\\\\x04\\\\x00\\\\x00\\\\x00\\\\x04\\\\x00\\\\x00\\\\x00\\\\x05\\\\x00\\\\x00\\\\x00C`\\\\x01\\\\x00si\\\\x00\\\\x00\\\\x00|\\\\x01\\\\x00|\\\\x00\\\\x00_\\\\x00\\\\x00|\\\\x02\\\\x00|\\\\x00\\\\x00_\\\\x01\\\\x00|\\\\x03\\\\x00|\\\\x00\\\\x00_\\\\x02\\\\x00t\\\\x03\\\\x00|\\\\x01\\\\x00d\\\\x01\\\\x00t\\\\x04\\\\x00|\\\\x01\\\\x00\\\\x83\\\\x01\\\\x00\\\\x83\\\\x03\\\\x00|\\\\x00\\\\x00_\\\\x05\\\\x00t\\\\x03\\\\x00|\\\\x01\\\\x00d\\\\x02\\\\x00t\\\\x04\\\\x00|\\\\x01\\\\x00\\\\x83\\\\x01\\\\x00\\\\x83\\\\x03\\\\x00|\\\\x00\\\\x00_\\\\x06\\\\x00|\\\\x03\\\\x00t\\\\x07\\\\x00|\\\\x01\\\\x00<|\\\\x02\\\\x00t\\\\x08\\\\x00|\\\\x01\\\\x00<d\\\\x00\\\\x00S(\\\\x03\\\\x00\\\\x00\\\\x00NR\\\\xce\\\\x00\\\\x00\\\\x00R\\\\xc2\\\\x00\\\\x00\\\\x00(\\\\t\\\\x00\\\\x00\\\\x00R\\\\xd1\\\\x00\\\\x00\\\\x00t\\\\x04\\\\x00\\\\x00\\\\x00fillt\\\\x06\\\\x00\\\\x00\\\\x00domaint\\\\x07\\\\x00\\\\x00\\\\x00getattrR\\\\xf3\\\\x00\\\\x00\\\\x00R\\\\xce\\\\x00\\\\x00\\\\x00R\\\\xc2\\\\x00\\\\x00\\\\x00t\\\\x0c\\\\x00\\\\x00\\\\x00ufunc_domaint\\\\x0b\\\\x00\\\\x00\\\\x00ufunc_fills(\\\\x04\\\\x00\\\\x00\\\\x00R9\\\\x01\\\\x00\\\\x00t\\\\x06\\\\x00\\\\x00\\\\x00mufuncRH\\\\x01\\\\x00\\\\x00RI\\\\x01\\\\x00\\\\x00(\\\\x00\\\\x00\\\\x00\\\\x00(\\\\x00\\\\x00\\\\x00\\\\x00s,\\\\x00\\\\x00\\\\x00lib/python2.7/site-packages/numpy/ma/core.pyR:\\\\x01\\\\x00\\\\x00\\\\x87\\\\x03\\\\x00\\\\x00s\\\\x0e\\\\x00\\\\x00\\\\x00\\\\x00\\\\x01\\\\t\\\\x01\\\\t\\\\x01\\\\t\\\\x01\\\\x1b\\\\x01\\\\x1b\\\\x01\\\\n\\\\x01c\\\\x02\\\\x00\\\\x00\\\\x00\\\\x08\\\\x00\\\\x00\\\\x00\\\\x08\\\\x00\\\\x00\\\\x00O`\\\\x01\\\\x00s)\\\\x01\\\\x00\\\\x00t\\\\x00\\\\x00|\\\\x01\\\\x00\\\\x83\\\\x01\\\\x00}\\\\x04\\\\x00|\\\\x00\\\\x00j\\\\x01\\\\x00d\\\\x04\\\\x00k\\\\t\\\\x00r\\\\x85\\\\x00t\\\\x03\\\\x00j\\\\x04\\\\x00d\\\\x01\\\\x00d\\\\x02\\\\x00d\\\\x03\\\\x00d\\\\x02\\\\x00\\\\x83\\\\x00\\\\x02\\\\x8f\\\\x1a\\\\x00\\\\x01|\\\\x00\\\\x00j\\\\x05\\\\x00|\\\\x04\\\\x00|\\\\x02\\\\x00|\\\\x03\\\\x00\\\\x8e\\\\x01\\\\x00}\\\\x05\\\\x00Wd\\\\x04\\\\x00QXt\\\\x06\\\\x00j\\\\x07\\\\x00|\\\\x05\\\\x00\\\\x83\\\\x01\\\\x00\\\\x0f}\\\\x06\\\\x00|\\\\x06\\\\x00|\\\\x00\\\\x00j\\\\x01\\\\x00|\\\\x04\\\\x00\\\\x83\\\\x01\\\\x00O}\\\\x06\\\\x00|\\\\x06\\\\x00t\\\\x08\\\\x00|\\\\x01\\\\x00\\\\x83\\\\x01\\\\x00O}\\\\x06\\\\x00n!\\\\x00|\\\\x00\\\\x00j\\\\x05\\\\x00|\\\\x04\\\\x00|\\\\x02\\\\x00|\\\\x03\\\\x00\\\\x8e\\\\x01\\\\x00}\\\\x05\\\\x00t\\\\x08\\\\x00|\\\\x01\\\\x00\\\\x83\\\\x01\\\\x00}\\\\x06\\\\x00|\\\\x05\\\\x00j\\\\t\\\\x00s\\\\xbd\\\\x00|\\\\x06\\\\x00r\\\\xb9\\\\x00t\\\\n\\\\x00S|\\\\x05\\\\x00S|\\\\x06\\\\x00t\\\\x0b\\\\x00k\\\\t\\\\x00r\\\\xfa\\\\x00y\\\\x1a\\\\x00t\\\\x03\\\\x00j\\\\x0c\\\\x00|\\\\x05\\\\x00|\\\\x04\\\\x00d\\\\x05\\\\x00|\\\\x06\\\\x00\\\\x83\\\\x02\\\\x01\\\\x01Wq\\\\xfa\\\\x00\\\\x04t\\\\r\\\\x00k\\\\n\\\\x00r\\\\xf6\\\\x00\\\\x01\\\\x01\\\\x01q\\\\xfa\\\\x00Xn\\\\x00\\\\x00|\\\\x05\\\\x00j\\\\x0e\\\\x00t\\\\x0f\\\\x00|\\\\x01\\\\x00\\\\x83\\\\x01\\\\x00\\\\x83\\\\x01\\\\x00}\\\\x07\\\\x00|\\\\x06\\\\x00|\\\\x07\\\\x00_\\\\x10\\\\x00|\\\\x07\\\\x00j\\\\x11\\\\x00|\\\\x01\\\\x00\\\\x83\\\\x01\\\\x00\\\\x01|\\\\x07\\\\x00S(\\\\x06\\\\x00\\\\x00\\\\x00s-\\\\x00\\\\x00\\\\x00\\\\n        Execute the call behavior.\\\\n\\\\n        RF\\\\x00\\\\x00\\\\x00t\\\\x06\\\\x00\\\\x00\\\\x00ignoreR7\\\\x01\\\\x00\\\\x00NR\\\\xbf\\\\x00\\\\x00\\\\x00(\\\\x12\\\\x00\\\\x00\\\\x00RX\\\\x00\\\\x00\\\\x00RI\\\\x01\\\\x00\\\\x00R\\\\xc4\\\\x00\\\\x00\\\\x00R\\\\xee\\\\x00\\\\x00\\\\x00t\\\\x08\\\\x00\\\\x00\\\\x00errstateR\\\\xd1\\\\x00\\\\x00\\\\x00R;\\\\x01\\\\x00\\\\x00R5\\\\x01\\\\x00\\\\x00RY\\\\x00\\\\x00\\\\x00R\\\\x93\\\\x00\\\\x00\\\\x00Ry\\\\x00\\\\x00\\\\x00R\\\\x95\\\\x00\\\\x00\\\\x00t\\\\x06\\\\x00\\\\x00\\\\x00copytoR\\\\xca\\\\x00\\\\x00\\\\x00R1\\\\x01\\\\x00\\\\x00R-\\\\x01\\\\x00\\\\x00R6\\\\x01\\\\x00\\\\x00t\\\\x0c\\\\x00\\\\x00\\\\x00_update_from(\\\\x08\\\\x00\\\\x00\\\\x00R9\\\\x01\\\\x00\\\\x00R\\\\x1f\\\\x01\\\\x00\\\\x00t\\\\x04\\\\x00\\\\x00\\\\x00argst\\\\x06\\\\x00\\\\x00\\\\x00kwargst\\\\x01\\\\x00\\\\x00\\\\x00dR \\\\x01\\\\x00\\\\x00R\\\\xde\\\\x00\\\\x00\\\\x00t\\\\r\\\\x00\\\\x00\\\\x00masked_result(\\\\x00\\\\x00\\\\x00\\\\x00(\\\\x00\\\\x00\\\\x00\\\\x00s,\\\\x00\\\\x00\\\\x00lib/python2.7/site-packages/numpy/ma/core.pyR=\\\\x01\\\\x00\\\\x00\\\\x90\\\\x03\\\\x00\\\\x00s,\\\\x00\\\\x00\\\\x00\\\\x00\\\\x05\\\\x0c\\\\x02\\\\x0f\\\\x02\\\\x19\\\\x01\\\\x1b\\\\x02\\\\x10\\\\x01\\\\x13\\\\x01\\\\x13\\\\x04\\\\x15\\\\x01\\\\x0c\\\\x02\\\\t\\\\x02\\\\x06\\\\x01\\\\x04\\\\x01\\\\x04\\\\x02\\\\x0c\\\\x08\\\\x03\\\\x01\\\\x1a\\\\x01\\\\r\\\\x01\\\\x07\\\\x02\\\\x15\\\\x01\\\\t\\\\x01\\\\r\\\\x01c\\\\x01\\\\x00\\\\x00\\\\x00\\\\x01\\\\x00\\\\x00\\\\x00\\\\x03\\\\x00\\\\x00\\\\x00C`\\\\x01\\\\x00s\\\\x11\\\\x00\\\\x00\\\\x00d\\\\x01\\\\x00t\\\\x00\\\\x00|\\\\x00\\\\x00j\\\\x01\\\\x00\\\\x83\\\\x01\\\\x00\\\\x16S(\\\\x02\\\\x00\\\\x00\\\\x00Ns1\\\\x00\\\\x00\\\\x00Masked version of %s. [Invalid values are masked](\\\\x02\\\\x00\\\\x00\\\\x00R\\\\xf3\\\\x00\\\\x00\\\\x00R\\\\xd1\\\\x00\\\\x00\\\\x00(\\\\x01\\\\x00\\\\x00\\\\x00R9\\\\x01\\\\x00\\\\x00(\\\\x00\\\\x00\\\\x00\\\\x00(\\\\x00\\\\x00\\\\x00\\\\x00s,\\\\x00\\\\x00\\\\x00lib/python2.7/site-packages/numpy/ma/core.pyt\\\\x07\\\\x00\\\\x00\\\\x00__str__\\\\xbd\\\\x03\\\\x00\\\\x00s\\\\x02\\\\x00\\\\x00\\\\x00\\\\x00\\\\x01N(\\\\x07\\\\x00\\\\x00\\\\x00R\\\\xc2\\\\x00\\\\x00\\\\x00R\\\\xc3\\\\x00\\\\x00\\\\x00R\\\\xce\\\\x00\\\\x00\\\\x00R\\\\xc4\\\\x00\\\\x00\\\\x00R:\\\\x01\\\\x00\\\\x00R=\\\\x01\\\\x00\\\\x00RV\\\\x01\\\\x00\\\\x00(\\\\x00\\\\x00\\\\x00\\\\x00(\\\\x00\\\\x00\\\\x00\\\\x00(\\\\x00\\\\x00\\\\x00\\\\x00s,\\\\x00\\\\x00\\\\x00lib/python2.7/site-packages/numpy/ma/core.pyRG\\\\x01\\\\x00\\\\x00u\\\\x03\\\\x00\\\\x00s\\\\x08\\\\x00\\\\x00\\\\x00\\\\x06\\\\x10\\\\x06\\\\x02\\\\x0f\\\\t\\\\t-t\\\\x16\\\\x00\\\\x00\\\\x00_MaskedBinaryOperationc\\\\x00\\\\x00\\\\x00\\\\x00\\\\x00\\\\x00\\\\x00\\\\x00\\\\x03\\\\x00\\\\x00\\\\x00B`\\\\x01\\\\x00sS\\\\x00\\\\x00\\\\x00e\\\\x00\\\\x00Z\\\\x01\\\\x00d\\\\x00\\\\x00Z\\\\x02\\\\x00d\\\\x01\\\\x00d\\\\x01\\\\x00d\\\\x02\\\\x00\\\\x84\\\\x02\\\\x00Z\\\\x03\\\\x00d\\\\x03\\\\x00\\\\x84\\\\x00\\\\x00Z\\\\x04\\\\x00d\\\\x01\\\\x00d\\\\x08\\\\x00d\\\\x04\\\\x00\\\\x84\\\\x02\\\\x00Z\\\\x06\\\\x00d\\\\x05\\\\x00\\\\x84\\\\x00\\\\x00Z\\\\x07\\\\x00d\\\\x01\\\\x00d\\\\x06\\\\x00\\\\x84\\\\x01\\\\x00Z\\\\x08\\\\x00d\\\\x07\\\\x00\\\\x84\\\\x00\\\\x00Z\\\\t\\\\x00RS(\\\\t\\\\x00\\\\x00\\\\x00sC\\\\x02\\\\x00\\\\x00\\\\n    Define masked version of binary operations, where invalid\\\\n    values are pre-masked.\\\\n\\\\n    Parameters\\\\n    ----------\\\\n    mbfunc : function\\\\n        The function for which to define a masked version. Made available\\\\n        as ``_MaskedBinaryOperation.f``.\\\\n    domain : class instance\\\\n        Default domain for the function. Should be one of the ``_Domain*``\\\\n        classes. Default is None.\\\\n    fillx : scalar, optional\\\\n        Filling value for the first argument, default is 0.\\\\n    filly : scalar, optional\\\\n        Filling value for the second argument, default is 0.\\\\n\\\\n    i\\\\x00\\\\x00\\\\x00\\\\x00c\\\\x04\\\\x00\\\\x00\\\\x00\\\\x04\\\\x00\\\\x00\\\\x00\\\\x05\\\\x00\\\\x00\\\\x00C`\\\\x01\\\\x00so\\\\x00\\\\x00\\\\x00|\\\\x01\\\\x00|\\\\x00\\\\x00_\\\\x00\\\\x00|\\\\x02\\\\x00|\\\\x00\\\\x00_\\\\x01\\\\x00|\\\\x03\\\\x00|\\\\x00\\\\x00_\\\\x02\\\\x00t\\\\x03\\\\x00|\\\\x01\\\\x00d\\\\x01\\\\x00t\\\\x04\\\\x00|\\\\x01\\\\x00\\\\x83\\\\x01\\\\x00\\\\x83\\\\x03\\\\x00|\\\\x00\\\\x00_\\\\x05\\\\x00t\\\\x03\\\\x00|\\\\x01\\\\x00d\\\\x02\\\\x00t\\\\x04\\\\x00|\\\\x01\\\\x00\\\\x83\\\\x01\\\\x00\\\\x83\\\\x03\\\\x00|\\\\x00\\\\x00_\\\\x06\\\\x00d\\\\x03\\\\x00t\\\\x08\\\\x00|\\\\x01\\\\x00<|\\\\x02\\\\x00|\\\\x03\\\\x00f\\\\x02\\\\x00t\\\\t\\\\x00|\\\\x01\\\\x00<d\\\\x03\\\\x00S(\\\\x04\\\\x00\\\\x00\\\\x00sr\\\\x00\\\\x00\\\\x00\\\\n        abfunc(fillx, filly) must be defined.\\\\n\\\\n        abfunc(x, filly) = x for all x to enable reduce.\\\\n\\\\n        R\\\\xce\\\\x00\\\\x00\\\\x00R\\\\xc2\\\\x00\\\\x00\\\\x00N(\\\\n\\\\x00\\\\x00\\\\x00R\\\\xd1\\\\x00\\\\x00\\\\x00t\\\\x05\\\\x00\\\\x00\\\\x00fillxt\\\\x05\\\\x00\\\\x00\\\\x00fillyRJ\\\\x01\\\\x00\\\\x00R\\\\xf3\\\\x00\\\\x00\\\\x00R\\\\xce\\\\x00\\\\x00\\\\x00R\\\\xc2\\\\x00\\\\x00\\\\x00R\\\\xc4\\\\x00\\\\x00\\\\x00RK\\\\x01\\\\x00\\\\x00RL\\\\x01\\\\x00\\\\x00(\\\\x04\\\\x00\\\\x00\\\\x00R9\\\\x01\\\\x00\\\\x00t\\\\x06\\\\x00\\\\x00\\\\x00mbfuncRX\\\\x01\\\\x00\\\\x00RY\\\\x01\\\\x00\\\\x00(\\\\x00\\\\x00\\\\x00\\\\x00(\\\\x00\\\\x00\\\\x00\\\\x00s,\\\\x00\\\\x00\\\\x00lib/python2.7/site-packages/numpy/ma/core.pyR:\\\\x01\\\\x00\\\\x00\\\\xd5\\\\x03\\\\x00\\\\x00s\\\\x0e\\\\x00\\\\x00\\\\x00\\\\x00\\\\x07\\\\t\\\\x01\\\\t\\\\x01\\\\t\\\\x01\\\\x1b\\\\x01\\\\x1b\\\\x01\\\\n\\\\x01c\\\\x03\\\\x00\\\\x00\\\\x00\\\\r\\\\x00\\\\x00\\\\x00\\\\t\\\\x00\\\\x00\\\\x00O`\\\\x01\\\\x00s\\\\xe4\\\\x01\\\\x00\\\\x00t\\\\x00\\\\x00|\\\\x01\\\\x00\\\\x83\\\\x01\\\\x00t\\\\x00\\\\x00|\\\\x02\\\\x00\\\\x83\\\\x01\\\\x00\\\\x02}\\\\x05\\\\x00}\\\\x06\\\\x00t\\\\x01\\\\x00j\\\\x02\\\\x00\\\\x83\\\\x00\\\\x00\\\\x8f3\\\\x00\\\\x01t\\\\x01\\\\x00j\\\\x03\\\\x00d\\\\x01\\\\x00d\\\\x02\\\\x00d\\\\x03\\\\x00d\\\\x02\\\\x00\\\\x83\\\\x00\\\\x02\\\\x01|\\\\x00\\\\x00j\\\\x04\\\\x00|\\\\x05\\\\x00|\\\\x06\\\\x00|\\\\x03\\\\x00|\\\\x04\\\\x00\\\\x8e\\\\x02\\\\x00}\\\\x07\\\\x00Wd\\\\x04\\\\x00QXt\\\\x05\\\\x00|\\\\x01\\\\x00\\\\x83\\\\x01\\\\x00t\\\\x05\\\\x00|\\\\x02\\\\x00\\\\x83\\\\x01\\\\x00\\\\x02}\\\\x08\\\\x00}\\\\t\\\\x00|\\\\x08\\\\x00t\\\\x06\\\\x00k\\\\x08\\\\x00r\\\\xaf\\\\x00|\\\\t\\\\x00t\\\\x06\\\\x00k\\\\x08\\\\x00r\\\\x94\\\\x00t\\\\x06\\\\x00}\\\\n\\\\x00q\\\\xe8\\\\x00t\\\\x07\\\\x00j\\\\x08\\\\x00t\\\\t\\\\x00|\\\\x01\\\\x00\\\\x83\\\\x01\\\\x00|\\\\t\\\\x00\\\\x83\\\\x02\\\\x00}\\\\n\\\\x00n9\\\\x00|\\\\t\\\\x00t\\\\x06\\\\x00k\\\\x08\\\\x00r\\\\xd6\\\\x00t\\\\x07\\\\x00j\\\\x08\\\\x00|\\\\x08\\\\x00t\\\\t\\\\x00|\\\\x02\\\\x00\\\\x83\\\\x01\\\\x00\\\\x83\\\\x02\\\\x00}\\\\n\\\\x00n\\\\x12\\\\x00t\\\\x07\\\\x00j\\\\x08\\\\x00|\\\\x08\\\\x00|\\\\t\\\\x00\\\\x83\\\\x02\\\\x00}\\\\n\\\\x00|\\\\x07\\\\x00j\\\\n\\\\x00s\\\\xff\\\\x00|\\\\n\\\\x00r\\\\xfb\\\\x00t\\\\x0b\\\\x00S|\\\\x07\\\\x00S|\\\\n\\\\x00t\\\\x06\\\\x00k\\\\t\\\\x00r\\\\x81\\\\x01|\\\\n\\\\x00j\\\\x0c\\\\x00\\\\x83\\\\x00\\\\x00r\\\\x81\\\\x01y]\\\\x00t\\\\x01\\\\x00j\\\\r\\\\x00|\\\\x07\\\\x00d\\\\x05\\\\x00d\\\\x06\\\\x00d\\\\x07\\\\x00d\\\\x08\\\\x00|\\\\n\\\\x00\\\\x83\\\\x02\\\\x02\\\\x01t\\\\x07\\\\x00j\\\\x0e\\\\x00|\\\\n\\\\x00|\\\\x05\\\\x00\\\\x83\\\\x02\\\\x00}\\\\x0b\\\\x00t\\\\x01\\\\x00j\\\\x0f\\\\x00|\\\\x0b\\\\x00j\\\\x10\\\\x00|\\\\x07\\\\x00j\\\\x10\\\\x00d\\\\x06\\\\x00d\\\\t\\\\x00\\\\x83\\\\x02\\\\x01rs\\\\x01|\\\\x07\\\\x00|\\\\x0b\\\\x007}\\\\x07\\\\x00n\\\\x00\\\\x00Wq\\\\x81\\\\x01\\\\x01\\\\x01\\\\x01q\\\\x81\\\\x01Xn\\\\x00\\\\x00|\\\\x07\\\\x00j\\\\x11\\\\x00t\\\\x12\\\\x00|\\\\x01\\\\x00|\\\\x02\\\\x00\\\\x83\\\\x02\\\\x00\\\\x83\\\\x01\\\\x00}\\\\x0c\\\\x00|\\\\n\\\\x00|\\\\x0c\\\\x00_\\\\x13\\\\x00t\\\\x14\\\\x00|\\\\x01\\\\x00t\\\\x15\\\\x00\\\\x83\\\\x02\\\\x00r\\\\xc1\\\\x01|\\\\x0c\\\\x00j\\\\x16\\\\x00|\\\\x01\\\\x00\\\\x83\\\\x01\\\\x00\\\\x01n\\\\x1f\\\\x00t\\\\x14\\\\x00|\\\\x02\\\\x00t\\\\x15\\\\x00\\\\x83\\\\x02\\\\x00r\\\\xe0\\\\x01|\\\\x0c\\\\x00j\\\\x16\\\\x00|\\\\x02\\\\x00\\\\x83\\\\x01\\\\x00\\\\x01n\\\\x00\\\\x00|\\\\x0c\\\\x00S(\\\\n\\\\x00\\\\x00\\\\x00s-\\\\x00\\\\x00\\\\x00\\\\n        Execute the call behavior.\\\\n\\\\n        RF\\\\x00\\\\x00\\\\x00RN\\\\x01\\\\x00\\\\x00R7\\\\x01\\\\x00\\\\x00Ni\\\\x00\\\\x00\\\\x00\\\\x00t\\\\x07\\\\x00\\\\x00\\\\x00castingt\\\\x06\\\\x00\\\\x00\\\\x00unsafeR\\\\xbf\\\\x00\\\\x00\\\\x00t\\\\x04\\\\x00\\\\x00\\\\x00safe(\\\\x17\\\\x00\\\\x00\\\\x00RX\\\\x00\\\\x00\\\\x00R\\\\xee\\\\x00\\\\x00\\\\x00RO\\\\x01\\\\x00\\\\x00t\\\\x06\\\\x00\\\\x00\\\\x00seterrR\\\\xd1\\\\x00\\\\x00\\\\x00RY\\\\x00\\\\x00\\\\x00R\\\\x95\\\\x00\\\\x00\\\\x00R;\\\\x01\\\\x00\\\\x00Rs\\\\x00\\\\x00\\\\x00RZ\\\\x00\\\\x00\\\\x00R\\\\x93\\\\x00\\\\x00\\\\x00Ry\\\\x00\\\\x00\\\\x00R!\\\\x00\\\\x00\\\\x00RP\\\\x01\\\\x00\\\\x00R\\\\x91\\\\x00\\\\x00\\\\x00t\\\\x08\\\\x00\\\\x00\\\\x00can_castR\\\\xe9\\\\x00\\\\x00\\\\x00R1\\\\x01\\\\x00\\\\x00R-\\\\x01\\\\x00\\\\x00R6\\\\x01\\\\x00\\\\x00R\\\\xed\\\\x00\\\\x00\\\\x00R\\\\x17\\\\x00\\\\x00\\\\x00RQ\\\\x01\\\\x00\\\\x00(\\\\r\\\\x00\\\\x00\\\\x00R9\\\\x01\\\\x00\\\\x00R\\\\x1f\\\\x01\\\\x00\\\\x00R\\\\xcf\\\\x00\\\\x00\\\\x00RR\\\\x01\\\\x00\\\\x00RS\\\\x01\\\\x00\\\\x00t\\\\x02\\\\x00\\\\x00\\\\x00dat\\\\x02\\\\x00\\\\x00\\\\x00dbR \\\\x01\\\\x00\\\\x00t\\\\x02\\\\x00\\\\x00\\\\x00mat\\\\x02\\\\x00\\\\x00\\\\x00mbR\\\\xde\\\\x00\\\\x00\\\\x00t\\\\t\\\\x00\\\\x00\\\\x00masked_daRU\\\\x01\\\\x00\\\\x00(\\\\x00\\\\x00\\\\x00\\\\x00(\\\\x00\\\\x00\\\\x00\\\\x00s,\\\\x00\\\\x00\\\\x00lib/python2.7/site-packages/numpy/ma/core.pyR=\\\\x01\\\\x00\\\\x00\\\\xe4\\\\x03\\\\x00\\\\x00s>\\\\x00\\\\x00\\\\x00\\\\x00\\\\x06\\\\x19\\\\x02\\\\r\\\\x01\\\\x16\\\\x01\\\\x1e\\\\x02\\\\x19\\\\x01\\\\x0c\\\\x01\\\\x0c\\\\x01\\\\t\\\\x02\\\\x1b\\\\x01\\\\x0c\\\\x01\\\\x1b\\\\x02\\\\x12\\\\x03\\\\t\\\\x01\\\\x06\\\\x01\\\\x04\\\\x01\\\\x04\\\\x04\\\\x18\\\\x02\\\\x03\\\\x01\\\\x1c\\\\x02\\\\x12\\\\x02\\\\x1e\\\\x01\\\\x11\\\\x01\\\\x03\\\\x01\\\\x07\\\\x03\\\\x18\\\\x01\\\\t\\\\x01\\\\x0f\\\\x01\\\\x10\\\\x01\\\\x0f\\\\x01\\\\x10\\\\x01c\\\\x04\\\\x00\\\\x00\\\\x00\\\\n\\\\x00\\\\x00\\\\x00\\\\x05\\\\x00\\\\x00\\\\x00C`\\\\x01\\\\x00s\\\\x0e\\\\x01\\\\x00\\\\x00t\\\\x00\\\\x00|\\\\x01\\\\x00\\\\x83\\\\x01\\\\x00}\\\\x04\\\\x00t\\\\x01\\\\x00|\\\\x01\\\\x00\\\\x83\\\\x01\\\\x00}\\\\x05\\\\x00t\\\\x02\\\\x00|\\\\x01\\\\x00|\\\\x00\\\\x00j\\\\x03\\\\x00\\\\x83\\\\x02\\\\x00}\\\\x06\\\\x00|\\\\x06\\\\x00j\\\\x04\\\\x00d\\\\x04\\\\x00k\\\\x02\\\\x00ru\\\\x00|\\\\x06\\\\x00j\\\\x05\\\\x00d\\\\x01\\\\x00\\\\x83\\\\x01\\\\x00}\\\\x06\\\\x00|\\\\x05\\\\x00t\\\\x06\\\\x00k\\\\t\\\\x00ru\\\\x00t\\\\x07\\\\x00|\\\\x05\\\\x00d\\\\x02\\\\x00d\\\\x01\\\\x00\\\\x83\\\\x01\\\\x01}\\\\x05\\\\x00d\\\\x05\\\\x00|\\\\x05\\\\x00_\\\\x04\\\\x00qu\\\\x00n\\\\x00\\\\x00|\\\\x05\\\\x00t\\\\x06\\\\x00k\\\\x08\\\\x00r\\\\x9f\\\\x00|\\\\x00\\\\x00j\\\\x08\\\\x00j\\\\t\\\\x00|\\\\x06\\\\x00|\\\\x02\\\\x00\\\\x83\\\\x02\\\\x00}\\\\x07\\\\x00t\\\\x06\\\\x00}\\\\x08\\\\x00n9\\\\x00|\\\\x00\\\\x00j\\\\x08\\\\x00j\\\\t\\\\x00|\\\\x06\\\\x00|\\\\x02\\\\x00d\\\\x03\\\\x00|\\\\x03\\\\x00p\\\\xbd\\\\x00|\\\\x06\\\\x00j\\\\n\\\\x00\\\\x83\\\\x02\\\\x01}\\\\x07\\\\x00t\\\\x0b\\\\x00j\\\\x0c\\\\x00j\\\\t\\\\x00|\\\\x05\\\\x00|\\\\x02\\\\x00\\\\x83\\\\x02\\\\x00}\\\\x08\\\\x00|\\\\x07\\\\x00j\\\\x04\\\\x00s\\\\xf2\\\\x00|\\\\x08\\\\x00r\\\\xeb\\\\x00t\\\\r\\\\x00S|\\\\x07\\\\x00Sn\\\\x00\\\\x00|\\\\x07\\\\x00j\\\\x0e\\\\x00|\\\\x04\\\\x00\\\\x83\\\\x01\\\\x00}\\\\t\\\\x00|\\\\x08\\\\x00|\\\\t\\\\x00_\\\\x0f\\\\x00|\\\\t\\\\x00S(\\\\x06\\\\x00\\\\x00\\\\x00s:\\\\x00\\\\x00\\\\x00\\\\n        Reduce `target` along the given `axis`.\\\\n\\\\n        i\\\\x01\\\\x00\\\\x00\\\\x00R<\\\\x00\\\\x00\\\\x00R\\\\xe9\\\\x00\\\\x00\\\\x00(\\\\x00\\\\x00\\\\x00\\\\x00(\\\\x01\\\\x00\\\\x00\\\\x00i\\\\x01\\\\x00\\\\x00\\\\x00(\\\\x10\\\\x00\\\\x00\\\\x00R-\\\\x01\\\\x00\\\\x00RY\\\\x00\\\\x00\\\\x00RN\\\\x00\\\\x00\\\\x00RY\\\\x01\\\\x00\\\\x00R\\\\xab\\\\x00\\\\x00\\\\x00R\\\\xa5\\\\x00\\\\x00\\\\x00R\\\\x95\\\\x00\\\\x00\\\\x00Ru\\\\x00\\\\x00\\\\x00R\\\\xd1\\\\x00\\\\x00\\\\x00R\\\\x03\\\\x00\\\\x00\\\\x00R\\\\xe9\\\\x00\\\\x00\\\\x00R;\\\\x01\\\\x00\\\\x00Rq\\\\x00\\\\x00\\\\x00Ry\\\\x00\\\\x00\\\\x00R1\\\\x01\\\\x00\\\\x00R6\\\\x01\\\\x00\\\\x00(\\\\n\\\\x00\\\\x00\\\\x00R9\\\\x01\\\\x00\\\\x00t\\\\x06\\\\x00\\\\x00\\\\x00targett\\\\x04\\\\x00\\\\x00\\\\x00axisR\\\\xe9\\\\x00\\\\x00\\\\x00t\\\\x06\\\\x00\\\\x00\\\\x00tclassR\\\\xde\\\\x00\\\\x00\\\\x00t\\\\x01\\\\x00\\\\x00\\\\x00tt\\\\x02\\\\x00\\\\x00\\\\x00trt\\\\x02\\\\x00\\\\x00\\\\x00mrt\\\\t\\\\x00\\\\x00\\\\x00masked_tr(\\\\x00\\\\x00\\\\x00\\\\x00(\\\\x00\\\\x00\\\\x00\\\\x00s,\\\\x00\\\\x00\\\\x00lib/python2.7/site-packages/numpy/ma/core.pyR\\\\x03\\\\x00\\\\x00\\\\x00\\\\x18\\\\x04\\\\x00\\\\x00s(\\\\x00\\\\x00\\\\x00\\\\x00\\\\x05\\\\x0c\\\\x01\\\\x0c\\\\x01\\\\x12\\\\x01\\\\x0f\\\\x01\\\\x0f\\\\x01\\\\x0c\\\\x01\\\\x12\\\\x01\\\\x0f\\\\x02\\\\x0c\\\\x01\\\\x15\\\\x01\\\\t\\\\x02$\\\\x01\\\\x15\\\\x02\\\\t\\\\x01\\\\x06\\\\x01\\\\x04\\\\x02\\\\x07\\\\x01\\\\x0f\\\\x01\\\\t\\\\x01c\\\\x03\\\\x00\\\\x00\\\\x00\\\\n\\\\x00\\\\x00\\\\x00\\\\x05\\\\x00\\\\x00\\\\x00C`\\\\x01\\\\x00s\\\\xff\\\\x00\\\\x00\\\\x00t\\\\x00\\\\x00|\\\\x01\\\\x00\\\\x83\\\\x01\\\\x00t\\\\x00\\\\x00|\\\\x02\\\\x00\\\\x83\\\\x01\\\\x00\\\\x02}\\\\x03\\\\x00}\\\\x04\\\\x00|\\\\x00\\\\x00j\\\\x01\\\\x00j\\\\x02\\\\x00|\\\\x03\\\\x00|\\\\x04\\\\x00\\\\x83\\\\x02\\\\x00}\\\\x05\\\\x00t\\\\x03\\\\x00|\\\\x01\\\\x00\\\\x83\\\\x01\\\\x00}\\\\x06\\\\x00t\\\\x03\\\\x00|\\\\x02\\\\x00\\\\x83\\\\x01\\\\x00}\\\\x07\\\\x00|\\\\x06\\\\x00t\\\\x04\\\\x00k\\\\x08\\\\x00rg\\\\x00|\\\\x07\\\\x00t\\\\x04\\\\x00k\\\\x08\\\\x00rg\\\\x00t\\\\x04\\\\x00}\\\\x08\\\\x00n-\\\\x00t\\\\x05\\\\x00|\\\\x01\\\\x00\\\\x83\\\\x01\\\\x00}\\\\x06\\\\x00t\\\\x05\\\\x00|\\\\x02\\\\x00\\\\x83\\\\x01\\\\x00}\\\\x07\\\\x00t\\\\x06\\\\x00j\\\\x07\\\\x00j\\\\x02\\\\x00|\\\\x06\\\\x00|\\\\x07\\\\x00\\\\x83\\\\x02\\\\x00}\\\\x08\\\\x00|\\\\x08\\\\x00j\\\\x08\\\\x00\\\\x0cr\\\\xa8\\\\x00|\\\\x08\\\\x00r\\\\xa8\\\\x00t\\\\t\\\\x00S|\\\\x08\\\\x00t\\\\x04\\\\x00k\\\\t\\\\x00r\\\\xcd\\\\x00t\\\\n\\\\x00j\\\\x0b\\\\x00|\\\\x05\\\\x00|\\\\x03\\\\x00d\\\\x01\\\\x00|\\\\x08\\\\x00\\\\x83\\\\x02\\\\x01\\\\x01n\\\\x00\\\\x00|\\\\x05\\\\x00j\\\\x0c\\\\x00s\\\\xda\\\\x00|\\\\x05\\\\x00S|\\\\x05\\\\x00j\\\\r\\\\x00t\\\\x0e\\\\x00|\\\\x01\\\\x00|\\\\x02\\\\x00\\\\x83\\\\x02\\\\x00\\\\x83\\\\x01\\\\x00}\\\\t\\\\x00|\\\\x08\\\\x00|\\\\t\\\\x00_\\\\x0f\\\\x00|\\\\t\\\\x00S(\\\\x02\\\\x00\\\\x00\\\\x00sO\\\\x00\\\\x00\\\\x00\\\\n        Return the function applied to the outer product of a and b.\\\\n\\\\n        R\\\\xbf\\\\x00\\\\x00\\\\x00(\\\\x10\\\\x00\\\\x00\\\\x00RX\\\\x00\\\\x00\\\\x00R\\\\xd1\\\\x00\\\\x00\\\\x00R\\\\x99\\\\x00\\\\x00\\\\x00RY\\\\x00\\\\x00\\\\x00R\\\\x95\\\\x00\\\\x00\\\\x00RZ\\\\x00\\\\x00\\\\x00R;\\\\x01\\\\x00\\\\x00Rs\\\\x00\\\\x00\\\\x00R\\\\x93\\\\x00\\\\x00\\\\x00Ry\\\\x00\\\\x00\\\\x00R\\\\xee\\\\x00\\\\x00\\\\x00RP\\\\x01\\\\x00\\\\x00R\\\\xab\\\\x00\\\\x00\\\\x00R1\\\\x01\\\\x00\\\\x00R-\\\\x01\\\\x00\\\\x00R6\\\\x01\\\\x00\\\\x00(\\\\n\\\\x00\\\\x00\\\\x00R9\\\\x01\\\\x00\\\\x00R\\\\x1f\\\\x01\\\\x00\\\\x00R\\\\xcf\\\\x00\\\\x00\\\\x00R`\\\\x01\\\\x00\\\\x00Ra\\\\x01\\\\x00\\\\x00RT\\\\x01\\\\x00\\\\x00Rb\\\\x01\\\\x00\\\\x00Rc\\\\x01\\\\x00\\\\x00R\\\\xde\\\\x00\\\\x00\\\\x00t\\\\x08\\\\x00\\\\x00\\\\x00masked_d(\\\\x00\\\\x00\\\\x00\\\\x00(\\\\x00\\\\x00\\\\x00\\\\x00s,\\\\x00\\\\x00\\\\x00lib/python2.7/site-packages/numpy/ma/core.pyR\\\\x99\\\\x00\\\\x00\\\\x006\\\\x04\\\\x00\\\\x00s$\\\\x00\\\\x00\\\\x00\\\\x00\\\\x05\\\\x19\\\\x01\\\\x15\\\\x01\\\\x0c\\\\x01\\\\x0c\\\\x01\\\\x18\\\\x01\\\\t\\\\x02\\\\x0c\\\\x01\\\\x0c\\\\x01\\\\x15\\\\x01\\\\x10\\\\x01\\\\x04\\\\x01\\\\x0c\\\\x01\\\\x19\\\\x01\\\\t\\\\x01\\\\x04\\\\x01\\\\x18\\\\x01\\\\t\\\\x01c\\\\x03\\\\x00\\\\x00\\\\x00\\\\x07\\\\x00\\\\x00\\\\x00\\\\x03\\\\x00\\\\x00\\\\x00C`\\\\x01\\\\x00sF\\\\x00\\\\x00\\\\x00t\\\\x00\\\\x00|\\\\x01\\\\x00\\\\x83\\\\x01\\\\x00}\\\\x03\\\\x00t\\\\x01\\\\x00|\\\\x01\\\\x00|\\\\x00\\\\x00j\\\\x02\\\\x00\\\\x83\\\\x02\\\\x00}\\\\x04\\\\x00|\\\\x00\\\\x00j\\\\x03\\\\x00j\\\\x04\\\\x00|\\\\x04\\\\x00|\\\\x02\\\\x00\\\\x83\\\\x02\\\\x00}\\\\x05\\\\x00|\\\\x05\\\\x00j\\\\x05\\\\x00|\\\\x03\\\\x00\\\\x83\\\\x01\\\\x00}\\\\x06\\\\x00|\\\\x06\\\\x00S(\\\\x01\\\\x00\\\\x00\\\\x00sS\\\\x00\\\\x00\\\\x00Accumulate `target` along `axis` after filling with y fill\\\\n        value.\\\\n\\\\n        (\\\\x06\\\\x00\\\\x00\\\\x00R-\\\\x01\\\\x00\\\\x00RN\\\\x00\\\\x00\\\\x00RY\\\\x01\\\\x00\\\\x00R\\\\xd1\\\\x00\\\\x00\\\\x00t\\\\n\\\\x00\\\\x00\\\\x00accumulateR1\\\\x01\\\\x00\\\\x00(\\\\x07\\\\x00\\\\x00\\\\x00R9\\\\x01\\\\x00\\\\x00Re\\\\x01\\\\x00\\\\x00Rf\\\\x01\\\\x00\\\\x00Rg\\\\x01\\\\x00\\\\x00Rh\\\\x01\\\\x00\\\\x00R \\\\x01\\\\x00\\\\x00RU\\\\x01\\\\x00\\\\x00(\\\\x00\\\\x00\\\\x00\\\\x00(\\\\x00\\\\x00\\\\x00\\\\x00s,\\\\x00\\\\x00\\\\x00lib/python2.7/site-packages/numpy/ma/core.pyRm\\\\x01\\\\x00\\\\x00O\\\\x04\\\\x00\\\\x00s\\\\n\\\\x00\\\\x00\\\\x00\\\\x00\\\\x05\\\\x0c\\\\x01\\\\x12\\\\x01\\\\x15\\\\x01\\\\x0f\\\\x01c\\\\x01\\\\x00\\\\x00\\\\x00\\\\x01\\\\x00\\\\x00\\\\x00\\\\x03\\\\x00\\\\x00\\\\x00C`\\\\x01\\\\x00s\\\\x11\\\\x00\\\\x00\\\\x00d\\\\x01\\\\x00t\\\\x00\\\\x00|\\\\x00\\\\x00j\\\\x01\\\\x00\\\\x83\\\\x01\\\\x00\\\\x17S(\\\\x02\\\\x00\\\\x00\\\\x00Ns\\\\x12\\\\x00\\\\x00\\\\x00Masked version of (\\\\x02\\\\x00\\\\x00\\\\x00R\\\\xf3\\\\x00\\\\x00\\\\x00R\\\\xd1\\\\x00\\\\x00\\\\x00(\\\\x01\\\\x00\\\\x00\\\\x00R9\\\\x01\\\\x00\\\\x00(\\\\x00\\\\x00\\\\x00\\\\x00(\\\\x00\\\\x00\\\\x00\\\\x00s,\\\\x00\\\\x00\\\\x00lib/python2.7/site-packages/numpy/ma/core.pyRV\\\\x01\\\\x00\\\\x00Z\\\\x04\\\\x00\\\\x00s\\\\x02\\\\x00\\\\x00\\\\x00\\\\x00\\\\x01N(\\\\n\\\\x00\\\\x00\\\\x00R\\\\xc2\\\\x00\\\\x00\\\\x00R\\\\xc3\\\\x00\\\\x00\\\\x00R\\\\xce\\\\x00\\\\x00\\\\x00R:\\\\x01\\\\x00\\\\x00R=\\\\x01\\\\x00\\\\x00R\\\\xc4\\\\x00\\\\x00\\\\x00R\\\\x03\\\\x00\\\\x00\\\\x00R\\\\x99\\\\x00\\\\x00\\\\x00Rm\\\\x01\\\\x00\\\\x00RV\\\\x01\\\\x00\\\\x00(\\\\x00\\\\x00\\\\x00\\\\x00(\\\\x00\\\\x00\\\\x00\\\\x00(\\\\x00\\\\x00\\\\x00\\\\x00s,\\\\x00\\\\x00\\\\x00lib/python2.7/site-packages/numpy/ma/core.pyRW\\\\x01\\\\x00\\\\x00\\\\xc1\\\\x03\\\\x00\\\\x00s\\\\x0e\\\\x00\\\\x00\\\\x00\\\\x06\\\\x12\\\\x06\\\\x02\\\\x0f\\\\x0f\\\\t4\\\\x0f\\\\x1e\\\\t\\\\x19\\\\x0c\\\\x0bt\\\\x18\\\\x00\\\\x00\\\\x00_DomainedBinaryOperationc\\\\x00\\\\x00\\\\x00\\\\x00\\\\x00\\\\x00\\\\x00\\\\x00\\\\x03\\\\x00\\\\x00\\\\x00B`\\\\x01\\\\x00s/\\\\x00\\\\x00\\\\x00e\\\\x00\\\\x00Z\\\\x01\\\\x00d\\\\x00\\\\x00Z\\\\x02\\\\x00d\\\\x01\\\\x00d\\\\x01\\\\x00d\\\\x02\\\\x00\\\\x84\\\\x02\\\\x00Z\\\\x03\\\\x00d\\\\x03\\\\x00\\\\x84\\\\x00\\\\x00Z\\\\x04\\\\x00d\\\\x04\\\\x00\\\\x84\\\\x00\\\\x00Z\\\\x05\\\\x00RS(\\\\x05\\\\x00\\\\x00\\\\x00sH\\\\x02\\\\x00\\\\x00\\\\n    Define binary operations that have a domain, like divide.\\\\n\\\\n    They have no reduce, outer or accumulate.\\\\n\\\\n    Parameters\\\\n    ----------\\\\n    mbfunc : function\\\\n        The function for which to define a masked version. Made available\\\\n        as ``_DomainedBinaryOperation.f``.\\\\n    domain : class instance\\\\n        Default domain for the function. Should be one of the ``_Domain*``\\\\n        classes.\\\\n    fillx : scalar, optional\\\\n        Filling value for the first argument, default is 0.\\\\n    filly : scalar, optional\\\\n        Filling value for the second argument, default is 0.\\\\n\\\\n    i\\\\x00\\\\x00\\\\x00\\\\x00c\\\\x05\\\\x00\\\\x00\\\\x00\\\\x05\\\\x00\\\\x00\\\\x00\\\\x05\\\\x00\\\\x00\\\\x00C`\\\\x01\\\\x00sx\\\\x00\\\\x00\\\\x00|\\\\x01\\\\x00|\\\\x00\\\\x00_\\\\x00\\\\x00|\\\\x02\\\\x00|\\\\x00\\\\x00_\\\\x01\\\\x00|\\\\x03\\\\x00|\\\\x00\\\\x00_\\\\x02\\\\x00|\\\\x04\\\\x00|\\\\x00\\\\x00_\\\\x03\\\\x00t\\\\x04\\\\x00|\\\\x01\\\\x00d\\\\x01\\\\x00t\\\\x05\\\\x00|\\\\x01\\\\x00\\\\x83\\\\x01\\\\x00\\\\x83\\\\x03\\\\x00|\\\\x00\\\\x00_\\\\x06\\\\x00t\\\\x04\\\\x00|\\\\x01\\\\x00d\\\\x02\\\\x00t\\\\x05\\\\x00|\\\\x01\\\\x00\\\\x83\\\\x01\\\\x00\\\\x83\\\\x03\\\\x00|\\\\x00\\\\x00_\\\\x07\\\\x00|\\\\x02\\\\x00t\\\\x08\\\\x00|\\\\x01\\\\x00<|\\\\x03\\\\x00|\\\\x04\\\\x00f\\\\x02\\\\x00t\\\\t\\\\x00|\\\\x01\\\\x00<d\\\\x03\\\\x00S(\\\\x04\\\\x00\\\\x00\\\\x00sj\\\\x00\\\\x00\\\\x00abfunc(fillx, filly) must be defined.\\\\n           abfunc(x, filly) = x for all x to enable reduce.\\\\n        R\\\\xce\\\\x00\\\\x00\\\\x00R\\\\xc2\\\\x00\\\\x00\\\\x00N(\\\\n\\\\x00\\\\x00\\\\x00R\\\\xd1\\\\x00\\\\x00\\\\x00RI\\\\x01\\\\x00\\\\x00RX\\\\x01\\\\x00\\\\x00RY\\\\x01\\\\x00\\\\x00RJ\\\\x01\\\\x00\\\\x00R\\\\xf3\\\\x00\\\\x00\\\\x00R\\\\xce\\\\x00\\\\x00\\\\x00R\\\\xc2\\\\x00\\\\x00\\\\x00RK\\\\x01\\\\x00\\\\x00RL\\\\x01\\\\x00\\\\x00(\\\\x05\\\\x00\\\\x00\\\\x00R9\\\\x01\\\\x00\\\\x00t\\\\x06\\\\x00\\\\x00\\\\x00dbfuncRI\\\\x01\\\\x00\\\\x00RX\\\\x01\\\\x00\\\\x00RY\\\\x01\\\\x00\\\\x00(\\\\x00\\\\x00\\\\x00\\\\x00(\\\\x00\\\\x00\\\\x00\\\\x00s,\\\\x00\\\\x00\\\\x00lib/python2.7/site-packages/numpy/ma/core.pyR:\\\\x01\\\\x00\\\\x00s\\\\x04\\\\x00\\\\x00s\\\\x10\\\\x00\\\\x00\\\\x00\\\\x00\\\\x04\\\\t\\\\x01\\\\t\\\\x01\\\\t\\\\x01\\\\t\\\\x01\\\\x1b\\\\x01\\\\x1b\\\\x01\\\\n\\\\x01c\\\\x03\\\\x00\\\\x00\\\\x00\\\\x0c\\\\x00\\\\x00\\\\x00\\\\t\\\\x00\\\\x00\\\\x00O`\\\\x01\\\\x00s\\\\xa4\\\\x01\\\\x00\\\\x00t\\\\x00\\\\x00|\\\\x01\\\\x00\\\\x83\\\\x01\\\\x00t\\\\x00\\\\x00|\\\\x02\\\\x00\\\\x83\\\\x01\\\\x00\\\\x02}\\\\x05\\\\x00}\\\\x06\\\\x00t\\\\x01\\\\x00j\\\\x02\\\\x00d\\\\x01\\\\x00d\\\\x02\\\\x00d\\\\x03\\\\x00d\\\\x02\\\\x00\\\\x83\\\\x00\\\\x02\\\\x8f\\\\x1d\\\\x00\\\\x01|\\\\x00\\\\x00j\\\\x03\\\\x00|\\\\x05\\\\x00|\\\\x06\\\\x00|\\\\x03\\\\x00|\\\\x04\\\\x00\\\\x8e\\\\x02\\\\x00}\\\\x07\\\\x00Wd\\\\x04\\\\x00QXt\\\\x04\\\\x00j\\\\x05\\\\x00|\\\\x07\\\\x00\\\\x83\\\\x01\\\\x00\\\\x0f}\\\\x08\\\\x00|\\\\x08\\\\x00t\\\\x06\\\\x00|\\\\x01\\\\x00\\\\x83\\\\x01\\\\x00O}\\\\x08\\\\x00|\\\\x08\\\\x00t\\\\x06\\\\x00|\\\\x02\\\\x00\\\\x83\\\\x01\\\\x00O}\\\\x08\\\\x00t\\\\x07\\\\x00j\\\\x08\\\\x00|\\\\x00\\\\x00j\\\\x03\\\\x00d\\\\x04\\\\x00\\\\x83\\\\x02\\\\x00}\\\\t\\\\x00|\\\\t\\\\x00d\\\\x04\\\\x00k\\\\t\\\\x00r\\\\xc0\\\\x00|\\\\x08\\\\x00t\\\\n\\\\x00|\\\\t\\\\x00|\\\\x05\\\\x00|\\\\x06\\\\x00\\\\x83\\\\x02\\\\x00t\\\\x0b\\\\x00\\\\x83\\\\x02\\\\x00O}\\\\x08\\\\x00n\\\\x00\\\\x00|\\\\x08\\\\x00j\\\\x0c\\\\x00s\\\\xda\\\\x00|\\\\x08\\\\x00r\\\\xd3\\\\x00t\\\\r\\\\x00S|\\\\x07\\\\x00Sn\\\\x00\\\\x00y]\\\\x00t\\\\x01\\\\x00j\\\\x0e\\\\x00|\\\\x07\\\\x00d\\\\x05\\\\x00d\\\\x06\\\\x00d\\\\x07\\\\x00d\\\\x08\\\\x00|\\\\x08\\\\x00\\\\x83\\\\x02\\\\x02\\\\x01t\\\\x04\\\\x00j\\\\x0f\\\\x00|\\\\x08\\\\x00|\\\\x05\\\\x00\\\\x83\\\\x02\\\\x00}\\\\n\\\\x00t\\\\x01\\\\x00j\\\\x10\\\\x00|\\\\n\\\\x00j\\\\x11\\\\x00|\\\\x07\\\\x00j\\\\x11\\\\x00d\\\\x06\\\\x00d\\\\t\\\\x00\\\\x83\\\\x02\\\\x01r6\\\\x01|\\\\x07\\\\x00|\\\\n\\\\x007}\\\\x07\\\\x00n\\\\x00\\\\x00Wn\\\\x07\\\\x00\\\\x01\\\\x01\\\\x01n\\\\x01\\\\x00X|\\\\x07\\\\x00j\\\\x12\\\\x00t\\\\x13\\\\x00|\\\\x01\\\\x00|\\\\x02\\\\x00\\\\x83\\\\x02\\\\x00\\\\x83\\\\x01\\\\x00}\\\\x0b\\\\x00|\\\\x08\\\\x00|\\\\x0b\\\\x00_\\\\x14\\\\x00t\\\\x15\\\\x00|\\\\x01\\\\x00t\\\\x16\\\\x00\\\\x83\\\\x02\\\\x00r\\\\x81\\\\x01|\\\\x0b\\\\x00j\\\\x17\\\\x00|\\\\x01\\\\x00\\\\x83\\\\x01\\\\x00\\\\x01n\\\\x1f\\\\x00t\\\\x15\\\\x00|\\\\x02\\\\x00t\\\\x16\\\\x00\\\\x83\\\\x02\\\\x00r\\\\xa0\\\\x01|\\\\x0b\\\\x00j\\\\x17\\\\x00|\\\\x02\\\\x00\\\\x83\\\\x01\\\\x00\\\\x01n\\\\x00\\\\x00|\\\\x0b\\\\x00S(\\\\n\\\\x00\\\\x00\\\\x00s\\\\x1a\\\\x00\\\\x00\\\\x00Execute the call behavior.RF\\\\x00\\\\x00\\\\x00RN\\\\x01\\\\x00\\\\x00R7\\\\x01\\\\x00\\\\x00Ni\\\\x00\\\\x00\\\\x00\\\\x00R[\\\\x01\\\\x00\\\\x00R\\\\\\\\\\\\x01\\\\x00\\\\x00R\\\\xbf\\\\x00\\\\x00\\\\x00R]\\\\x01\\\\x00\\\\x00(\\\\x18\\\\x00\\\\x00\\\\x00RX\\\\x00\\\\x00\\\\x00R\\\\xee\\\\x00\\\\x00\\\\x00RO\\\\x01\\\\x00\\\\x00R\\\\xd1\\\\x00\\\\x00\\\\x00R;\\\\x01\\\\x00\\\\x00R5\\\\x01\\\\x00\\\\x00RY\\\\x00\\\\x00\\\\x00RK\\\\x01\\\\x00\\\\x00R\\\\xf1\\\\x00\\\\x00\\\\x00R\\\\xc4\\\\x00\\\\x00\\\\x00RN\\\\x00\\\\x00\\\\x00R4\\\\x01\\\\x00\\\\x00R\\\\x93\\\\x00\\\\x00\\\\x00Ry\\\\x00\\\\x00\\\\x00RP\\\\x01\\\\x00\\\\x00R\\\\x91\\\\x00\\\\x00\\\\x00R_\\\\x01\\\\x00\\\\x00R\\\\xe9\\\\x00\\\\x00\\\\x00R1\\\\x01\\\\x00\\\\x00R-\\\\x01\\\\x00\\\\x00R6\\\\x01\\\\x00\\\\x00R\\\\xed\\\\x00\\\\x00\\\\x00R\\\\x17\\\\x00\\\\x00\\\\x00RQ\\\\x01\\\\x00\\\\x00(\\\\x0c\\\\x00\\\\x00\\\\x00R9\\\\x01\\\\x00\\\\x00R\\\\x1f\\\\x01\\\\x00\\\\x00R\\\\xcf\\\\x00\\\\x00\\\\x00RR\\\\x01\\\\x00\\\\x00RS\\\\x01\\\\x00\\\\x00R`\\\\x01\\\\x00\\\\x00Ra\\\\x01\\\\x00\\\\x00R \\\\x01\\\\x00\\\\x00R\\\\xde\\\\x00\\\\x00\\\\x00RI\\\\x01\\\\x00\\\\x00Rd\\\\x01\\\\x00\\\\x00RU\\\\x01\\\\x00\\\\x00(\\\\x00\\\\x00\\\\x00\\\\x00(\\\\x00\\\\x00\\\\x00\\\\x00s,\\\\x00\\\\x00\\\\x00lib/python2.7/site-packages/numpy/ma/core.pyR=\\\\x01\\\\x00\\\\x00\\\\x80\\\\x04\\\\x00\\\\x00s6\\\\x00\\\\x00\\\\x00\\\\x00\\\\x03\\\\x19\\\\x02\\\\x19\\\\x01\\\\x1e\\\\x02\\\\x10\\\\x01\\\\x10\\\\x01\\\\x10\\\\x02\\\\x15\\\\x01\\\\x0c\\\\x01\\\\x1f\\\\x02\\\\t\\\\x01\\\\x06\\\\x01\\\\x04\\\\x02\\\\x07\\\\x03\\\\x03\\\\x01\\\\x1c\\\\x02\\\\x12\\\\x02\\\\x1e\\\\x01\\\\x11\\\\x01\\\\x03\\\\x01\\\\x04\\\\x03\\\\x18\\\\x01\\\\t\\\\x01\\\\x0f\\\\x01\\\\x10\\\\x01\\\\x0f\\\\x01\\\\x10\\\\x01c\\\\x01\\\\x00\\\\x00\\\\x00\\\\x01\\\\x00\\\\x00\\\\x00\\\\x03\\\\x00\\\\x00\\\\x00C`\\\\x01\\\\x00s\\\\x11\\\\x00\\\\x00\\\\x00d\\\\x01\\\\x00t\\\\x00\\\\x00|\\\\x00\\\\x00j\\\\x01\\\\x00\\\\x83\\\\x01\\\\x00\\\\x17S(\\\\x02\\\\x00\\\\x00\\\\x00Ns\\\\x12\\\\x00\\\\x00\\\\x00Masked version of (\\\\x02\\\\x00\\\\x00\\\\x00R\\\\xf3\\\\x00\\\\x00\\\\x00R\\\\xd1\\\\x00\\\\x00\\\\x00(\\\\x01\\\\x00\\\\x00\\\\x00R9\\\\x01\\\\x00\\\\x00(\\\\x00\\\\x00\\\\x00\\\\x00(\\\\x00\\\\x00\\\\x00\\\\x00s,\\\\x00\\\\x00\\\\x00lib/python2.7/site-packages/numpy/ma/core.pyRV\\\\x01\\\\x00\\\\x00\\\\xaa\\\\x04\\\\x00\\\\x00s\\\\x02\\\\x00\\\\x00\\\\x00\\\\x00\\\\x01(\\\\x06\\\\x00\\\\x00\\\\x00R\\\\xc2\\\\x00\\\\x00\\\\x00R\\\\xc3\\\\x00\\\\x00\\\\x00R\\\\xce\\\\x00\\\\x00\\\\x00R:\\\\x01\\\\x00\\\\x00R=\\\\x01\\\\x00\\\\x00RV\\\\x01\\\\x00\\\\x00(\\\\x00\\\\x00\\\\x00\\\\x00(\\\\x00\\\\x00\\\\x00\\\\x00(\\\\x00\\\\x00\\\\x00\\\\x00s,\\\\x00\\\\x00\\\\x00lib/python2.7/site-packages/numpy/ma/core.pyRn\\\\x01\\\\x00\\\\x00^\\\\x04\\\\x00\\\\x00s\\\\x08\\\\x00\\\\x00\\\\x00\\\\x06\\\\x13\\\\x06\\\\x02\\\\x0f\\\\r\\\\t*g\\\\x00\\\\x00\\\\x00\\\\x00\\\\x00\\\\x00\\\\x00\\\\x00g\\\\x00\\\\x00\\\\x00\\\\x00\\\\x00\\\\x00\\\\xf0?g\\\\x0fz\\\\xf8\\\\xb7\\\\xa5\\\\x95\\\\xaa8g\\\\x00\\\\x00\\\\x00\\\\x00\\\\x00\\\\x00\\\\xf0\\\\xbfg\\\\x16V\\\\xe7\\\\x9e\\\\xaf\\\\x03\\\\xd2<i\\\\x01\\\\x00\\\\x00\\\\x00c\\\\x02\\\\x00\\\\x00\\\\x00\\\\x06\\\\x00\\\\x00\\\\x00\\\\x06\\\\x00\\\\x00\\\\x00C`\\\\x01\\\\x00s\\\\xbd\\\\x00\\\\x00\\\\x00|\\\\x00\\\\x00j\\\\x00\\\\x00ry\\\\x00g\\\\x00\\\\x00}\\\\x02\\\\x00xc\\\\x00|\\\\x00\\\\x00j\\\\x00\\\\x00D]X\\\\x00}\\\\x03\\\\x00|\\\\x00\\\\x00j\\\\x01\\\\x00|\\\\x03\\\\x00\\\\x19}\\\\x04\\\\x00t\\\\x02\\\\x00|\\\\x04\\\\x00\\\\x83\\\\x01\\\\x00d\\\\x01\\\\x00k\\\\x02\\\\x00rQ\\\\x00|\\\\x04\\\\x00d\\\\x02\\\\x00\\\\x19|\\\\x03\\\\x00f\\\\x02\\\\x00}\\\\x03\\\\x00n\\\\x00\\\\x00|\\\\x02\\\\x00j\\\\x03\\\\x00|\\\\x03\\\\x00t\\\\x04\\\\x00|\\\\x04\\\\x00d\\\\x03\\\\x00\\\\x19|\\\\x01\\\\x00\\\\x83\\\\x02\\\\x00f\\\\x02\\\\x00\\\\x83\\\\x01\\\\x00\\\\x01q\\\\x19\\\\x00W|\\\\x02\\\\x00S|\\\\x00\\\\x00j\\\\x05\\\\x00r\\\\xb5\\\\x00t\\\\x06\\\\x00|\\\\x00\\\\x00j\\\\x05\\\\x00\\\\x83\\\\x01\\\\x00}\\\\x05\\\\x00t\\\\x04\\\\x00|\\\\x00\\\\x00j\\\\x05\\\\x00d\\\\x03\\\\x00\\\\x19|\\\\x01\\\\x00\\\\x83\\\\x02\\\\x00|\\\\x05\\\\x00d\\\\x03\\\\x00<t\\\\x07\\\\x00|\\\\x05\\\\x00\\\\x83\\\\x01\\\\x00S|\\\\x01\\\\x00Sd\\\\x04\\\\x00S(\\\\x05\\\\x00\\\\x00\\\\x00s2\\\\x00\\\\x00\\\\x00Private function allowing recursion in make_descr.i\\\\x03\\\\x00\\\\x00\\\\x00i\\\\xff\\\\xff\\\\xff\\\\xffi\\\\x00\\\\x00\\\\x00\\\\x00N(\\\\x08\\\\x00\\\\x00\\\\x00R\\\\xf8\\\\x00\\\\x00\\\\x00R\\\\x13\\\\x01\\\\x00\\\\x00R\\\\x0b\\\\x01\\\\x00\\\\x00R"\\\\x00\\\\x00\\\\x00t\\\\x15\\\\x00\\\\x00\\\\x00_recursive_make_descrR\\\\xef\\\\x00\\\\x00\\\\x00t\\\\x04\\\\x00\\\\x00\\\\x00listR\\\\xfa\\\\x00\\\\x00\\\\x00(\\\\x06\\\\x00\\\\x00\\\\x00t\\\\x08\\\\x00\\\\x00\\\\x00datatypet\\\\x07\\\\x00\\\\x00\\\\x00newtypeR\\\\x14\\\\x01\\\\x00\\\\x00R\\\\xfe\\\\x00\\\\x00\\\\x00t\\\\x05\\\\x00\\\\x00\\\\x00fieldt\\\\x06\\\\x00\\\\x00\\\\x00mdescr(\\\\x00\\\\x00\\\\x00\\\\x00(\\\\x00\\\\x00\\\\x00\\\\x00s,\\\\x00\\\\x00\\\\x00lib/python2.7/site-packages/numpy/ma/core.pyRp\\\\x01\\\\x00\\\\x00\\\\x02\\\\x05\\\\x00\\\\x00s\\\\x1a\\\\x00\\\\x00\\\\x00\\\\x00\\\\x03\\\\t\\\\x01\\\\x06\\\\x01\\\\x10\\\\x01\\\\r\\\\x01\\\\x12\\\\x02\\\\x13\\\\x01$\\\\x01\\\\x04\\\\x02\\\\t\\\\x01\\\\x0f\\\\x01\\\\x1a\\\\x01\\\\n\\\\x02c\\\\x01\\\\x00\\\\x00\\\\x00\\\\x01\\\\x00\\\\x00\\\\x00\\\\x04\\\\x00\\\\x00\\\\x00C`\\\\x01\\\\x00s=\\\\x00\\\\x00\\\\x00t\\\\x00\\\\x00|\\\\x00\\\\x00t\\\\x01\\\\x00j\\\\x02\\\\x00\\\\x83\\\\x02\\\\x00s$\\\\x00t\\\\x01\\\\x00j\\\\x02\\\\x00|\\\\x00\\\\x00\\\\x83\\\\x01\\\\x00}\\\\x00\\\\x00n\\\\x00\\\\x00t\\\\x01\\\\x00j\\\\x02\\\\x00t\\\\x03\\\\x00|\\\\x00\\\\x00t\\\\x01\\\\x00j\\\\x04\\\\x00\\\\x83\\\\x02\\\\x00\\\\x83\\\\x01\\\\x00S(\\\\x01\\\\x00\\\\x00\\\\x00s\\\\xf5\\\\x02\\\\x00\\\\x00\\\\n    Construct a dtype description list from a given dtype.\\\\n\\\\n    Returns a new dtype object, with the type of all fields in `ndtype` to a\\\\n    boolean type. Field names are not altered.\\\\n\\\\n    Parameters\\\\n    ----------\\\\n    ndtype : dtype\\\\n        The dtype to convert.\\\\n\\\\n    Returns\\\\n    -------\\\\n    result : dtype\\\\n        A dtype that looks like `ndtype`, the type of all fields is boolean.\\\\n\\\\n    Examples\\\\n    --------\\\\n    >>> import numpy.ma as ma\\\\n    >>> dtype = np.dtype({\\\\\\\'names\\\\\\\':[\\\\\\\'foo\\\\\\\', \\\\\\\'bar\\\\\\\'],\\\\n                          \\\\\\\'formats\\\\\\\':[np.float32, np.int]})\\\\n    >>> dtype\\\\n    dtype([(\\\\\\\'foo\\\\\\\', \\\\\\\'<f4\\\\\\\'), (\\\\\\\'bar\\\\\\\', \\\\\\\'<i4\\\\\\\')])\\\\n    >>> ma.make_mask_descr(dtype)\\\\n    dtype([(\\\\\\\'foo\\\\\\\', \\\\\\\'|b1\\\\\\\'), (\\\\\\\'bar\\\\\\\', \\\\\\\'|b1\\\\\\\')])\\\\n    >>> ma.make_mask_descr(np.float32)\\\\n    <type \\\\\\\'numpy.bool_\\\\\\\'>\\\\n\\\\n    (\\\\x05\\\\x00\\\\x00\\\\x00R\\\\xed\\\\x00\\\\x00\\\\x00R\\\\xee\\\\x00\\\\x00\\\\x00R\\\\xe9\\\\x00\\\\x00\\\\x00Rp\\\\x01\\\\x00\\\\x00t\\\\x04\\\\x00\\\\x00\\\\x00bool(\\\\x01\\\\x00\\\\x00\\\\x00R\\\\xfb\\\\x00\\\\x00\\\\x00(\\\\x00\\\\x00\\\\x00\\\\x00(\\\\x00\\\\x00\\\\x00\\\\x00s,\\\\x00\\\\x00\\\\x00lib/python2.7/site-packages/numpy/ma/core.pyRv\\\\x00\\\\x00\\\\x00\\\\x17\\\\x05\\\\x00\\\\x00s\\\\x06\\\\x00\\\\x00\\\\x00\\\\x00\\\\x1f\\\\x12\\\\x01\\\\x12\\\\x01c\\\\x01\\\\x00\\\\x00\\\\x00\\\\x01\\\\x00\\\\x00\\\\x00\\\\x04\\\\x00\\\\x00\\\\x00C`\\\\x01\\\\x00s\\\\x10\\\\x00\\\\x00\\\\x00t\\\\x00\\\\x00|\\\\x00\\\\x00d\\\\x01\\\\x00t\\\\x01\\\\x00\\\\x83\\\\x03\\\\x00S(\\\\x02\\\\x00\\\\x00\\\\x00s0\\\\x05\\\\x00\\\\x00\\\\n    Return the mask of a masked array, or nomask.\\\\n\\\\n    Return the mask of `a` as an ndarray if `a` is a `MaskedArray` and the\\\\n    mask is not `nomask`, else return `nomask`. To guarantee a full array\\\\n    of booleans of the same shape as a, use `getmaskarray`.\\\\n\\\\n    Parameters\\\\n    ----------\\\\n    a : array_like\\\\n        Input `MaskedArray` for which the mask is required.\\\\n\\\\n    See Also\\\\n    --------\\\\n    getdata : Return the data of a masked array as an ndarray.\\\\n    getmaskarray : Return the mask of a masked array, or full array of False.\\\\n\\\\n    Examples\\\\n    --------\\\\n    >>> import numpy.ma as ma\\\\n    >>> a = ma.masked_equal([[1,2],[3,4]], 2)\\\\n    >>> a\\\\n    masked_array(data =\\\\n     [[1 --]\\\\n     [3 4]],\\\\n          mask =\\\\n     [[False  True]\\\\n     [False False]],\\\\n          fill_value=999999)\\\\n    >>> ma.getmask(a)\\\\n    array([[False,  True],\\\\n           [False, False]], dtype=bool)\\\\n\\\\n    Equivalently use the `MaskedArray` `mask` attribute.\\\\n\\\\n    >>> a.mask\\\\n    array([[False,  True],\\\\n           [False, False]], dtype=bool)\\\\n\\\\n    Result when mask == `nomask`\\\\n\\\\n    >>> b = ma.masked_array([[1,2],[3,4]])\\\\n    >>> b\\\\n    masked_array(data =\\\\n     [[1 2]\\\\n     [3 4]],\\\\n          mask =\\\\n     False,\\\\n          fill_value=999999)\\\\n    >>> ma.nomask\\\\n    False\\\\n    >>> ma.getmask(b) == ma.nomask\\\\n    True\\\\n    >>> b.mask == ma.nomask\\\\n    True\\\\n\\\\n    R6\\\\x01\\\\x00\\\\x00(\\\\x02\\\\x00\\\\x00\\\\x00RJ\\\\x01\\\\x00\\\\x00R\\\\x95\\\\x00\\\\x00\\\\x00(\\\\x01\\\\x00\\\\x00\\\\x00R\\\\x1f\\\\x01\\\\x00\\\\x00(\\\\x00\\\\x00\\\\x00\\\\x00(\\\\x00\\\\x00\\\\x00\\\\x00s,\\\\x00\\\\x00\\\\x00lib/python2.7/site-packages/numpy/ma/core.pyRY\\\\x00\\\\x00\\\\x00;\\\\x05\\\\x00\\\\x00s\\\\x02\\\\x00\\\\x00\\\\x00\\\\x00:c\\\\x01\\\\x00\\\\x00\\\\x00\\\\x02\\\\x00\\\\x00\\\\x00\\\\x06\\\\x00\\\\x00\\\\x00C`\\\\x01\\\\x00sC\\\\x00\\\\x00\\\\x00t\\\\x00\\\\x00|\\\\x00\\\\x00\\\\x83\\\\x01\\\\x00}\\\\x01\\\\x00|\\\\x01\\\\x00t\\\\x01\\\\x00k\\\\x08\\\\x00r?\\\\x00t\\\\x02\\\\x00t\\\\x03\\\\x00j\\\\x04\\\\x00|\\\\x00\\\\x00\\\\x83\\\\x01\\\\x00t\\\\x05\\\\x00|\\\\x00\\\\x00d\\\\x01\\\\x00d\\\\x02\\\\x00\\\\x83\\\\x03\\\\x00\\\\x83\\\\x02\\\\x00}\\\\x01\\\\x00n\\\\x00\\\\x00|\\\\x01\\\\x00S(\\\\x03\\\\x00\\\\x00\\\\x00s\\\\x83\\\\x04\\\\x00\\\\x00\\\\n    Return the mask of a masked array, or full boolean array of False.\\\\n\\\\n    Return the mask of `arr` as an ndarray if `arr` is a `MaskedArray` and\\\\n    the mask is not `nomask`, else return a full boolean array of False of\\\\n    the same shape as `arr`.\\\\n\\\\n    Parameters\\\\n    ----------\\\\n    arr : array_like\\\\n        Input `MaskedArray` for which the mask is required.\\\\n\\\\n    See Also\\\\n    --------\\\\n    getmask : Return the mask of a masked array, or nomask.\\\\n    getdata : Return the data of a masked array as an ndarray.\\\\n\\\\n    Examples\\\\n    --------\\\\n    >>> import numpy.ma as ma\\\\n    >>> a = ma.masked_equal([[1,2],[3,4]], 2)\\\\n    >>> a\\\\n    masked_array(data =\\\\n     [[1 --]\\\\n     [3 4]],\\\\n          mask =\\\\n     [[False  True]\\\\n     [False False]],\\\\n          fill_value=999999)\\\\n    >>> ma.getmaskarray(a)\\\\n    array([[False,  True],\\\\n           [False, False]], dtype=bool)\\\\n\\\\n    Result when mask == ``nomask``\\\\n\\\\n    >>> b = ma.masked_array([[1,2],[3,4]])\\\\n    >>> b\\\\n    masked_array(data =\\\\n     [[1 2]\\\\n     [3 4]],\\\\n          mask =\\\\n     False,\\\\n          fill_value=999999)\\\\n    >>> >ma.getmaskarray(b)\\\\n    array([[False, False],\\\\n           [False, False]], dtype=bool)\\\\n\\\\n    R\\\\xe9\\\\x00\\\\x00\\\\x00N(\\\\x07\\\\x00\\\\x00\\\\x00RY\\\\x00\\\\x00\\\\x00R\\\\x95\\\\x00\\\\x00\\\\x00Rw\\\\x00\\\\x00\\\\x00R\\\\xee\\\\x00\\\\x00\\\\x00R\\\\xab\\\\x00\\\\x00\\\\x00RJ\\\\x01\\\\x00\\\\x00R\\\\xc4\\\\x00\\\\x00\\\\x00(\\\\x02\\\\x00\\\\x00\\\\x00R)\\\\x01\\\\x00\\\\x00R3\\\\x01\\\\x00\\\\x00(\\\\x00\\\\x00\\\\x00\\\\x00(\\\\x00\\\\x00\\\\x00\\\\x00s,\\\\x00\\\\x00\\\\x00lib/python2.7/site-packages/numpy/ma/core.pyRZ\\\\x00\\\\x00\\\\x00{\\\\x05\\\\x00\\\\x00s\\\\x08\\\\x00\\\\x00\\\\x00\\\\x001\\\\x0c\\\\x01\\\\x0c\\\\x01\\\\\\\'\\\\x01c\\\\x01\\\\x00\\\\x00\\\\x00\\\\x01\\\\x00\\\\x00\\\\x00\\\\x05\\\\x00\\\\x00\\\\x00C`\\\\x01\\\\x00s-\\\\x00\\\\x00\\\\x00y\\\\x14\\\\x00|\\\\x00\\\\x00j\\\\x00\\\\x00j\\\\x01\\\\x00t\\\\x02\\\\x00k\\\\x08\\\\x00SWn\\\\x12\\\\x00\\\\x04t\\\\x03\\\\x00k\\\\n\\\\x00r(\\\\x00\\\\x01\\\\x01\\\\x01t\\\\x04\\\\x00SXd\\\\x01\\\\x00S(\\\\x02\\\\x00\\\\x00\\\\x00s2\\\\x06\\\\x00\\\\x00\\\\n    Return True if m is a valid, standard mask.\\\\n\\\\n    This function does not check the contents of the input, only that the\\\\n    type is MaskType. In particular, this function returns False if the\\\\n    mask has a flexible dtype.\\\\n\\\\n    Parameters\\\\n    ----------\\\\n    m : array_like\\\\n        Array to test.\\\\n\\\\n    Returns\\\\n    -------\\\\n    result : bool\\\\n        True if `m.dtype.type` is MaskType, False otherwise.\\\\n\\\\n    See Also\\\\n    --------\\\\n    isMaskedArray : Test whether input is an instance of MaskedArray.\\\\n\\\\n    Examples\\\\n    --------\\\\n    >>> import numpy.ma as ma\\\\n    >>> m = ma.masked_equal([0, 1, 0, 2, 3], 0)\\\\n    >>> m\\\\n    masked_array(data = [-- 1 -- 2 3],\\\\n          mask = [ True False  True False False],\\\\n          fill_value=999999)\\\\n    >>> ma.is_mask(m)\\\\n    False\\\\n    >>> ma.is_mask(m.mask)\\\\n    True\\\\n\\\\n    Input must be an ndarray (or have similar attributes)\\\\n    for it to be considered a valid mask.\\\\n\\\\n    >>> m = [False, True, False]\\\\n    >>> ma.is_mask(m)\\\\n    False\\\\n    >>> m = np.array([False, True, False])\\\\n    >>> m\\\\n    array([False,  True, False], dtype=bool)\\\\n    >>> ma.is_mask(m)\\\\n    True\\\\n\\\\n    Arrays with complex dtypes don\\\\\\\'t return True.\\\\n\\\\n    >>> dtype = np.dtype({\\\\\\\'names\\\\\\\':[\\\\\\\'monty\\\\\\\', \\\\\\\'pithon\\\\\\\'],\\\\n                          \\\\\\\'formats\\\\\\\':[np.bool, np.bool]})\\\\n    >>> dtype\\\\n    dtype([(\\\\\\\'monty\\\\\\\', \\\\\\\'|b1\\\\\\\'), (\\\\\\\'pithon\\\\\\\', \\\\\\\'|b1\\\\\\\')])\\\\n    >>> m = np.array([(True, False), (False, True), (True, False)],\\\\n                     dtype=dtype)\\\\n    >>> m\\\\n    array([(True, False), (False, True), (True, False)],\\\\n          dtype=[(\\\\\\\'monty\\\\\\\', \\\\\\\'|b1\\\\\\\'), (\\\\\\\'pithon\\\\\\\', \\\\\\\'|b1\\\\\\\')])\\\\n    >>> ma.is_mask(m)\\\\n    False\\\\n\\\\n    N(\\\\x05\\\\x00\\\\x00\\\\x00R\\\\xe9\\\\x00\\\\x00\\\\x00R&\\\\x01\\\\x00\\\\x00R\\\\x16\\\\x00\\\\x00\\\\x00R0\\\\x01\\\\x00\\\\x00R\\\\x16\\\\x01\\\\x00\\\\x00(\\\\x01\\\\x00\\\\x00\\\\x00R\\\\xde\\\\x00\\\\x00\\\\x00(\\\\x00\\\\x00\\\\x00\\\\x00(\\\\x00\\\\x00\\\\x00\\\\x00s,\\\\x00\\\\x00\\\\x00lib/python2.7/site-packages/numpy/ma/core.pyRf\\\\x00\\\\x00\\\\x00\\\\xb2\\\\x05\\\\x00\\\\x00s\\\\x08\\\\x00\\\\x00\\\\x00\\\\x00>\\\\x03\\\\x01\\\\x14\\\\x01\\\\r\\\\x01c\\\\x04\\\\x00\\\\x00\\\\x00\\\\x05\\\\x00\\\\x00\\\\x00\\\\x06\\\\x00\\\\x00\\\\x00C`\\\\x01\\\\x00s\\\\xcf\\\\x00\\\\x00\\\\x00|\\\\x00\\\\x00t\\\\x00\\\\x00k\\\\x08\\\\x00r\\\\x10\\\\x00t\\\\x00\\\\x00St\\\\x01\\\\x00|\\\\x00\\\\x00t\\\\x02\\\\x00\\\\x83\\\\x02\\\\x00r\\\\x85\\\\x00t\\\\x03\\\\x00|\\\\x00\\\\x00t\\\\x04\\\\x00\\\\x83\\\\x02\\\\x00}\\\\x00\\\\x00t\\\\x05\\\\x00|\\\\x03\\\\x00\\\\x83\\\\x01\\\\x00}\\\\x03\\\\x00|\\\\x00\\\\x00j\\\\x06\\\\x00|\\\\x03\\\\x00k\\\\x02\\\\x00rg\\\\x00|\\\\x01\\\\x00r^\\\\x00|\\\\x00\\\\x00j\\\\x07\\\\x00\\\\x83\\\\x00\\\\x00}\\\\x04\\\\x00q\\\\x82\\\\x00|\\\\x00\\\\x00}\\\\x04\\\\x00q\\\\xa3\\\\x00t\\\\x08\\\\x00j\\\\t\\\\x00|\\\\x00\\\\x00d\\\\x01\\\\x00|\\\\x03\\\\x00d\\\\x02\\\\x00|\\\\x01\\\\x00\\\\x83\\\\x01\\\\x02}\\\\x04\\\\x00n\\\\x1e\\\\x00t\\\\x08\\\\x00j\\\\t\\\\x00t\\\\x03\\\\x00|\\\\x00\\\\x00t\\\\x04\\\\x00\\\\x83\\\\x02\\\\x00d\\\\x01\\\\x00t\\\\n\\\\x00\\\\x83\\\\x01\\\\x01}\\\\x04\\\\x00|\\\\x02\\\\x00r\\\\xc7\\\\x00|\\\\x04\\\\x00j\\\\x06\\\\x00j\\\\x0b\\\\x00\\\\x0cr\\\\xc7\\\\x00|\\\\x04\\\\x00j\\\\x0c\\\\x00\\\\x83\\\\x00\\\\x00\\\\x0cr\\\\xc7\\\\x00t\\\\x00\\\\x00S|\\\\x04\\\\x00Sd\\\\x03\\\\x00S(\\\\x04\\\\x00\\\\x00\\\\x00s\\\\xb9\\\\x08\\\\x00\\\\x00\\\\n    Create a boolean mask from an array.\\\\n\\\\n    Return `m` as a boolean mask, creating a copy if necessary or requested.\\\\n    The function can accept any sequence that is convertible to integers,\\\\n    or ``nomask``.  Does not require that contents must be 0s and 1s, values\\\\n    of 0 are interepreted as False, everything else as True.\\\\n\\\\n    Parameters\\\\n    ----------\\\\n    m : array_like\\\\n        Potential mask.\\\\n    copy : bool, optional\\\\n        Whether to return a copy of `m` (True) or `m` itself (False).\\\\n    shrink : bool, optional\\\\n        Whether to shrink `m` to ``nomask`` if all its values are False.\\\\n    dtype : dtype, optional\\\\n        Data-type of the output mask. By default, the output mask has a\\\\n        dtype of MaskType (bool). If the dtype is flexible, each field has\\\\n        a boolean dtype. This is ignored when `m` is ``nomask``, in which\\\\n        case ``nomask`` is always returned.\\\\n\\\\n    Returns\\\\n    -------\\\\n    result : ndarray\\\\n        A boolean mask derived from `m`.\\\\n\\\\n    Examples\\\\n    --------\\\\n    >>> import numpy.ma as ma\\\\n    >>> m = [True, False, True, True]\\\\n    >>> ma.make_mask(m)\\\\n    array([ True, False,  True,  True], dtype=bool)\\\\n    >>> m = [1, 0, 1, 1]\\\\n    >>> ma.make_mask(m)\\\\n    array([ True, False,  True,  True], dtype=bool)\\\\n    >>> m = [1, 0, 2, -3]\\\\n    >>> ma.make_mask(m)\\\\n    array([ True, False,  True,  True], dtype=bool)\\\\n\\\\n    Effect of the `shrink` parameter.\\\\n\\\\n    >>> m = np.zeros(4)\\\\n    >>> m\\\\n    array([ 0.,  0.,  0.,  0.])\\\\n    >>> ma.make_mask(m)\\\\n    False\\\\n    >>> ma.make_mask(m, shrink=False)\\\\n    array([False, False, False, False], dtype=bool)\\\\n\\\\n    Using a flexible `dtype`.\\\\n\\\\n    >>> m = [1, 0, 1, 1]\\\\n    >>> n = [0, 1, 0, 0]\\\\n    >>> arr = []\\\\n    >>> for man, mouse in zip(m, n):\\\\n    ...     arr.append((man, mouse))\\\\n    >>> arr\\\\n    [(1, 0), (0, 1), (1, 0), (1, 0)]\\\\n    >>> dtype = np.dtype({\\\\\\\'names\\\\\\\':[\\\\\\\'man\\\\\\\', \\\\\\\'mouse\\\\\\\'],\\\\n                          \\\\\\\'formats\\\\\\\':[np.int, np.int]})\\\\n    >>> arr = np.array(arr, dtype=dtype)\\\\n    >>> arr\\\\n    array([(1, 0), (0, 1), (1, 0), (1, 0)],\\\\n          dtype=[(\\\\\\\'man\\\\\\\', \\\\\\\'<i4\\\\\\\'), (\\\\\\\'mouse\\\\\\\', \\\\\\\'<i4\\\\\\\')])\\\\n    >>> ma.make_mask(arr, dtype=dtype)\\\\n    array([(True, False), (False, True), (True, False), (True, False)],\\\\n          dtype=[(\\\\\\\'man\\\\\\\', \\\\\\\'|b1\\\\\\\'), (\\\\\\\'mouse\\\\\\\', \\\\\\\'|b1\\\\\\\')])\\\\n\\\\n    R\\\\xe9\\\\x00\\\\x00\\\\x00R<\\\\x00\\\\x00\\\\x00N(\\\\r\\\\x00\\\\x00\\\\x00R\\\\x95\\\\x00\\\\x00\\\\x00R\\\\xed\\\\x00\\\\x00\\\\x00R\\\\x04\\\\x00\\\\x00\\\\x00RN\\\\x00\\\\x00\\\\x00R4\\\\x01\\\\x00\\\\x00Rv\\\\x00\\\\x00\\\\x00R\\\\xe9\\\\x00\\\\x00\\\\x00R<\\\\x00\\\\x00\\\\x00R\\\\xee\\\\x00\\\\x00\\\\x00R\\\\n\\\\x00\\\\x00\\\\x00R\\\\x16\\\\x00\\\\x00\\\\x00R\\\\xf8\\\\x00\\\\x00\\\\x00R!\\\\x00\\\\x00\\\\x00(\\\\x05\\\\x00\\\\x00\\\\x00R\\\\xde\\\\x00\\\\x00\\\\x00R<\\\\x00\\\\x00\\\\x00t\\\\x06\\\\x00\\\\x00\\\\x00shrinkR\\\\xe9\\\\x00\\\\x00\\\\x00R \\\\x01\\\\x00\\\\x00(\\\\x00\\\\x00\\\\x00\\\\x00(\\\\x00\\\\x00\\\\x00\\\\x00s,\\\\x00\\\\x00\\\\x00lib/python2.7/site-packages/numpy/ma/core.pyRu\\\\x00\\\\x00\\\\x00\\\\xf6\\\\x05\\\\x00\\\\x00s\\\\x1c\\\\x00\\\\x00\\\\x00\\\\x00G\\\\x0c\\\\x01\\\\x04\\\\x01\\\\x0f\\\\x03\\\\x0f\\\\x02\\\\x0c\\\\x01\\\\x0f\\\\x01\\\\x06\\\\x01\\\\x0f\\\\x02\\\\t\\\\x02\\\\x1e\\\\x02\\\\x1e\\\\x02 \\\\x01\\\\x04\\\\x02c\\\\x02\\\\x00\\\\x00\\\\x00\\\\x03\\\\x00\\\\x00\\\\x00\\\\x05\\\\x00\\\\x00\\\\x00C`\\\\x01\\\\x00sC\\\\x00\\\\x00\\\\x00|\\\\x01\\\\x00d\\\\x02\\\\x00k\\\\x08\\\\x00r$\\\\x00t\\\\x01\\\\x00j\\\\x02\\\\x00|\\\\x00\\\\x00d\\\\x01\\\\x00t\\\\x03\\\\x00\\\\x83\\\\x01\\\\x01}\\\\x02\\\\x00n\\\\x1b\\\\x00t\\\\x01\\\\x00j\\\\x02\\\\x00|\\\\x00\\\\x00d\\\\x01\\\\x00t\\\\x04\\\\x00|\\\\x01\\\\x00\\\\x83\\\\x01\\\\x00\\\\x83\\\\x01\\\\x01}\\\\x02\\\\x00|\\\\x02\\\\x00S(\\\\x03\\\\x00\\\\x00\\\\x00s0\\\\x05\\\\x00\\\\x00\\\\n    Return a boolean mask of the given shape, filled with False.\\\\n\\\\n    This function returns a boolean ndarray with all entries False, that can\\\\n    be used in common mask manipulations. If a complex dtype is specified, the\\\\n    type of each field is converted to a boolean type.\\\\n\\\\n    Parameters\\\\n    ----------\\\\n    newshape : tuple\\\\n        A tuple indicating the shape of the mask.\\\\n    dtype : {None, dtype}, optional\\\\n        If None, use a MaskType instance. Otherwise, use a new datatype with\\\\n        the same fields as `dtype`, converted to boolean types.\\\\n\\\\n    Returns\\\\n    -------\\\\n    result : ndarray\\\\n        An ndarray of appropriate shape and dtype, filled with False.\\\\n\\\\n    See Also\\\\n    --------\\\\n    make_mask : Create a boolean mask from an array.\\\\n    make_mask_descr : Construct a dtype description list from a given dtype.\\\\n\\\\n    Examples\\\\n    --------\\\\n    >>> import numpy.ma as ma\\\\n    >>> ma.make_mask_none((3,))\\\\n    array([False, False, False], dtype=bool)\\\\n\\\\n    Defining a more complex dtype.\\\\n\\\\n    >>> dtype = np.dtype({\\\\\\\'names\\\\\\\':[\\\\\\\'foo\\\\\\\', \\\\\\\'bar\\\\\\\'],\\\\n                          \\\\\\\'formats\\\\\\\':[np.float32, np.int]})\\\\n    >>> dtype\\\\n    dtype([(\\\\\\\'foo\\\\\\\', \\\\\\\'<f4\\\\\\\'), (\\\\\\\'bar\\\\\\\', \\\\\\\'<i4\\\\\\\')])\\\\n    >>> ma.make_mask_none((3,), dtype=dtype)\\\\n    array([(False, False), (False, False), (False, False)],\\\\n          dtype=[(\\\\\\\'foo\\\\\\\', \\\\\\\'|b1\\\\\\\'), (\\\\\\\'bar\\\\\\\', \\\\\\\'|b1\\\\\\\')])\\\\n\\\\n    R\\\\xe9\\\\x00\\\\x00\\\\x00N(\\\\x05\\\\x00\\\\x00\\\\x00R\\\\xc4\\\\x00\\\\x00\\\\x00R\\\\xee\\\\x00\\\\x00\\\\x00R\\\\xc0\\\\x00\\\\x00\\\\x00R\\\\x16\\\\x00\\\\x00\\\\x00Rv\\\\x00\\\\x00\\\\x00(\\\\x03\\\\x00\\\\x00\\\\x00t\\\\x08\\\\x00\\\\x00\\\\x00newshapeR\\\\xe9\\\\x00\\\\x00\\\\x00R \\\\x01\\\\x00\\\\x00(\\\\x00\\\\x00\\\\x00\\\\x00(\\\\x00\\\\x00\\\\x00\\\\x00s,\\\\x00\\\\x00\\\\x00lib/python2.7/site-packages/numpy/ma/core.pyRw\\\\x00\\\\x00\\\\x00U\\\\x06\\\\x00\\\\x00s\\\\x08\\\\x00\\\\x00\\\\x00\\\\x00+\\\\x0c\\\\x01\\\\x18\\\\x02\\\\x1b\\\\x01c\\\\x04\\\\x00\\\\x00\\\\x00\\\\x08\\\\x00\\\\x00\\\\x00\\\\x08\\\\x00\\\\x00\\\\x00\\\\x03`\\\\x01\\\\x00sO\\\\x01\\\\x00\\\\x00\\\\x87\\\\x00\\\\x00f\\\\x01\\\\x00d\\\\x01\\\\x00\\\\x86\\\\x00\\\\x00\\\\x89\\\\x00\\\\x00|\\\\x00\\\\x00t\\\\x00\\\\x00k\\\\x08\\\\x00s\\\\\\\'\\\\x00|\\\\x00\\\\x00t\\\\x01\\\\x00k\\\\x08\\\\x00rU\\\\x00t\\\\x02\\\\x00|\\\\x01\\\\x00d\\\\x02\\\\x00t\\\\x03\\\\x00\\\\x83\\\\x03\\\\x00}\\\\x04\\\\x00t\\\\x04\\\\x00|\\\\x01\\\\x00d\\\\x03\\\\x00|\\\\x02\\\\x00d\\\\x04\\\\x00|\\\\x03\\\\x00d\\\\x02\\\\x00|\\\\x04\\\\x00\\\\x83\\\\x01\\\\x03S|\\\\x01\\\\x00t\\\\x00\\\\x00k\\\\x08\\\\x00sm\\\\x00|\\\\x01\\\\x00t\\\\x01\\\\x00k\\\\x08\\\\x00r\\\\x9b\\\\x00t\\\\x02\\\\x00|\\\\x00\\\\x00d\\\\x02\\\\x00t\\\\x03\\\\x00\\\\x83\\\\x03\\\\x00}\\\\x04\\\\x00t\\\\x04\\\\x00|\\\\x00\\\\x00d\\\\x03\\\\x00|\\\\x02\\\\x00d\\\\x04\\\\x00|\\\\x03\\\\x00d\\\\x02\\\\x00|\\\\x04\\\\x00\\\\x83\\\\x01\\\\x03S|\\\\x00\\\\x00|\\\\x01\\\\x00k\\\\x08\\\\x00r\\\\xb7\\\\x00t\\\\x05\\\\x00|\\\\x00\\\\x00\\\\x83\\\\x01\\\\x00r\\\\xb7\\\\x00|\\\\x00\\\\x00St\\\\x02\\\\x00|\\\\x00\\\\x00d\\\\x02\\\\x00d\\\\x06\\\\x00\\\\x83\\\\x03\\\\x00t\\\\x02\\\\x00|\\\\x01\\\\x00d\\\\x02\\\\x00d\\\\x06\\\\x00\\\\x83\\\\x03\\\\x00\\\\x02}\\\\x05\\\\x00}\\\\x06\\\\x00|\\\\x05\\\\x00|\\\\x06\\\\x00k\\\\x03\\\\x00r\\\\x01\\\\x01t\\\\x07\\\\x00d\\\\x05\\\\x00|\\\\x05\\\\x00|\\\\x06\\\\x00f\\\\x02\\\\x00\\\\x16\\\\x83\\\\x01\\\\x00\\\\x82\\\\x01\\\\x00n\\\\x00\\\\x00|\\\\x05\\\\x00j\\\\x08\\\\x00r-\\\\x01t\\\\t\\\\x00j\\\\n\\\\x00|\\\\x00\\\\x00\\\\x83\\\\x01\\\\x00}\\\\x07\\\\x00\\\\x88\\\\x00\\\\x00|\\\\x00\\\\x00|\\\\x01\\\\x00|\\\\x07\\\\x00\\\\x83\\\\x03\\\\x00\\\\x01|\\\\x07\\\\x00St\\\\x04\\\\x00t\\\\x0b\\\\x00j\\\\x0c\\\\x00|\\\\x00\\\\x00|\\\\x01\\\\x00\\\\x83\\\\x02\\\\x00d\\\\x03\\\\x00|\\\\x02\\\\x00d\\\\x04\\\\x00|\\\\x03\\\\x00\\\\x83\\\\x01\\\\x02S(\\\\x07\\\\x00\\\\x00\\\\x00s\\\\x99\\\\x03\\\\x00\\\\x00\\\\n    Combine two masks with the ``logical_or`` operator.\\\\n\\\\n    The result may be a view on `m1` or `m2` if the other is `nomask`\\\\n    (i.e. False).\\\\n\\\\n    Parameters\\\\n    ----------\\\\n    m1, m2 : array_like\\\\n        Input masks.\\\\n    copy : bool, optional\\\\n        If copy is False and one of the inputs is `nomask`, return a view\\\\n        of the other input mask. Defaults to False.\\\\n    shrink : bool, optional\\\\n        Whether to shrink the output to `nomask` if all its values are\\\\n        False. Defaults to True.\\\\n\\\\n    Returns\\\\n    -------\\\\n    mask : output mask\\\\n        The result masks values that are masked in either `m1` or `m2`.\\\\n\\\\n    Raises\\\\n    ------\\\\n    ValueError\\\\n        If `m1` and `m2` have different flexible dtypes.\\\\n\\\\n    Examples\\\\n    --------\\\\n    >>> m1 = np.ma.make_mask([0, 1, 1, 0])\\\\n    >>> m2 = np.ma.make_mask([1, 0, 0, 0])\\\\n    >>> np.ma.mask_or(m1, m2)\\\\n    array([ True,  True,  True, False], dtype=bool)\\\\n\\\\n    c\\\\x03\\\\x00\\\\x00\\\\x00\\\\x06\\\\x00\\\\x00\\\\x00\\\\x06\\\\x00\\\\x00\\\\x00\\\\x13`\\\\x01\\\\x00sm\\\\x00\\\\x00\\\\x00|\\\\x00\\\\x00j\\\\x00\\\\x00j\\\\x01\\\\x00}\\\\x03\\\\x00xZ\\\\x00|\\\\x03\\\\x00D]R\\\\x00}\\\\x04\\\\x00|\\\\x00\\\\x00|\\\\x04\\\\x00\\\\x19}\\\\x05\\\\x00|\\\\x05\\\\x00j\\\\x00\\\\x00j\\\\x01\\\\x00rJ\\\\x00\\\\x88\\\\x00\\\\x00|\\\\x05\\\\x00|\\\\x01\\\\x00|\\\\x04\\\\x00\\\\x19|\\\\x02\\\\x00|\\\\x04\\\\x00\\\\x19\\\\x83\\\\x03\\\\x00\\\\x01q\\\\x13\\\\x00t\\\\x02\\\\x00j\\\\x03\\\\x00|\\\\x05\\\\x00|\\\\x01\\\\x00|\\\\x04\\\\x00\\\\x19|\\\\x02\\\\x00|\\\\x04\\\\x00\\\\x19\\\\x83\\\\x03\\\\x00\\\\x01q\\\\x13\\\\x00Wd\\\\x00\\\\x00S(\\\\x01\\\\x00\\\\x00\\\\x00N(\\\\x04\\\\x00\\\\x00\\\\x00R\\\\xe9\\\\x00\\\\x00\\\\x00R\\\\xf8\\\\x00\\\\x00\\\\x00R;\\\\x01\\\\x00\\\\x00Rs\\\\x00\\\\x00\\\\x00(\\\\x06\\\\x00\\\\x00\\\\x00t\\\\x02\\\\x00\\\\x00\\\\x00m1t\\\\x02\\\\x00\\\\x00\\\\x00m2t\\\\x07\\\\x00\\\\x00\\\\x00newmaskR\\\\xf8\\\\x00\\\\x00\\\\x00R\\\\xfe\\\\x00\\\\x00\\\\x00t\\\\x08\\\\x00\\\\x00\\\\x00current1(\\\\x01\\\\x00\\\\x00\\\\x00t\\\\x12\\\\x00\\\\x00\\\\x00_recursive_mask_or(\\\\x00\\\\x00\\\\x00\\\\x00s,\\\\x00\\\\x00\\\\x00lib/python2.7/site-packages/numpy/ma/core.pyR}\\\\x01\\\\x00\\\\x00\\\\xac\\\\x06\\\\x00\\\\x00s\\\\x0e\\\\x00\\\\x00\\\\x00\\\\x00\\\\x01\\\\x0c\\\\x01\\\\r\\\\x01\\\\n\\\\x01\\\\x0c\\\\x01\\\\x1b\\\\x02\\\\x1f\\\\x01R\\\\xe9\\\\x00\\\\x00\\\\x00R<\\\\x00\\\\x00\\\\x00Rw\\\\x01\\\\x00\\\\x00s\\\\x1e\\\\x00\\\\x00\\\\x00Incompatible dtypes \\\\\\\'%s\\\\\\\'<>\\\\\\\'%s\\\\\\\'N(\\\\r\\\\x00\\\\x00\\\\x00R\\\\x95\\\\x00\\\\x00\\\\x00R\\\\x16\\\\x01\\\\x00\\\\x00RJ\\\\x01\\\\x00\\\\x00R\\\\x16\\\\x00\\\\x00\\\\x00Ru\\\\x00\\\\x00\\\\x00Rf\\\\x00\\\\x00\\\\x00R\\\\xc4\\\\x00\\\\x00\\\\x00R\\\\x17\\\\x01\\\\x00\\\\x00R\\\\xf8\\\\x00\\\\x00\\\\x00R\\\\xee\\\\x00\\\\x00\\\\x00RJ\\\\x00\\\\x00\\\\x00R;\\\\x01\\\\x00\\\\x00Rs\\\\x00\\\\x00\\\\x00(\\\\x08\\\\x00\\\\x00\\\\x00Ry\\\\x01\\\\x00\\\\x00Rz\\\\x01\\\\x00\\\\x00R<\\\\x00\\\\x00\\\\x00Rw\\\\x01\\\\x00\\\\x00R\\\\xe9\\\\x00\\\\x00\\\\x00t\\\\x06\\\\x00\\\\x00\\\\x00dtype1t\\\\x06\\\\x00\\\\x00\\\\x00dtype2R{\\\\x01\\\\x00\\\\x00(\\\\x00\\\\x00\\\\x00\\\\x00(\\\\x01\\\\x00\\\\x00\\\\x00R}\\\\x01\\\\x00\\\\x00s,\\\\x00\\\\x00\\\\x00lib/python2.7/site-packages/numpy/ma/core.pyRx\\\\x00\\\\x00\\\\x00\\\\x87\\\\x06\\\\x00\\\\x00s"\\\\x00\\\\x00\\\\x00\\\\x00%\\\\x0f\\\\n\\\\x18\\\\x01\\\\x12\\\\x01\\\\x1c\\\\x01\\\\x18\\\\x01\\\\x12\\\\x01\\\\x1c\\\\x01\\\\x18\\\\x01\\\\x04\\\\x01%\\\\x01\\\\x0c\\\\x01\\\\x19\\\\x01\\\\t\\\\x01\\\\x0f\\\\x01\\\\x10\\\\x01\\\\x04\\\\x01c\\\\x01\\\\x00\\\\x00\\\\x00\\\\x04\\\\x00\\\\x00\\\\x00\\\\x04\\\\x00\\\\x00\\\\x00\\\\x03`\\\\x01\\\\x00s_\\\\x00\\\\x00\\\\x00d\\\\x01\\\\x00\\\\x84\\\\x00\\\\x00}\\\\x01\\\\x00\\\\x87\\\\x00\\\\x00f\\\\x01\\\\x00d\\\\x02\\\\x00\\\\x86\\\\x00\\\\x00\\\\x89\\\\x00\\\\x00t\\\\x00\\\\x00j\\\\x01\\\\x00|\\\\x00\\\\x00\\\\x83\\\\x01\\\\x00}\\\\x00\\\\x00\\\\x88\\\\x00\\\\x00|\\\\x01\\\\x00|\\\\x00\\\\x00\\\\x83\\\\x01\\\\x00\\\\x83\\\\x01\\\\x00}\\\\x02\\\\x00t\\\\x00\\\\x00j\\\\x02\\\\x00g\\\\x00\\\\x00|\\\\x02\\\\x00D]\\\\x0c\\\\x00}\\\\x03\\\\x00|\\\\x03\\\\x00^\\\\x02\\\\x00qF\\\\x00d\\\\x03\\\\x00t\\\\x03\\\\x00\\\\x83\\\\x01\\\\x01S(\\\\x04\\\\x00\\\\x00\\\\x00sG\\\\x03\\\\x00\\\\x00\\\\n    Returns a completely flattened version of the mask, where nested fields\\\\n    are collapsed.\\\\n\\\\n    Parameters\\\\n    ----------\\\\n    mask : array_like\\\\n        Input array, which will be interpreted as booleans.\\\\n\\\\n    Returns\\\\n    -------\\\\n    flattened_mask : ndarray of bools\\\\n        The flattened input.\\\\n\\\\n    Examples\\\\n    --------\\\\n    >>> mask = np.array([0, 0, 1], dtype=np.bool)\\\\n    >>> flatten_mask(mask)\\\\n    array([False, False,  True], dtype=bool)\\\\n\\\\n    >>> mask = np.array([(0, 0), (0, 1)], dtype=[(\\\\\\\'a\\\\\\\', bool), (\\\\\\\'b\\\\\\\', bool)])\\\\n    >>> flatten_mask(mask)\\\\n    array([False, False, False,  True], dtype=bool)\\\\n\\\\n    >>> mdtype = [(\\\\\\\'a\\\\\\\', bool), (\\\\\\\'b\\\\\\\', [(\\\\\\\'ba\\\\\\\', bool), (\\\\\\\'bb\\\\\\\', bool)])]\\\\n    >>> mask = np.array([(0, (0, 0)), (0, (0, 1))], dtype=mdtype)\\\\n    >>> flatten_mask(mask)\\\\n    array([False, False, False, False, False,  True], dtype=bool)\\\\n\\\\n    c\\\\x01\\\\x00\\\\x00\\\\x00\\\\x03\\\\x00\\\\x00\\\\x00\\\\x05\\\\x00\\\\x00\\\\x00S`\\\\x01\\\\x00s;\\\\x00\\\\x00\\\\x00|\\\\x00\\\\x00j\\\\x00\\\\x00j\\\\x01\\\\x00}\\\\x01\\\\x00|\\\\x01\\\\x00r3\\\\x00g\\\\x00\\\\x00|\\\\x01\\\\x00D]\\\\x16\\\\x00}\\\\x02\\\\x00t\\\\x02\\\\x00|\\\\x00\\\\x00|\\\\x02\\\\x00\\\\x19\\\\x83\\\\x01\\\\x00^\\\\x02\\\\x00q\\\\x19\\\\x00S|\\\\x00\\\\x00Sd\\\\x01\\\\x00S(\\\\x02\\\\x00\\\\x00\\\\x00sC\\\\x00\\\\x00\\\\x00Flatten the mask and returns a (maybe nested) sequence of booleans.N(\\\\x03\\\\x00\\\\x00\\\\x00R\\\\xe9\\\\x00\\\\x00\\\\x00R\\\\xf8\\\\x00\\\\x00\\\\x00RP\\\\x00\\\\x00\\\\x00(\\\\x03\\\\x00\\\\x00\\\\x00R3\\\\x01\\\\x00\\\\x00t\\\\x06\\\\x00\\\\x00\\\\x00mnamesR\\\\xfe\\\\x00\\\\x00\\\\x00(\\\\x00\\\\x00\\\\x00\\\\x00(\\\\x00\\\\x00\\\\x00\\\\x00s,\\\\x00\\\\x00\\\\x00lib/python2.7/site-packages/numpy/ma/core.pyt\\\\t\\\\x00\\\\x00\\\\x00_flatmask\\\\xe8\\\\x06\\\\x00\\\\x00s\\\\x08\\\\x00\\\\x00\\\\x00\\\\x00\\\\x02\\\\x0c\\\\x01\\\\x06\\\\x01!\\\\x02c\\\\x01\\\\x00\\\\x00\\\\x00\\\\x03\\\\x00\\\\x00\\\\x00\\\\x05\\\\x00\\\\x00\\\\x003`\\\\x01\\\\x00se\\\\x00\\\\x00\\\\x00yH\\\\x00xA\\\\x00|\\\\x00\\\\x00D]9\\\\x00}\\\\x01\\\\x00t\\\\x00\\\\x00|\\\\x01\\\\x00d\\\\x01\\\\x00\\\\x83\\\\x02\\\\x00r>\\\\x00x!\\\\x00\\\\x88\\\\x00\\\\x00|\\\\x01\\\\x00\\\\x83\\\\x01\\\\x00D]\\\\x0b\\\\x00}\\\\x02\\\\x00|\\\\x02\\\\x00V\\\\x01q,\\\\x00Wq\\\\n\\\\x00|\\\\x01\\\\x00V\\\\x01q\\\\n\\\\x00WWn\\\\x16\\\\x00\\\\x04t\\\\x01\\\\x00k\\\\n\\\\x00r`\\\\x00\\\\x01\\\\x01\\\\x01|\\\\x00\\\\x00V\\\\x01n\\\\x01\\\\x00Xd\\\\x02\\\\x00S(\\\\x03\\\\x00\\\\x00\\\\x00s.\\\\x00\\\\x00\\\\x00Generates a flattened version of the sequence.t\\\\x08\\\\x00\\\\x00\\\\x00__iter__N(\\\\x02\\\\x00\\\\x00\\\\x00R\\\\xeb\\\\x00\\\\x00\\\\x00R\\\\xca\\\\x00\\\\x00\\\\x00(\\\\x03\\\\x00\\\\x00\\\\x00t\\\\x08\\\\x00\\\\x00\\\\x00sequencet\\\\x07\\\\x00\\\\x00\\\\x00elementR\\\\xd1\\\\x00\\\\x00\\\\x00(\\\\x01\\\\x00\\\\x00\\\\x00t\\\\r\\\\x00\\\\x00\\\\x00_flatsequence(\\\\x00\\\\x00\\\\x00\\\\x00s,\\\\x00\\\\x00\\\\x00lib/python2.7/site-packages/numpy/ma/core.pyR\\\\x85\\\\x01\\\\x00\\\\x00\\\\xf0\\\\x06\\\\x00\\\\x00s\\\\x10\\\\x00\\\\x00\\\\x00\\\\x00\\\\x02\\\\x03\\\\x01\\\\r\\\\x01\\\\x0f\\\\x01\\\\x13\\\\x01\\\\x0c\\\\x02\\\\r\\\\x01\\\\r\\\\x01R\\\\xe9\\\\x00\\\\x00\\\\x00(\\\\x04\\\\x00\\\\x00\\\\x00R\\\\xee\\\\x00\\\\x00\\\\x00R0\\\\x00\\\\x00\\\\x00R\\\\n\\\\x00\\\\x00\\\\x00Rv\\\\x01\\\\x00\\\\x00(\\\\x04\\\\x00\\\\x00\\\\x00R3\\\\x01\\\\x00\\\\x00R\\\\x81\\\\x01\\\\x00\\\\x00t\\\\t\\\\x00\\\\x00\\\\x00flattenedR\\\\x1c\\\\x01\\\\x00\\\\x00(\\\\x00\\\\x00\\\\x00\\\\x00(\\\\x01\\\\x00\\\\x00\\\\x00R\\\\x85\\\\x01\\\\x00\\\\x00s,\\\\x00\\\\x00\\\\x00lib/python2.7/site-packages/numpy/ma/core.pyRP\\\\x00\\\\x00\\\\x00\\\\xc8\\\\x06\\\\x00\\\\x00s\\\\n\\\\x00\\\\x00\\\\x00\\\\x00 \\\\t\\\\x08\\\\x0f\\\\x0c\\\\x0f\\\\x01\\\\x12\\\\x01c\\\\x03\\\\x00\\\\x00\\\\x00\\\\x04\\\\x00\\\\x00\\\\x00\\\\x04\\\\x00\\\\x00\\\\x00C`\\\\x01\\\\x00sE\\\\x00\\\\x00\\\\x00|\\\\x02\\\\x00t\\\\x00\\\\x00j\\\\x01\\\\x00k\\\\x08\\\\x00r\\\\x15\\\\x00i\\\\x00\\\\x00n\\\\n\\\\x00i\\\\x01\\\\x00|\\\\x02\\\\x00d\\\\x01\\\\x006}\\\\x03\\\\x00|\\\\x00\\\\x00t\\\\x02\\\\x00k\\\\t\\\\x00rA\\\\x00|\\\\x00\\\\x00j\\\\x03\\\\x00d\\\\x02\\\\x00|\\\\x01\\\\x00|\\\\x03\\\\x00\\\\x8d\\\\x00\\\\x01St\\\\x02\\\\x00S(\\\\x03\\\\x00\\\\x00\\\\x00s:\\\\x00\\\\x00\\\\x00Check whether there are masked values along the given axist\\\\x08\\\\x00\\\\x00\\\\x00keepdimsRf\\\\x01\\\\x00\\\\x00(\\\\x04\\\\x00\\\\x00\\\\x00R\\\\xee\\\\x00\\\\x00\\\\x00R\\\\t\\\\x00\\\\x00\\\\x00R\\\\x95\\\\x00\\\\x00\\\\x00R\\\\x1b\\\\x00\\\\x00\\\\x00(\\\\x04\\\\x00\\\\x00\\\\x00R3\\\\x01\\\\x00\\\\x00Rf\\\\x01\\\\x00\\\\x00R\\\\x87\\\\x01\\\\x00\\\\x00RS\\\\x01\\\\x00\\\\x00(\\\\x00\\\\x00\\\\x00\\\\x00(\\\\x00\\\\x00\\\\x00\\\\x00s,\\\\x00\\\\x00\\\\x00lib/python2.7/site-packages/numpy/ma/core.pyt\\\\x10\\\\x00\\\\x00\\\\x00_check_mask_axis\\\\x01\\\\x07\\\\x00\\\\x00s\\\\x08\\\\x00\\\\x00\\\\x00\\\\x00\\\\x02"\\\\x01\\\\x0c\\\\x01\\\\x13\\\\x01c\\\\x03\\\\x00\\\\x00\\\\x00\\\\x08\\\\x00\\\\x00\\\\x00\\\\x06\\\\x00\\\\x00\\\\x00C`\\\\x01\\\\x00s\\\\xb7\\\\x00\\\\x00\\\\x00t\\\\x00\\\\x00|\\\\x00\\\\x00\\\\x83\\\\x01\\\\x00}\\\\x03\\\\x00t\\\\x01\\\\x00j\\\\x02\\\\x00|\\\\x01\\\\x00d\\\\x01\\\\x00|\\\\x02\\\\x00d\\\\x02\\\\x00t\\\\x03\\\\x00\\\\x83\\\\x01\\\\x02}\\\\x01\\\\x00|\\\\x03\\\\x00j\\\\x04\\\\x00|\\\\x01\\\\x00j\\\\x04\\\\x00\\\\x02}\\\\x04\\\\x00}\\\\x05\\\\x00|\\\\x04\\\\x00re\\\\x00|\\\\x04\\\\x00|\\\\x05\\\\x00k\\\\x03\\\\x00re\\\\x00t\\\\x05\\\\x00d\\\\x03\\\\x00|\\\\x04\\\\x00|\\\\x05\\\\x00f\\\\x02\\\\x00\\\\x16\\\\x83\\\\x01\\\\x00\\\\x82\\\\x01\\\\x00n\\\\x00\\\\x00t\\\\x06\\\\x00|\\\\x01\\\\x00d\\\\x04\\\\x00\\\\x83\\\\x02\\\\x00r\\\\x95\\\\x00t\\\\x07\\\\x00|\\\\x03\\\\x00|\\\\x01\\\\x00j\\\\x08\\\\x00\\\\x83\\\\x02\\\\x00}\\\\x03\\\\x00t\\\\t\\\\x00|\\\\x01\\\\x00\\\\x83\\\\x01\\\\x00}\\\\x06\\\\x00n\\\\x06\\\\x00t\\\\n\\\\x00}\\\\x06\\\\x00|\\\\x01\\\\x00j\\\\x0b\\\\x00|\\\\x06\\\\x00\\\\x83\\\\x01\\\\x00}\\\\x07\\\\x00|\\\\x03\\\\x00|\\\\x07\\\\x00_\\\\x0c\\\\x00|\\\\x07\\\\x00S(\\\\x05\\\\x00\\\\x00\\\\x00st\\\\x0b\\\\x00\\\\x00\\\\n    Mask an array where a condition is met.\\\\n\\\\n    Return `a` as an array masked where `condition` is True.\\\\n    Any masked values of `a` or `condition` are also masked in the output.\\\\n\\\\n    Parameters\\\\n    ----------\\\\n    condition : array_like\\\\n        Masking condition.  When `condition` tests floating point values for\\\\n        equality, consider using ``masked_values`` instead.\\\\n    a : array_like\\\\n        Array to mask.\\\\n    copy : bool\\\\n        If True (default) make a copy of `a` in the result.  If False modify\\\\n        `a` in place and return a view.\\\\n\\\\n    Returns\\\\n    -------\\\\n    result : MaskedArray\\\\n        The result of masking `a` where `condition` is True.\\\\n\\\\n    See Also\\\\n    --------\\\\n    masked_values : Mask using floating point equality.\\\\n    masked_equal : Mask where equal to a given value.\\\\n    masked_not_equal : Mask where `not` equal to a given value.\\\\n    masked_less_equal : Mask where less than or equal to a given value.\\\\n    masked_greater_equal : Mask where greater than or equal to a given value.\\\\n    masked_less : Mask where less than a given value.\\\\n    masked_greater : Mask where greater than a given value.\\\\n    masked_inside : Mask inside a given interval.\\\\n    masked_outside : Mask outside a given interval.\\\\n    masked_invalid : Mask invalid values (NaNs or infs).\\\\n\\\\n    Examples\\\\n    --------\\\\n    >>> import numpy.ma as ma\\\\n    >>> a = np.arange(4)\\\\n    >>> a\\\\n    array([0, 1, 2, 3])\\\\n    >>> ma.masked_where(a <= 2, a)\\\\n    masked_array(data = [-- -- -- 3],\\\\n          mask = [ True  True  True False],\\\\n          fill_value=999999)\\\\n\\\\n    Mask array `b` conditional on `a`.\\\\n\\\\n    >>> b = [\\\\\\\'a\\\\\\\', \\\\\\\'b\\\\\\\', \\\\\\\'c\\\\\\\', \\\\\\\'d\\\\\\\']\\\\n    >>> ma.masked_where(a == 2, b)\\\\n    masked_array(data = [a b -- d],\\\\n          mask = [False False  True False],\\\\n          fill_value=N/A)\\\\n\\\\n    Effect of the `copy` argument.\\\\n\\\\n    >>> c = ma.masked_where(a <= 2, a)\\\\n    >>> c\\\\n    masked_array(data = [-- -- -- 3],\\\\n          mask = [ True  True  True False],\\\\n          fill_value=999999)\\\\n    >>> c[0] = 99\\\\n    >>> c\\\\n    masked_array(data = [99 -- -- 3],\\\\n          mask = [False  True  True False],\\\\n          fill_value=999999)\\\\n    >>> a\\\\n    array([0, 1, 2, 3])\\\\n    >>> c = ma.masked_where(a <= 2, a, copy=False)\\\\n    >>> c[0] = 99\\\\n    >>> c\\\\n    masked_array(data = [99 -- -- 3],\\\\n          mask = [False  True  True False],\\\\n          fill_value=999999)\\\\n    >>> a\\\\n    array([99,  1,  2,  3])\\\\n\\\\n    When `condition` or `a` contain masked values.\\\\n\\\\n    >>> a = np.arange(4)\\\\n    >>> a = ma.masked_where(a == 2, a)\\\\n    >>> a\\\\n    masked_array(data = [0 1 -- 3],\\\\n          mask = [False False  True False],\\\\n          fill_value=999999)\\\\n    >>> b = np.arange(4)\\\\n    >>> b = ma.masked_where(b == 0, b)\\\\n    >>> b\\\\n    masked_array(data = [-- 1 2 3],\\\\n          mask = [ True False False False],\\\\n          fill_value=999999)\\\\n    >>> ma.masked_where(a == 3, b)\\\\n    masked_array(data = [-- 1 -- --],\\\\n          mask = [ True False  True  True],\\\\n          fill_value=999999)\\\\n\\\\n    R<\\\\x00\\\\x00\\\\x00R.\\\\x01\\\\x00\\\\x00sF\\\\x00\\\\x00\\\\x00Inconsistant shape between the condition and the input (got %s and %s)R6\\\\x01\\\\x00\\\\x00(\\\\r\\\\x00\\\\x00\\\\x00Ru\\\\x00\\\\x00\\\\x00R\\\\xee\\\\x00\\\\x00\\\\x00R\\\\n\\\\x00\\\\x00\\\\x00R4\\\\x01\\\\x00\\\\x00R\\\\xab\\\\x00\\\\x00\\\\x00t\\\\n\\\\x00\\\\x00\\\\x00IndexErrorR\\\\xeb\\\\x00\\\\x00\\\\x00Rx\\\\x00\\\\x00\\\\x00R6\\\\x01\\\\x00\\\\x00R&\\\\x01\\\\x00\\\\x00R\\\\x17\\\\x00\\\\x00\\\\x00R1\\\\x01\\\\x00\\\\x00R3\\\\x01\\\\x00\\\\x00(\\\\x08\\\\x00\\\\x00\\\\x00t\\\\t\\\\x00\\\\x00\\\\x00conditionR\\\\x1f\\\\x01\\\\x00\\\\x00R<\\\\x00\\\\x00\\\\x00t\\\\x04\\\\x00\\\\x00\\\\x00condt\\\\x06\\\\x00\\\\x00\\\\x00cshapet\\\\x06\\\\x00\\\\x00\\\\x00ashapeR,\\\\x01\\\\x00\\\\x00R \\\\x01\\\\x00\\\\x00(\\\\x00\\\\x00\\\\x00\\\\x00(\\\\x00\\\\x00\\\\x00\\\\x00s,\\\\x00\\\\x00\\\\x00lib/python2.7/site-packages/numpy/ma/core.pyR\\\\x88\\\\x00\\\\x00\\\\x00\\\\r\\\\x07\\\\x00\\\\x00s\\\\x1a\\\\x00\\\\x00\\\\x00\\\\x00c\\\\x0c\\\\x01\\\\x1b\\\\x02\\\\x13\\\\x01\\\\x12\\\\x01\\\\x06\\\\x01\\\\x13\\\\x01\\\\x0f\\\\x01\\\\x12\\\\x01\\\\x0f\\\\x02\\\\x06\\\\x01\\\\x0f\\\\x02\\\\t\\\\x01c\\\\x03\\\\x00\\\\x00\\\\x00\\\\x03\\\\x00\\\\x00\\\\x00\\\\x05\\\\x00\\\\x00\\\\x00C`\\\\x01\\\\x00s\\\\x1c\\\\x00\\\\x00\\\\x00t\\\\x00\\\\x00t\\\\x01\\\\x00|\\\\x00\\\\x00|\\\\x01\\\\x00\\\\x83\\\\x02\\\\x00|\\\\x00\\\\x00d\\\\x01\\\\x00|\\\\x02\\\\x00\\\\x83\\\\x02\\\\x01S(\\\\x02\\\\x00\\\\x00\\\\x00s\\\\xe2\\\\x01\\\\x00\\\\x00\\\\n    Mask an array where greater than a given value.\\\\n\\\\n    This function is a shortcut to ``masked_where``, with\\\\n    `condition` = (x > value).\\\\n\\\\n    See Also\\\\n    --------\\\\n    masked_where : Mask where a condition is met.\\\\n\\\\n    Examples\\\\n    --------\\\\n    >>> import numpy.ma as ma\\\\n    >>> a = np.arange(4)\\\\n    >>> a\\\\n    array([0, 1, 2, 3])\\\\n    >>> ma.masked_greater(a, 2)\\\\n    masked_array(data = [0 1 2 --],\\\\n          mask = [False False False  True],\\\\n          fill_value=999999)\\\\n\\\\n    R<\\\\x00\\\\x00\\\\x00(\\\\x02\\\\x00\\\\x00\\\\x00R\\\\x88\\\\x00\\\\x00\\\\x00R[\\\\x00\\\\x00\\\\x00(\\\\x03\\\\x00\\\\x00\\\\x00R<\\\\x01\\\\x00\\\\x00t\\\\x05\\\\x00\\\\x00\\\\x00valueR<\\\\x00\\\\x00\\\\x00(\\\\x00\\\\x00\\\\x00\\\\x00(\\\\x00\\\\x00\\\\x00\\\\x00s,\\\\x00\\\\x00\\\\x00lib/python2.7/site-packages/numpy/ma/core.pyR|\\\\x00\\\\x00\\\\x00\\\\x82\\\\x07\\\\x00\\\\x00s\\\\x02\\\\x00\\\\x00\\\\x00\\\\x00\\\\x17c\\\\x03\\\\x00\\\\x00\\\\x00\\\\x03\\\\x00\\\\x00\\\\x00\\\\x05\\\\x00\\\\x00\\\\x00C`\\\\x01\\\\x00s\\\\x1c\\\\x00\\\\x00\\\\x00t\\\\x00\\\\x00t\\\\x01\\\\x00|\\\\x00\\\\x00|\\\\x01\\\\x00\\\\x83\\\\x02\\\\x00|\\\\x00\\\\x00d\\\\x01\\\\x00|\\\\x02\\\\x00\\\\x83\\\\x02\\\\x01S(\\\\x02\\\\x00\\\\x00\\\\x00s\\\\xf6\\\\x01\\\\x00\\\\x00\\\\n    Mask an array where greater than or equal to a given value.\\\\n\\\\n    This function is a shortcut to ``masked_where``, with\\\\n    `condition` = (x >= value).\\\\n\\\\n    See Also\\\\n    --------\\\\n    masked_where : Mask where a condition is met.\\\\n\\\\n    Examples\\\\n    --------\\\\n    >>> import numpy.ma as ma\\\\n    >>> a = np.arange(4)\\\\n    >>> a\\\\n    array([0, 1, 2, 3])\\\\n    >>> ma.masked_greater_equal(a, 2)\\\\n    masked_array(data = [0 1 -- --],\\\\n          mask = [False False  True  True],\\\\n          fill_value=999999)\\\\n\\\\n    R<\\\\x00\\\\x00\\\\x00(\\\\x02\\\\x00\\\\x00\\\\x00R\\\\x88\\\\x00\\\\x00\\\\x00R\\\\\\\\\\\\x00\\\\x00\\\\x00(\\\\x03\\\\x00\\\\x00\\\\x00R<\\\\x01\\\\x00\\\\x00R\\\\x8e\\\\x01\\\\x00\\\\x00R<\\\\x00\\\\x00\\\\x00(\\\\x00\\\\x00\\\\x00\\\\x00(\\\\x00\\\\x00\\\\x00\\\\x00s,\\\\x00\\\\x00\\\\x00lib/python2.7/site-packages/numpy/ma/core.pyR}\\\\x00\\\\x00\\\\x00\\\\x9c\\\\x07\\\\x00\\\\x00s\\\\x02\\\\x00\\\\x00\\\\x00\\\\x00\\\\x17c\\\\x03\\\\x00\\\\x00\\\\x00\\\\x03\\\\x00\\\\x00\\\\x00\\\\x05\\\\x00\\\\x00\\\\x00C`\\\\x01\\\\x00s\\\\x1c\\\\x00\\\\x00\\\\x00t\\\\x00\\\\x00t\\\\x01\\\\x00|\\\\x00\\\\x00|\\\\x01\\\\x00\\\\x83\\\\x02\\\\x00|\\\\x00\\\\x00d\\\\x01\\\\x00|\\\\x02\\\\x00\\\\x83\\\\x02\\\\x01S(\\\\x02\\\\x00\\\\x00\\\\x00s\\\\xdd\\\\x01\\\\x00\\\\x00\\\\n    Mask an array where less than a given value.\\\\n\\\\n    This function is a shortcut to ``masked_where``, with\\\\n    `condition` = (x < value).\\\\n\\\\n    See Also\\\\n    --------\\\\n    masked_where : Mask where a condition is met.\\\\n\\\\n    Examples\\\\n    --------\\\\n    >>> import numpy.ma as ma\\\\n    >>> a = np.arange(4)\\\\n    >>> a\\\\n    array([0, 1, 2, 3])\\\\n    >>> ma.masked_less(a, 2)\\\\n    masked_array(data = [-- -- 2 3],\\\\n          mask = [ True  True False False],\\\\n          fill_value=999999)\\\\n\\\\n    R<\\\\x00\\\\x00\\\\x00(\\\\x02\\\\x00\\\\x00\\\\x00R\\\\x88\\\\x00\\\\x00\\\\x00Rj\\\\x00\\\\x00\\\\x00(\\\\x03\\\\x00\\\\x00\\\\x00R<\\\\x01\\\\x00\\\\x00R\\\\x8e\\\\x01\\\\x00\\\\x00R<\\\\x00\\\\x00\\\\x00(\\\\x00\\\\x00\\\\x00\\\\x00(\\\\x00\\\\x00\\\\x00\\\\x00s,\\\\x00\\\\x00\\\\x00lib/python2.7/site-packages/numpy/ma/core.pyR\\\\x80\\\\x00\\\\x00\\\\x00\\\\xb6\\\\x07\\\\x00\\\\x00s\\\\x02\\\\x00\\\\x00\\\\x00\\\\x00\\\\x17c\\\\x03\\\\x00\\\\x00\\\\x00\\\\x03\\\\x00\\\\x00\\\\x00\\\\x05\\\\x00\\\\x00\\\\x00C`\\\\x01\\\\x00s\\\\x1c\\\\x00\\\\x00\\\\x00t\\\\x00\\\\x00t\\\\x01\\\\x00|\\\\x00\\\\x00|\\\\x01\\\\x00\\\\x83\\\\x02\\\\x00|\\\\x00\\\\x00d\\\\x01\\\\x00|\\\\x02\\\\x00\\\\x83\\\\x02\\\\x01S(\\\\x02\\\\x00\\\\x00\\\\x00s\\\\xf1\\\\x01\\\\x00\\\\x00\\\\n    Mask an array where less than or equal to a given value.\\\\n\\\\n    This function is a shortcut to ``masked_where``, with\\\\n    `condition` = (x <= value).\\\\n\\\\n    See Also\\\\n    --------\\\\n    masked_where : Mask where a condition is met.\\\\n\\\\n    Examples\\\\n    --------\\\\n    >>> import numpy.ma as ma\\\\n    >>> a = np.arange(4)\\\\n    >>> a\\\\n    array([0, 1, 2, 3])\\\\n    >>> ma.masked_less_equal(a, 2)\\\\n    masked_array(data = [-- -- -- 3],\\\\n          mask = [ True  True  True False],\\\\n          fill_value=999999)\\\\n\\\\n    R<\\\\x00\\\\x00\\\\x00(\\\\x02\\\\x00\\\\x00\\\\x00R\\\\x88\\\\x00\\\\x00\\\\x00Rk\\\\x00\\\\x00\\\\x00(\\\\x03\\\\x00\\\\x00\\\\x00R<\\\\x01\\\\x00\\\\x00R\\\\x8e\\\\x01\\\\x00\\\\x00R<\\\\x00\\\\x00\\\\x00(\\\\x00\\\\x00\\\\x00\\\\x00(\\\\x00\\\\x00\\\\x00\\\\x00s,\\\\x00\\\\x00\\\\x00lib/python2.7/site-packages/numpy/ma/core.pyR\\\\x81\\\\x00\\\\x00\\\\x00\\\\xd0\\\\x07\\\\x00\\\\x00s\\\\x02\\\\x00\\\\x00\\\\x00\\\\x00\\\\x17c\\\\x03\\\\x00\\\\x00\\\\x00\\\\x03\\\\x00\\\\x00\\\\x00\\\\x05\\\\x00\\\\x00\\\\x00C`\\\\x01\\\\x00s\\\\x1c\\\\x00\\\\x00\\\\x00t\\\\x00\\\\x00t\\\\x01\\\\x00|\\\\x00\\\\x00|\\\\x01\\\\x00\\\\x83\\\\x02\\\\x00|\\\\x00\\\\x00d\\\\x01\\\\x00|\\\\x02\\\\x00\\\\x83\\\\x02\\\\x01S(\\\\x02\\\\x00\\\\x00\\\\x00s\\\\xe9\\\\x01\\\\x00\\\\x00\\\\n    Mask an array where `not` equal to a given value.\\\\n\\\\n    This function is a shortcut to ``masked_where``, with\\\\n    `condition` = (x != value).\\\\n\\\\n    See Also\\\\n    --------\\\\n    masked_where : Mask where a condition is met.\\\\n\\\\n    Examples\\\\n    --------\\\\n    >>> import numpy.ma as ma\\\\n    >>> a = np.arange(4)\\\\n    >>> a\\\\n    array([0, 1, 2, 3])\\\\n    >>> ma.masked_not_equal(a, 2)\\\\n    masked_array(data = [-- -- 2 --],\\\\n          mask = [ True  True False  True],\\\\n          fill_value=999999)\\\\n\\\\n    R<\\\\x00\\\\x00\\\\x00(\\\\x02\\\\x00\\\\x00\\\\x00R\\\\x88\\\\x00\\\\x00\\\\x00R\\\\x97\\\\x00\\\\x00\\\\x00(\\\\x03\\\\x00\\\\x00\\\\x00R<\\\\x01\\\\x00\\\\x00R\\\\x8e\\\\x01\\\\x00\\\\x00R<\\\\x00\\\\x00\\\\x00(\\\\x00\\\\x00\\\\x00\\\\x00(\\\\x00\\\\x00\\\\x00\\\\x00s,\\\\x00\\\\x00\\\\x00lib/python2.7/site-packages/numpy/ma/core.pyR\\\\x82\\\\x00\\\\x00\\\\x00\\\\xea\\\\x07\\\\x00\\\\x00s\\\\x02\\\\x00\\\\x00\\\\x00\\\\x00\\\\x17c\\\\x03\\\\x00\\\\x00\\\\x00\\\\x04\\\\x00\\\\x00\\\\x00\\\\x05\\\\x00\\\\x00\\\\x00C`\\\\x01\\\\x00s+\\\\x00\\\\x00\\\\x00t\\\\x00\\\\x00t\\\\x01\\\\x00|\\\\x00\\\\x00|\\\\x01\\\\x00\\\\x83\\\\x02\\\\x00|\\\\x00\\\\x00d\\\\x01\\\\x00|\\\\x02\\\\x00\\\\x83\\\\x02\\\\x01}\\\\x03\\\\x00|\\\\x01\\\\x00|\\\\x03\\\\x00_\\\\x02\\\\x00|\\\\x03\\\\x00S(\\\\x02\\\\x00\\\\x00\\\\x00sa\\\\x02\\\\x00\\\\x00\\\\n    Mask an array where equal to a given value.\\\\n\\\\n    This function is a shortcut to ``masked_where``, with\\\\n    `condition` = (x == value).  For floating point arrays,\\\\n    consider using ``masked_values(x, value)``.\\\\n\\\\n    See Also\\\\n    --------\\\\n    masked_where : Mask where a condition is met.\\\\n    masked_values : Mask using floating point equality.\\\\n\\\\n    Examples\\\\n    --------\\\\n    >>> import numpy.ma as ma\\\\n    >>> a = np.arange(4)\\\\n    >>> a\\\\n    array([0, 1, 2, 3])\\\\n    >>> ma.masked_equal(a, 2)\\\\n    masked_array(data = [0 1 -- 3],\\\\n          mask = [False False  True False],\\\\n          fill_value=999999)\\\\n\\\\n    R<\\\\x00\\\\x00\\\\x00(\\\\x03\\\\x00\\\\x00\\\\x00R\\\\x88\\\\x00\\\\x00\\\\x00RK\\\\x00\\\\x00\\\\x00R\\\\x1b\\\\x01\\\\x00\\\\x00(\\\\x04\\\\x00\\\\x00\\\\x00R<\\\\x01\\\\x00\\\\x00R\\\\x8e\\\\x01\\\\x00\\\\x00R<\\\\x00\\\\x00\\\\x00t\\\\x06\\\\x00\\\\x00\\\\x00output(\\\\x00\\\\x00\\\\x00\\\\x00(\\\\x00\\\\x00\\\\x00\\\\x00s,\\\\x00\\\\x00\\\\x00lib/python2.7/site-packages/numpy/ma/core.pyR{\\\\x00\\\\x00\\\\x00\\\\x04\\\\x08\\\\x00\\\\x00s\\\\x06\\\\x00\\\\x00\\\\x00\\\\x00\\\\x19\\\\x1e\\\\x01\\\\t\\\\x01c\\\\x04\\\\x00\\\\x00\\\\x00\\\\x06\\\\x00\\\\x00\\\\x00\\\\x05\\\\x00\\\\x00\\\\x00C`\\\\x01\\\\x00sQ\\\\x00\\\\x00\\\\x00|\\\\x02\\\\x00|\\\\x01\\\\x00k\\\\x00\\\\x00r\\\\x1c\\\\x00|\\\\x02\\\\x00|\\\\x01\\\\x00\\\\x02}\\\\x01\\\\x00}\\\\x02\\\\x00n\\\\x00\\\\x00t\\\\x00\\\\x00|\\\\x00\\\\x00\\\\x83\\\\x01\\\\x00}\\\\x04\\\\x00|\\\\x04\\\\x00|\\\\x01\\\\x00k\\\\x05\\\\x00|\\\\x04\\\\x00|\\\\x02\\\\x00k\\\\x01\\\\x00@}\\\\x05\\\\x00t\\\\x01\\\\x00|\\\\x05\\\\x00|\\\\x00\\\\x00d\\\\x01\\\\x00|\\\\x03\\\\x00\\\\x83\\\\x02\\\\x01S(\\\\x02\\\\x00\\\\x00\\\\x00sw\\\\x03\\\\x00\\\\x00\\\\n    Mask an array inside a given interval.\\\\n\\\\n    Shortcut to ``masked_where``, where `condition` is True for `x` inside\\\\n    the interval [v1,v2] (v1 <= x <= v2).  The boundaries `v1` and `v2`\\\\n    can be given in either order.\\\\n\\\\n    See Also\\\\n    --------\\\\n    masked_where : Mask where a condition is met.\\\\n\\\\n    Notes\\\\n    -----\\\\n    The array `x` is prefilled with its filling value.\\\\n\\\\n    Examples\\\\n    --------\\\\n    >>> import numpy.ma as ma\\\\n    >>> x = [0.31, 1.2, 0.01, 0.2, -0.4, -1.1]\\\\n    >>> ma.masked_inside(x, -0.3, 0.3)\\\\n    masked_array(data = [0.31 1.2 -- -- -0.4 -1.1],\\\\n          mask = [False False  True  True False False],\\\\n          fill_value=1e+20)\\\\n\\\\n    The order of `v1` and `v2` doesn\\\\\\\'t matter.\\\\n\\\\n    >>> ma.masked_inside(x, 0.3, -0.3)\\\\n    masked_array(data = [0.31 1.2 -- -- -0.4 -1.1],\\\\n          mask = [False False  True  True False False],\\\\n          fill_value=1e+20)\\\\n\\\\n    R<\\\\x00\\\\x00\\\\x00(\\\\x02\\\\x00\\\\x00\\\\x00RN\\\\x00\\\\x00\\\\x00R\\\\x88\\\\x00\\\\x00\\\\x00(\\\\x06\\\\x00\\\\x00\\\\x00R<\\\\x01\\\\x00\\\\x00t\\\\x02\\\\x00\\\\x00\\\\x00v1t\\\\x02\\\\x00\\\\x00\\\\x00v2R<\\\\x00\\\\x00\\\\x00t\\\\x02\\\\x00\\\\x00\\\\x00xfR\\\\x8a\\\\x01\\\\x00\\\\x00(\\\\x00\\\\x00\\\\x00\\\\x00(\\\\x00\\\\x00\\\\x00\\\\x00s,\\\\x00\\\\x00\\\\x00lib/python2.7/site-packages/numpy/ma/core.pyR~\\\\x00\\\\x00\\\\x00"\\\\x08\\\\x00\\\\x00s\\\\n\\\\x00\\\\x00\\\\x00\\\\x00!\\\\x0c\\\\x01\\\\x10\\\\x01\\\\x0c\\\\x01\\\\x16\\\\x01c\\\\x04\\\\x00\\\\x00\\\\x00\\\\x06\\\\x00\\\\x00\\\\x00\\\\x05\\\\x00\\\\x00\\\\x00C`\\\\x01\\\\x00sQ\\\\x00\\\\x00\\\\x00|\\\\x02\\\\x00|\\\\x01\\\\x00k\\\\x00\\\\x00r\\\\x1c\\\\x00|\\\\x02\\\\x00|\\\\x01\\\\x00\\\\x02}\\\\x01\\\\x00}\\\\x02\\\\x00n\\\\x00\\\\x00t\\\\x00\\\\x00|\\\\x00\\\\x00\\\\x83\\\\x01\\\\x00}\\\\x04\\\\x00|\\\\x04\\\\x00|\\\\x01\\\\x00k\\\\x00\\\\x00|\\\\x04\\\\x00|\\\\x02\\\\x00k\\\\x04\\\\x00B}\\\\x05\\\\x00t\\\\x01\\\\x00|\\\\x05\\\\x00|\\\\x00\\\\x00d\\\\x01\\\\x00|\\\\x03\\\\x00\\\\x83\\\\x02\\\\x01S(\\\\x02\\\\x00\\\\x00\\\\x00st\\\\x03\\\\x00\\\\x00\\\\n    Mask an array outside a given interval.\\\\n\\\\n    Shortcut to ``masked_where``, where `condition` is True for `x` outside\\\\n    the interval [v1,v2] (x < v1)|(x > v2).\\\\n    The boundaries `v1` and `v2` can be given in either order.\\\\n\\\\n    See Also\\\\n    --------\\\\n    masked_where : Mask where a condition is met.\\\\n\\\\n    Notes\\\\n    -----\\\\n    The array `x` is prefilled with its filling value.\\\\n\\\\n    Examples\\\\n    --------\\\\n    >>> import numpy.ma as ma\\\\n    >>> x = [0.31, 1.2, 0.01, 0.2, -0.4, -1.1]\\\\n    >>> ma.masked_outside(x, -0.3, 0.3)\\\\n    masked_array(data = [-- -- 0.01 0.2 -- --],\\\\n          mask = [ True  True False False  True  True],\\\\n          fill_value=1e+20)\\\\n\\\\n    The order of `v1` and `v2` doesn\\\\\\\'t matter.\\\\n\\\\n    >>> ma.masked_outside(x, 0.3, -0.3)\\\\n    masked_array(data = [-- -- 0.01 0.2 -- --],\\\\n          mask = [ True  True False False  True  True],\\\\n          fill_value=1e+20)\\\\n\\\\n    R<\\\\x00\\\\x00\\\\x00(\\\\x02\\\\x00\\\\x00\\\\x00RN\\\\x00\\\\x00\\\\x00R\\\\x88\\\\x00\\\\x00\\\\x00(\\\\x06\\\\x00\\\\x00\\\\x00R<\\\\x01\\\\x00\\\\x00R\\\\x90\\\\x01\\\\x00\\\\x00R\\\\x91\\\\x01\\\\x00\\\\x00R<\\\\x00\\\\x00\\\\x00R\\\\x92\\\\x01\\\\x00\\\\x00R\\\\x8a\\\\x01\\\\x00\\\\x00(\\\\x00\\\\x00\\\\x00\\\\x00(\\\\x00\\\\x00\\\\x00\\\\x00s,\\\\x00\\\\x00\\\\x00lib/python2.7/site-packages/numpy/ma/core.pyR\\\\x84\\\\x00\\\\x00\\\\x00J\\\\x08\\\\x00\\\\x00s\\\\n\\\\x00\\\\x00\\\\x00\\\\x00!\\\\x0c\\\\x01\\\\x10\\\\x01\\\\x0c\\\\x01\\\\x16\\\\x01c\\\\x04\\\\x00\\\\x00\\\\x00\\\\x06\\\\x00\\\\x00\\\\x00\\\\x08\\\\x00\\\\x00\\\\x00C`\\\\x01\\\\x00s\\\\x85\\\\x00\\\\x00\\\\x00t\\\\x00\\\\x00|\\\\x00\\\\x00\\\\x83\\\\x01\\\\x00r-\\\\x00t\\\\x01\\\\x00j\\\\x02\\\\x00|\\\\x00\\\\x00j\\\\x03\\\\x00|\\\\x01\\\\x00\\\\x83\\\\x02\\\\x00}\\\\x04\\\\x00|\\\\x00\\\\x00j\\\\x04\\\\x00}\\\\x05\\\\x00n!\\\\x00t\\\\x01\\\\x00j\\\\x02\\\\x00t\\\\x05\\\\x00j\\\\x06\\\\x00|\\\\x00\\\\x00\\\\x83\\\\x01\\\\x00|\\\\x01\\\\x00\\\\x83\\\\x02\\\\x00}\\\\x04\\\\x00t\\\\x07\\\\x00}\\\\x05\\\\x00t\\\\x08\\\\x00|\\\\x05\\\\x00t\\\\t\\\\x00|\\\\x04\\\\x00d\\\\x01\\\\x00|\\\\x03\\\\x00\\\\x83\\\\x01\\\\x01\\\\x83\\\\x02\\\\x00}\\\\x05\\\\x00t\\\\n\\\\x00|\\\\x00\\\\x00d\\\\x02\\\\x00|\\\\x05\\\\x00d\\\\x03\\\\x00|\\\\x02\\\\x00d\\\\x04\\\\x00|\\\\x01\\\\x00\\\\x83\\\\x01\\\\x03S(\\\\x05\\\\x00\\\\x00\\\\x00s\\\\x8a\\\\x05\\\\x00\\\\x00\\\\n    Mask the array `x` where the data are exactly equal to value.\\\\n\\\\n    This function is similar to `masked_values`, but only suitable\\\\n    for object arrays: for floating point, use `masked_values` instead.\\\\n\\\\n    Parameters\\\\n    ----------\\\\n    x : array_like\\\\n        Array to mask\\\\n    value : object\\\\n        Comparison value\\\\n    copy : {True, False}, optional\\\\n        Whether to return a copy of `x`.\\\\n    shrink : {True, False}, optional\\\\n        Whether to collapse a mask full of False to nomask\\\\n\\\\n    Returns\\\\n    -------\\\\n    result : MaskedArray\\\\n        The result of masking `x` where equal to `value`.\\\\n\\\\n    See Also\\\\n    --------\\\\n    masked_where : Mask where a condition is met.\\\\n    masked_equal : Mask where equal to a given value (integers).\\\\n    masked_values : Mask using floating point equality.\\\\n\\\\n    Examples\\\\n    --------\\\\n    >>> import numpy.ma as ma\\\\n    >>> food = np.array([\\\\\\\'green_eggs\\\\\\\', \\\\\\\'ham\\\\\\\'], dtype=object)\\\\n    >>> # don\\\\\\\'t eat spoiled food\\\\n    >>> eat = ma.masked_object(food, \\\\\\\'green_eggs\\\\\\\')\\\\n    >>> print(eat)\\\\n    [-- ham]\\\\n    >>> # plain ol` ham is boring\\\\n    >>> fresh_food = np.array([\\\\\\\'cheese\\\\\\\', \\\\\\\'ham\\\\\\\', \\\\\\\'pineapple\\\\\\\'], dtype=object)\\\\n    >>> eat = ma.masked_object(fresh_food, \\\\\\\'green_eggs\\\\\\\')\\\\n    >>> print(eat)\\\\n    [cheese ham pineapple]\\\\n\\\\n    Note that `mask` is set to ``nomask`` if possible.\\\\n\\\\n    >>> eat\\\\n    masked_array(data = [cheese ham pineapple],\\\\n          mask = False,\\\\n          fill_value=?)\\\\n\\\\n    Rw\\\\x01\\\\x00\\\\x00R3\\\\x01\\\\x00\\\\x00R<\\\\x00\\\\x00\\\\x00R\\\\x1b\\\\x01\\\\x00\\\\x00(\\\\x0b\\\\x00\\\\x00\\\\x00Re\\\\x00\\\\x00\\\\x00R;\\\\x01\\\\x00\\\\x00RK\\\\x00\\\\x00\\\\x00R/\\\\x01\\\\x00\\\\x00R6\\\\x01\\\\x00\\\\x00R\\\\xee\\\\x00\\\\x00\\\\x00R0\\\\x00\\\\x00\\\\x00R\\\\x95\\\\x00\\\\x00\\\\x00Rx\\\\x00\\\\x00\\\\x00Ru\\\\x00\\\\x00\\\\x00Rz\\\\x00\\\\x00\\\\x00(\\\\x06\\\\x00\\\\x00\\\\x00R<\\\\x01\\\\x00\\\\x00R\\\\x8e\\\\x01\\\\x00\\\\x00R<\\\\x00\\\\x00\\\\x00Rw\\\\x01\\\\x00\\\\x00R\\\\x8a\\\\x01\\\\x00\\\\x00R3\\\\x01\\\\x00\\\\x00(\\\\x00\\\\x00\\\\x00\\\\x00(\\\\x00\\\\x00\\\\x00\\\\x00s,\\\\x00\\\\x00\\\\x00lib/python2.7/site-packages/numpy/ma/core.pyR\\\\x83\\\\x00\\\\x00\\\\x00r\\\\x08\\\\x00\\\\x00s\\\\x0e\\\\x00\\\\x00\\\\x00\\\\x003\\\\x0c\\\\x01\\\\x15\\\\x01\\\\x0c\\\\x02\\\\x1b\\\\x01\\\\x06\\\\x01\\\\x1b\\\\x01g\\\\xf1h\\\\xe3\\\\x88\\\\xb5\\\\xf8\\\\xe4>g:\\\\x8c0\\\\xe2\\\\x8eyE>c\\\\x06\\\\x00\\\\x00\\\\x00\\\\n\\\\x00\\\\x00\\\\x00\\\\x08\\\\x00\\\\x00\\\\x00C`\\\\x01\\\\x00s\\\\xc4\\\\x00\\\\x00\\\\x00t\\\\x00\\\\x00j\\\\x01\\\\x00}\\\\x06\\\\x00t\\\\x02\\\\x00|\\\\x00\\\\x00|\\\\x01\\\\x00\\\\x83\\\\x02\\\\x00}\\\\x07\\\\x00t\\\\x03\\\\x00|\\\\x07\\\\x00j\\\\x04\\\\x00j\\\\x05\\\\x00t\\\\x06\\\\x00j\\\\x07\\\\x00\\\\x83\\\\x02\\\\x00ro\\\\x00t\\\\x00\\\\x00j\\\\x08\\\\x00|\\\\x06\\\\x00|\\\\x07\\\\x00|\\\\x01\\\\x00\\\\x18\\\\x83\\\\x01\\\\x00|\\\\x03\\\\x00|\\\\x02\\\\x00|\\\\x06\\\\x00|\\\\x01\\\\x00\\\\x83\\\\x01\\\\x00\\\\x14\\\\x17\\\\x83\\\\x02\\\\x00}\\\\x08\\\\x00t\\\\t\\\\x00|\\\\x00\\\\x00d\\\\x01\\\\x00t\\\\n\\\\x00\\\\x83\\\\x03\\\\x00}\\\\t\\\\x00n\\\\x18\\\\x00t\\\\x00\\\\x00j\\\\x0b\\\\x00|\\\\x07\\\\x00|\\\\x01\\\\x00\\\\x83\\\\x02\\\\x00}\\\\x08\\\\x00t\\\\n\\\\x00}\\\\t\\\\x00t\\\\x0c\\\\x00|\\\\t\\\\x00t\\\\r\\\\x00|\\\\x08\\\\x00d\\\\x02\\\\x00|\\\\x05\\\\x00\\\\x83\\\\x01\\\\x01d\\\\x02\\\\x00|\\\\x05\\\\x00\\\\x83\\\\x02\\\\x01}\\\\t\\\\x00t\\\\x0e\\\\x00|\\\\x07\\\\x00d\\\\x03\\\\x00|\\\\t\\\\x00d\\\\x04\\\\x00|\\\\x04\\\\x00d\\\\x05\\\\x00|\\\\x01\\\\x00\\\\x83\\\\x01\\\\x03S(\\\\x06\\\\x00\\\\x00\\\\x00s\\\\x8a\\\\x07\\\\x00\\\\x00\\\\n    Mask using floating point equality.\\\\n\\\\n    Return a MaskedArray, masked where the data in array `x` are approximately\\\\n    equal to `value`, i.e. where the following condition is True\\\\n\\\\n    (abs(x - value) <= atol+rtol*abs(value))\\\\n\\\\n    The fill_value is set to `value` and the mask is set to ``nomask`` if\\\\n    possible.  For integers, consider using ``masked_equal``.\\\\n\\\\n    Parameters\\\\n    ----------\\\\n    x : array_like\\\\n        Array to mask.\\\\n    value : float\\\\n        Masking value.\\\\n    rtol : float, optional\\\\n        Tolerance parameter.\\\\n    atol : float, optional\\\\n        Tolerance parameter (1e-8).\\\\n    copy : bool, optional\\\\n        Whether to return a copy of `x`.\\\\n    shrink : bool, optional\\\\n        Whether to collapse a mask full of False to ``nomask``.\\\\n\\\\n    Returns\\\\n    -------\\\\n    result : MaskedArray\\\\n        The result of masking `x` where approximately equal to `value`.\\\\n\\\\n    See Also\\\\n    --------\\\\n    masked_where : Mask where a condition is met.\\\\n    masked_equal : Mask where equal to a given value (integers).\\\\n\\\\n    Examples\\\\n    --------\\\\n    >>> import numpy.ma as ma\\\\n    >>> x = np.array([1, 1.1, 2, 1.1, 3])\\\\n    >>> ma.masked_values(x, 1.1)\\\\n    masked_array(data = [1.0 -- 2.0 -- 3.0],\\\\n          mask = [False  True False  True False],\\\\n          fill_value=1.1)\\\\n\\\\n    Note that `mask` is set to ``nomask`` if possible.\\\\n\\\\n    >>> ma.masked_values(x, 1.5)\\\\n    masked_array(data = [ 1.   1.1  2.   1.1  3. ],\\\\n          mask = False,\\\\n          fill_value=1.5)\\\\n\\\\n    For integers, the fill value will be different in general to the\\\\n    result of ``masked_equal``.\\\\n\\\\n    >>> x = np.arange(5)\\\\n    >>> x\\\\n    array([0, 1, 2, 3, 4])\\\\n    >>> ma.masked_values(x, 2)\\\\n    masked_array(data = [0 1 -- 3 4],\\\\n          mask = [False False  True False False],\\\\n          fill_value=2)\\\\n    >>> ma.masked_equal(x, 2)\\\\n    masked_array(data = [0 1 -- 3 4],\\\\n          mask = [False False  True False False],\\\\n          fill_value=999999)\\\\n\\\\n    R6\\\\x01\\\\x00\\\\x00Rw\\\\x01\\\\x00\\\\x00R3\\\\x01\\\\x00\\\\x00R<\\\\x00\\\\x00\\\\x00R\\\\x1b\\\\x01\\\\x00\\\\x00(\\\\x0f\\\\x00\\\\x00\\\\x00R;\\\\x01\\\\x00\\\\x00R\\\\x19\\\\x00\\\\x00\\\\x00RN\\\\x00\\\\x00\\\\x00R\\\\\\\'\\\\x01\\\\x00\\\\x00R\\\\xe9\\\\x00\\\\x00\\\\x00R&\\\\x01\\\\x00\\\\x00R\\\\xee\\\\x00\\\\x00\\\\x00t\\\\x08\\\\x00\\\\x00\\\\x00floatingRk\\\\x00\\\\x00\\\\x00RJ\\\\x01\\\\x00\\\\x00R\\\\x95\\\\x00\\\\x00\\\\x00RK\\\\x00\\\\x00\\\\x00Rx\\\\x00\\\\x00\\\\x00Ru\\\\x00\\\\x00\\\\x00Rz\\\\x00\\\\x00\\\\x00(\\\\n\\\\x00\\\\x00\\\\x00R<\\\\x01\\\\x00\\\\x00R\\\\x8e\\\\x01\\\\x00\\\\x00t\\\\x04\\\\x00\\\\x00\\\\x00rtolt\\\\x04\\\\x00\\\\x00\\\\x00atolR<\\\\x00\\\\x00\\\\x00Rw\\\\x01\\\\x00\\\\x00t\\\\x04\\\\x00\\\\x00\\\\x00mabst\\\\x04\\\\x00\\\\x00\\\\x00xnewR\\\\x8a\\\\x01\\\\x00\\\\x00R3\\\\x01\\\\x00\\\\x00(\\\\x00\\\\x00\\\\x00\\\\x00(\\\\x00\\\\x00\\\\x00\\\\x00s,\\\\x00\\\\x00\\\\x00lib/python2.7/site-packages/numpy/ma/core.pyR\\\\x87\\\\x00\\\\x00\\\\x00\\\\xaf\\\\x08\\\\x00\\\\x00s\\\\x14\\\\x00\\\\x00\\\\x00\\\\x00E\\\\t\\\\x01\\\\x0f\\\\x01\\\\x18\\\\x01\\\\x06\\\\x01$\\\\x01\\\\x15\\\\x02\\\\x12\\\\x01\\\\x06\\\\x01!\\\\x01c\\\\x02\\\\x00\\\\x00\\\\x00\\\\x06\\\\x00\\\\x00\\\\x00\\\\x06\\\\x00\\\\x00\\\\x00C`\\\\x01\\\\x00s\\\\xa9\\\\x00\\\\x00\\\\x00t\\\\x00\\\\x00j\\\\x01\\\\x00|\\\\x00\\\\x00d\\\\x01\\\\x00|\\\\x01\\\\x00d\\\\x02\\\\x00t\\\\x02\\\\x00\\\\x83\\\\x01\\\\x02}\\\\x00\\\\x00t\\\\x03\\\\x00|\\\\x00\\\\x00d\\\\x03\\\\x00d\\\\x04\\\\x00\\\\x83\\\\x03\\\\x00}\\\\x02\\\\x00|\\\\x02\\\\x00d\\\\x04\\\\x00k\\\\t\\\\x00rw\\\\x00t\\\\x00\\\\x00j\\\\x05\\\\x00t\\\\x06\\\\x00|\\\\x00\\\\x00\\\\x83\\\\x01\\\\x00\\\\x83\\\\x01\\\\x00\\\\x0f}\\\\x03\\\\x00|\\\\x02\\\\x00t\\\\x07\\\\x00k\\\\t\\\\x00rh\\\\x00|\\\\x03\\\\x00|\\\\x02\\\\x00O}\\\\x03\\\\x00n\\\\x00\\\\x00t\\\\x08\\\\x00|\\\\x00\\\\x00\\\\x83\\\\x01\\\\x00}\\\\x04\\\\x00n\\\\x16\\\\x00t\\\\x00\\\\x00j\\\\x05\\\\x00|\\\\x00\\\\x00\\\\x83\\\\x01\\\\x00\\\\x0f}\\\\x03\\\\x00t\\\\t\\\\x00}\\\\x04\\\\x00|\\\\x00\\\\x00j\\\\n\\\\x00|\\\\x04\\\\x00\\\\x83\\\\x01\\\\x00}\\\\x05\\\\x00|\\\\x03\\\\x00|\\\\x05\\\\x00_\\\\x0b\\\\x00|\\\\x05\\\\x00S(\\\\x05\\\\x00\\\\x00\\\\x00s\\\\xf9\\\\x02\\\\x00\\\\x00\\\\n    Mask an array where invalid values occur (NaNs or infs).\\\\n\\\\n    This function is a shortcut to ``masked_where``, with\\\\n    `condition` = ~(np.isfinite(a)). Any pre-existing mask is conserved.\\\\n    Only applies to arrays with a dtype where NaNs or infs make sense\\\\n    (i.e. floating point types), but accepts any array_like object.\\\\n\\\\n    See Also\\\\n    --------\\\\n    masked_where : Mask where a condition is met.\\\\n\\\\n    Examples\\\\n    --------\\\\n    >>> import numpy.ma as ma\\\\n    >>> a = np.arange(5, dtype=np.float)\\\\n    >>> a[2] = np.NaN\\\\n    >>> a[3] = np.PINF\\\\n    >>> a\\\\n    array([  0.,   1.,  NaN,  Inf,   4.])\\\\n    >>> ma.masked_invalid(a)\\\\n    masked_array(data = [0.0 1.0 -- -- 4.0],\\\\n          mask = [False False  True  True False],\\\\n          fill_value=1e+20)\\\\n\\\\n    R<\\\\x00\\\\x00\\\\x00R.\\\\x01\\\\x00\\\\x00R6\\\\x01\\\\x00\\\\x00N(\\\\x0c\\\\x00\\\\x00\\\\x00R\\\\xee\\\\x00\\\\x00\\\\x00R\\\\n\\\\x00\\\\x00\\\\x00R4\\\\x01\\\\x00\\\\x00RJ\\\\x01\\\\x00\\\\x00R\\\\xc4\\\\x00\\\\x00\\\\x00R5\\\\x01\\\\x00\\\\x00RX\\\\x00\\\\x00\\\\x00R\\\\x95\\\\x00\\\\x00\\\\x00R&\\\\x01\\\\x00\\\\x00R\\\\x17\\\\x00\\\\x00\\\\x00R1\\\\x01\\\\x00\\\\x00R6\\\\x01\\\\x00\\\\x00(\\\\x06\\\\x00\\\\x00\\\\x00R\\\\x1f\\\\x01\\\\x00\\\\x00R<\\\\x00\\\\x00\\\\x00R3\\\\x01\\\\x00\\\\x00R\\\\x8a\\\\x01\\\\x00\\\\x00R,\\\\x01\\\\x00\\\\x00R \\\\x01\\\\x00\\\\x00(\\\\x00\\\\x00\\\\x00\\\\x00(\\\\x00\\\\x00\\\\x00\\\\x00s,\\\\x00\\\\x00\\\\x00lib/python2.7/site-packages/numpy/ma/core.pyR\\\\x7f\\\\x00\\\\x00\\\\x00\\\\x01\\\\t\\\\x00\\\\x00s\\\\x18\\\\x00\\\\x00\\\\x00\\\\x00\\\\x1b\\\\x1b\\\\x01\\\\x12\\\\x01\\\\x0c\\\\x01\\\\x16\\\\x01\\\\x0c\\\\x01\\\\r\\\\x01\\\\x0f\\\\x02\\\\x10\\\\x01\\\\x06\\\\x01\\\\x0f\\\\x01\\\\t\\\\x01t\\\\x12\\\\x00\\\\x00\\\\x00_MaskedPrintOptionc\\\\x00\\\\x00\\\\x00\\\\x00\\\\x00\\\\x00\\\\x00\\\\x00\\\\x02\\\\x00\\\\x00\\\\x00B`\\\\x01\\\\x00sM\\\\x00\\\\x00\\\\x00e\\\\x00\\\\x00Z\\\\x01\\\\x00d\\\\x00\\\\x00Z\\\\x02\\\\x00d\\\\x01\\\\x00\\\\x84\\\\x00\\\\x00Z\\\\x03\\\\x00d\\\\x02\\\\x00\\\\x84\\\\x00\\\\x00Z\\\\x04\\\\x00d\\\\x03\\\\x00\\\\x84\\\\x00\\\\x00Z\\\\x05\\\\x00d\\\\x04\\\\x00\\\\x84\\\\x00\\\\x00Z\\\\x06\\\\x00d\\\\x05\\\\x00d\\\\x06\\\\x00\\\\x84\\\\x01\\\\x00Z\\\\x07\\\\x00d\\\\x07\\\\x00\\\\x84\\\\x00\\\\x00Z\\\\x08\\\\x00e\\\\x08\\\\x00Z\\\\t\\\\x00RS(\\\\x08\\\\x00\\\\x00\\\\x00sN\\\\x00\\\\x00\\\\x00\\\\n    Handle the string used to represent missing data in a masked array.\\\\n\\\\n    c\\\\x02\\\\x00\\\\x00\\\\x00\\\\x02\\\\x00\\\\x00\\\\x00\\\\x02\\\\x00\\\\x00\\\\x00C`\\\\x01\\\\x00s\\\\x16\\\\x00\\\\x00\\\\x00|\\\\x01\\\\x00|\\\\x00\\\\x00_\\\\x00\\\\x00t\\\\x01\\\\x00|\\\\x00\\\\x00_\\\\x02\\\\x00d\\\\x01\\\\x00S(\\\\x02\\\\x00\\\\x00\\\\x00s9\\\\x00\\\\x00\\\\x00\\\\n        Create the masked_print_option object.\\\\n\\\\n        N(\\\\x03\\\\x00\\\\x00\\\\x00t\\\\x08\\\\x00\\\\x00\\\\x00_displayR4\\\\x01\\\\x00\\\\x00t\\\\x08\\\\x00\\\\x00\\\\x00_enabled(\\\\x02\\\\x00\\\\x00\\\\x00R9\\\\x01\\\\x00\\\\x00t\\\\x07\\\\x00\\\\x00\\\\x00display(\\\\x00\\\\x00\\\\x00\\\\x00(\\\\x00\\\\x00\\\\x00\\\\x00s,\\\\x00\\\\x00\\\\x00lib/python2.7/site-packages/numpy/ma/core.pyR:\\\\x01\\\\x00\\\\x006\\\\t\\\\x00\\\\x00s\\\\x04\\\\x00\\\\x00\\\\x00\\\\x00\\\\x05\\\\t\\\\x01c\\\\x01\\\\x00\\\\x00\\\\x00\\\\x01\\\\x00\\\\x00\\\\x00\\\\x01\\\\x00\\\\x00\\\\x00C`\\\\x01\\\\x00s\\\\x07\\\\x00\\\\x00\\\\x00|\\\\x00\\\\x00j\\\\x00\\\\x00S(\\\\x01\\\\x00\\\\x00\\\\x00sA\\\\x00\\\\x00\\\\x00\\\\n        Display the string to print for masked values.\\\\n\\\\n        (\\\\x01\\\\x00\\\\x00\\\\x00R\\\\x99\\\\x01\\\\x00\\\\x00(\\\\x01\\\\x00\\\\x00\\\\x00R9\\\\x01\\\\x00\\\\x00(\\\\x00\\\\x00\\\\x00\\\\x00(\\\\x00\\\\x00\\\\x00\\\\x00s,\\\\x00\\\\x00\\\\x00lib/python2.7/site-packages/numpy/ma/core.pyR\\\\x9b\\\\x01\\\\x00\\\\x00>\\\\t\\\\x00\\\\x00s\\\\x02\\\\x00\\\\x00\\\\x00\\\\x00\\\\x05c\\\\x02\\\\x00\\\\x00\\\\x00\\\\x02\\\\x00\\\\x00\\\\x00\\\\x02\\\\x00\\\\x00\\\\x00C`\\\\x01\\\\x00s\\\\r\\\\x00\\\\x00\\\\x00|\\\\x01\\\\x00|\\\\x00\\\\x00_\\\\x00\\\\x00d\\\\x01\\\\x00S(\\\\x02\\\\x00\\\\x00\\\\x00s=\\\\x00\\\\x00\\\\x00\\\\n        Set the string to print for masked values.\\\\n\\\\n        N(\\\\x01\\\\x00\\\\x00\\\\x00R\\\\x99\\\\x01\\\\x00\\\\x00(\\\\x02\\\\x00\\\\x00\\\\x00R9\\\\x01\\\\x00\\\\x00R\\\\xdf\\\\x00\\\\x00\\\\x00(\\\\x00\\\\x00\\\\x00\\\\x00(\\\\x00\\\\x00\\\\x00\\\\x00s,\\\\x00\\\\x00\\\\x00lib/python2.7/site-packages/numpy/ma/core.pyt\\\\x0b\\\\x00\\\\x00\\\\x00set_displayE\\\\t\\\\x00\\\\x00s\\\\x02\\\\x00\\\\x00\\\\x00\\\\x00\\\\x05c\\\\x01\\\\x00\\\\x00\\\\x00\\\\x01\\\\x00\\\\x00\\\\x00\\\\x01\\\\x00\\\\x00\\\\x00C`\\\\x01\\\\x00s\\\\x07\\\\x00\\\\x00\\\\x00|\\\\x00\\\\x00j\\\\x00\\\\x00S(\\\\x01\\\\x00\\\\x00\\\\x00s;\\\\x00\\\\x00\\\\x00\\\\n        Is the use of the display value enabled?\\\\n\\\\n        (\\\\x01\\\\x00\\\\x00\\\\x00R\\\\x9a\\\\x01\\\\x00\\\\x00(\\\\x01\\\\x00\\\\x00\\\\x00R9\\\\x01\\\\x00\\\\x00(\\\\x00\\\\x00\\\\x00\\\\x00(\\\\x00\\\\x00\\\\x00\\\\x00s,\\\\x00\\\\x00\\\\x00lib/python2.7/site-packages/numpy/ma/core.pyt\\\\x07\\\\x00\\\\x00\\\\x00enabledL\\\\t\\\\x00\\\\x00s\\\\x02\\\\x00\\\\x00\\\\x00\\\\x00\\\\x05i\\\\x01\\\\x00\\\\x00\\\\x00c\\\\x02\\\\x00\\\\x00\\\\x00\\\\x02\\\\x00\\\\x00\\\\x00\\\\x02\\\\x00\\\\x00\\\\x00C`\\\\x01\\\\x00s\\\\r\\\\x00\\\\x00\\\\x00|\\\\x01\\\\x00|\\\\x00\\\\x00_\\\\x00\\\\x00d\\\\x01\\\\x00S(\\\\x02\\\\x00\\\\x00\\\\x00s7\\\\x00\\\\x00\\\\x00\\\\n        Set the enabling shrink to `shrink`.\\\\n\\\\n        N(\\\\x01\\\\x00\\\\x00\\\\x00R\\\\x9a\\\\x01\\\\x00\\\\x00(\\\\x02\\\\x00\\\\x00\\\\x00R9\\\\x01\\\\x00\\\\x00Rw\\\\x01\\\\x00\\\\x00(\\\\x00\\\\x00\\\\x00\\\\x00(\\\\x00\\\\x00\\\\x00\\\\x00s,\\\\x00\\\\x00\\\\x00lib/python2.7/site-packages/numpy/ma/core.pyt\\\\x06\\\\x00\\\\x00\\\\x00enableS\\\\t\\\\x00\\\\x00s\\\\x02\\\\x00\\\\x00\\\\x00\\\\x00\\\\x05c\\\\x01\\\\x00\\\\x00\\\\x00\\\\x01\\\\x00\\\\x00\\\\x00\\\\x02\\\\x00\\\\x00\\\\x00C`\\\\x01\\\\x00s\\\\r\\\\x00\\\\x00\\\\x00t\\\\x00\\\\x00|\\\\x00\\\\x00j\\\\x01\\\\x00\\\\x83\\\\x01\\\\x00S(\\\\x01\\\\x00\\\\x00\\\\x00N(\\\\x02\\\\x00\\\\x00\\\\x00R\\\\xf3\\\\x00\\\\x00\\\\x00R\\\\x99\\\\x01\\\\x00\\\\x00(\\\\x01\\\\x00\\\\x00\\\\x00R9\\\\x01\\\\x00\\\\x00(\\\\x00\\\\x00\\\\x00\\\\x00(\\\\x00\\\\x00\\\\x00\\\\x00s,\\\\x00\\\\x00\\\\x00lib/python2.7/site-packages/numpy/ma/core.pyRV\\\\x01\\\\x00\\\\x00Z\\\\t\\\\x00\\\\x00s\\\\x02\\\\x00\\\\x00\\\\x00\\\\x00\\\\x01(\\\\n\\\\x00\\\\x00\\\\x00R\\\\xc2\\\\x00\\\\x00\\\\x00R\\\\xc3\\\\x00\\\\x00\\\\x00R\\\\xce\\\\x00\\\\x00\\\\x00R:\\\\x01\\\\x00\\\\x00R\\\\x9b\\\\x01\\\\x00\\\\x00R\\\\x9c\\\\x01\\\\x00\\\\x00R\\\\x9d\\\\x01\\\\x00\\\\x00R\\\\x9e\\\\x01\\\\x00\\\\x00RV\\\\x01\\\\x00\\\\x00t\\\\x08\\\\x00\\\\x00\\\\x00__repr__(\\\\x00\\\\x00\\\\x00\\\\x00(\\\\x00\\\\x00\\\\x00\\\\x00(\\\\x00\\\\x00\\\\x00\\\\x00s,\\\\x00\\\\x00\\\\x00lib/python2.7/site-packages/numpy/ma/core.pyR\\\\x98\\\\x01\\\\x00\\\\x000\\\\t\\\\x00\\\\x00s\\\\x10\\\\x00\\\\x00\\\\x00\\\\x06\\\\x04\\\\x06\\\\x02\\\\t\\\\x08\\\\t\\\\x07\\\\t\\\\x07\\\\t\\\\x07\\\\x0c\\\\x07\\\\t\\\\x03s\\\\x02\\\\x00\\\\x00\\\\x00--c\\\\x03\\\\x00\\\\x00\\\\x00\\\\x07\\\\x00\\\\x00\\\\x00\\\\x06\\\\x00\\\\x00\\\\x00C`\\\\x01\\\\x00sk\\\\x00\\\\x00\\\\x00|\\\\x00\\\\x00j\\\\x00\\\\x00j\\\\x01\\\\x00}\\\\x03\\\\x00xX\\\\x00|\\\\x03\\\\x00D]P\\\\x00}\\\\x04\\\\x00|\\\\x00\\\\x00|\\\\x04\\\\x00\\\\x19|\\\\x01\\\\x00|\\\\x04\\\\x00\\\\x19\\\\x02}\\\\x05\\\\x00}\\\\x06\\\\x00|\\\\x05\\\\x00j\\\\x00\\\\x00j\\\\x01\\\\x00rM\\\\x00t\\\\x02\\\\x00|\\\\x05\\\\x00|\\\\x06\\\\x00|\\\\x02\\\\x00\\\\x83\\\\x03\\\\x00\\\\x01q\\\\x13\\\\x00t\\\\x03\\\\x00j\\\\x04\\\\x00|\\\\x05\\\\x00|\\\\x02\\\\x00d\\\\x01\\\\x00|\\\\x06\\\\x00\\\\x83\\\\x02\\\\x01\\\\x01q\\\\x13\\\\x00Wd\\\\x02\\\\x00S(\\\\x03\\\\x00\\\\x00\\\\x00sg\\\\x00\\\\x00\\\\x00\\\\n    Puts printoptions in result where mask is True.\\\\n\\\\n    Private function allowing for recursion\\\\n\\\\n    R\\\\xbf\\\\x00\\\\x00\\\\x00N(\\\\x05\\\\x00\\\\x00\\\\x00R\\\\xe9\\\\x00\\\\x00\\\\x00R\\\\xf8\\\\x00\\\\x00\\\\x00t\\\\x16\\\\x00\\\\x00\\\\x00_recursive_printoptionR\\\\xee\\\\x00\\\\x00\\\\x00RP\\\\x01\\\\x00\\\\x00(\\\\x07\\\\x00\\\\x00\\\\x00R \\\\x01\\\\x00\\\\x00R3\\\\x01\\\\x00\\\\x00t\\\\x08\\\\x00\\\\x00\\\\x00printoptR\\\\xf8\\\\x00\\\\x00\\\\x00R\\\\xfe\\\\x00\\\\x00\\\\x00t\\\\x07\\\\x00\\\\x00\\\\x00curdatat\\\\x07\\\\x00\\\\x00\\\\x00curmask(\\\\x00\\\\x00\\\\x00\\\\x00(\\\\x00\\\\x00\\\\x00\\\\x00s,\\\\x00\\\\x00\\\\x00lib/python2.7/site-packages/numpy/ma/core.pyR\\\\xa0\\\\x01\\\\x00\\\\x00c\\\\t\\\\x00\\\\x00s\\\\x0e\\\\x00\\\\x00\\\\x00\\\\x00\\\\x07\\\\x0c\\\\x01\\\\r\\\\x01\\\\x15\\\\x01\\\\x0c\\\\x01\\\\x13\\\\x02\\\\x1a\\\\x01t\\\\x08\\\\x00\\\\x00\\\\x00long_stdse\\\\x00\\\\x00\\\\x00masked_%(name)s(data =\\\\n %(data)s,\\\\n       %(nlen)s mask =\\\\n %(mask)s,\\\\n %(nlen)s fill_value = %(fill)s)\\\\nt\\\\t\\\\x00\\\\x00\\\\x00short_stdsc\\\\x00\\\\x00\\\\x00masked_%(name)s(data = %(data)s,\\\\n       %(nlen)s mask = %(mask)s,\\\\n%(nlen)s  fill_value = %(fill)s)\\\\nt\\\\x08\\\\x00\\\\x00\\\\x00long_flxs\\\\x87\\\\x00\\\\x00\\\\x00masked_%(name)s(data =\\\\n %(data)s,\\\\n       %(nlen)s mask =\\\\n %(mask)s,\\\\n%(nlen)s  fill_value = %(fill)s,\\\\n      %(nlen)s dtype = %(dtype)s)\\\\nt\\\\t\\\\x00\\\\x00\\\\x00short_flxs\\\\x85\\\\x00\\\\x00\\\\x00masked_%(name)s(data = %(data)s,\\\\n%(nlen)s        mask = %(mask)s,\\\\n%(nlen)s  fill_value = %(fill)s,\\\\n%(nlen)s       dtype = %(dtype)s)\\\\nc\\\\x03\\\\x00\\\\x00\\\\x00\\\\x06\\\\x00\\\\x00\\\\x00\\\\x07\\\\x00\\\\x00\\\\x00C`\\\\x01\\\\x00sp\\\\x00\\\\x00\\\\x00|\\\\x00\\\\x00j\\\\x00\\\\x00j\\\\x01\\\\x00}\\\\x03\\\\x00x]\\\\x00|\\\\x03\\\\x00D]U\\\\x00}\\\\x04\\\\x00|\\\\x00\\\\x00|\\\\x04\\\\x00\\\\x19}\\\\x05\\\\x00|\\\\x05\\\\x00j\\\\x00\\\\x00j\\\\x01\\\\x00rJ\\\\x00t\\\\x02\\\\x00|\\\\x05\\\\x00|\\\\x01\\\\x00|\\\\x04\\\\x00\\\\x19|\\\\x02\\\\x00|\\\\x04\\\\x00\\\\x19\\\\x83\\\\x03\\\\x00\\\\x01q\\\\x13\\\\x00t\\\\x03\\\\x00j\\\\x04\\\\x00|\\\\x05\\\\x00|\\\\x02\\\\x00|\\\\x04\\\\x00\\\\x19d\\\\x01\\\\x00|\\\\x01\\\\x00|\\\\x04\\\\x00\\\\x19\\\\x83\\\\x02\\\\x01\\\\x01q\\\\x13\\\\x00Wd\\\\x02\\\\x00S(\\\\x03\\\\x00\\\\x00\\\\x00s2\\\\x00\\\\x00\\\\x00\\\\n    Recursively fill `a` with `fill_value`.\\\\n\\\\n    R\\\\xbf\\\\x00\\\\x00\\\\x00N(\\\\x05\\\\x00\\\\x00\\\\x00R\\\\xe9\\\\x00\\\\x00\\\\x00R\\\\xf8\\\\x00\\\\x00\\\\x00t\\\\x11\\\\x00\\\\x00\\\\x00_recursive_filledR\\\\xee\\\\x00\\\\x00\\\\x00RP\\\\x01\\\\x00\\\\x00(\\\\x06\\\\x00\\\\x00\\\\x00R\\\\x1f\\\\x01\\\\x00\\\\x00R3\\\\x01\\\\x00\\\\x00R\\\\x1b\\\\x01\\\\x00\\\\x00R\\\\xf8\\\\x00\\\\x00\\\\x00R\\\\xfe\\\\x00\\\\x00\\\\x00t\\\\x07\\\\x00\\\\x00\\\\x00current(\\\\x00\\\\x00\\\\x00\\\\x00(\\\\x00\\\\x00\\\\x00\\\\x00s,\\\\x00\\\\x00\\\\x00lib/python2.7/site-packages/numpy/ma/core.pyR\\\\xa8\\\\x01\\\\x00\\\\x00\\\\x93\\\\t\\\\x00\\\\x00s\\\\x0c\\\\x00\\\\x00\\\\x00\\\\x00\\\\x05\\\\x0c\\\\x01\\\\r\\\\x01\\\\n\\\\x01\\\\x0c\\\\x01\\\\x1b\\\\x02c\\\\x01\\\\x00\\\\x00\\\\x00\\\\x05\\\\x00\\\\x00\\\\x00\\\\x06\\\\x00\\\\x00\\\\x00\\\\x03`\\\\x01\\\\x00sC\\\\x01\\\\x00\\\\x00\\\\x87\\\\x00\\\\x00f\\\\x01\\\\x00d\\\\x01\\\\x00\\\\x86\\\\x00\\\\x00\\\\x89\\\\x00\\\\x00t\\\\x00\\\\x00j\\\\x01\\\\x00|\\\\x00\\\\x00\\\\x83\\\\x01\\\\x00}\\\\x00\\\\x00|\\\\x00\\\\x00j\\\\x02\\\\x00}\\\\x01\\\\x00|\\\\x00\\\\x00j\\\\x03\\\\x00\\\\x83\\\\x00\\\\x00}\\\\x00\\\\x00t\\\\x04\\\\x00|\\\\x00\\\\x00t\\\\x05\\\\x00\\\\x83\\\\x02\\\\x00r\\\\xc8\\\\x00t\\\\x00\\\\x00j\\\\x06\\\\x00g\\\\x00\\\\x00|\\\\x00\\\\x00j\\\\x07\\\\x00D]\\\\x1e\\\\x00}\\\\x02\\\\x00t\\\\x08\\\\x00\\\\x88\\\\x00\\\\x00|\\\\x02\\\\x00j\\\\t\\\\x00\\\\x83\\\\x00\\\\x00\\\\x83\\\\x01\\\\x00\\\\x83\\\\x01\\\\x00^\\\\x02\\\\x00qR\\\\x00\\\\x83\\\\x01\\\\x00}\\\\x03\\\\x00|\\\\x03\\\\x00j\\\\n\\\\x00t\\\\x05\\\\x00\\\\x83\\\\x01\\\\x00}\\\\x03\\\\x00t\\\\x00\\\\x00j\\\\x06\\\\x00g\\\\x00\\\\x00t\\\\x0b\\\\x00|\\\\x00\\\\x00\\\\x83\\\\x01\\\\x00D]\\\\x1e\\\\x00}\\\\x02\\\\x00t\\\\x08\\\\x00\\\\x88\\\\x00\\\\x00|\\\\x02\\\\x00j\\\\t\\\\x00\\\\x83\\\\x00\\\\x00\\\\x83\\\\x01\\\\x00\\\\x83\\\\x01\\\\x00^\\\\x02\\\\x00q\\\\x9b\\\\x00\\\\x83\\\\x01\\\\x00|\\\\x03\\\\x00_\\\\x0c\\\\x00n4\\\\x00t\\\\x00\\\\x00j\\\\x06\\\\x00g\\\\x00\\\\x00|\\\\x00\\\\x00D]\\\\x1e\\\\x00}\\\\x02\\\\x00t\\\\x08\\\\x00\\\\x88\\\\x00\\\\x00|\\\\x02\\\\x00j\\\\t\\\\x00\\\\x83\\\\x00\\\\x00\\\\x83\\\\x01\\\\x00\\\\x83\\\\x01\\\\x00^\\\\x02\\\\x00q\\\\xd5\\\\x00\\\\x83\\\\x01\\\\x00}\\\\x03\\\\x00t\\\\r\\\\x00|\\\\x01\\\\x00\\\\x83\\\\x01\\\\x00d\\\\x02\\\\x00k\\\\x04\\\\x00r?\\\\x01t\\\\x0e\\\\x00|\\\\x03\\\\x00j\\\\x02\\\\x00\\\\x83\\\\x01\\\\x00}\\\\x04\\\\x00|\\\\x01\\\\x00|\\\\x04\\\\x00d\\\\x03\\\\x00<t\\\\x08\\\\x00\\\\x88\\\\x00\\\\x00|\\\\x04\\\\x00\\\\x83\\\\x01\\\\x00\\\\x83\\\\x01\\\\x00|\\\\x03\\\\x00_\\\\x02\\\\x00n\\\\x00\\\\x00|\\\\x03\\\\x00S(\\\\x04\\\\x00\\\\x00\\\\x00s4\\\\x02\\\\x00\\\\x00\\\\n    Flatten a structured array.\\\\n\\\\n    The data type of the output is chosen such that it can represent all of the\\\\n    (nested) fields.\\\\n\\\\n    Parameters\\\\n    ----------\\\\n    a : structured array\\\\n\\\\n    Returns\\\\n    -------\\\\n    output : masked array or ndarray\\\\n        A flattened masked array if the input is a masked array, otherwise a\\\\n        standard ndarray.\\\\n\\\\n    Examples\\\\n    --------\\\\n    >>> ndtype = [(\\\\\\\'a\\\\\\\', int), (\\\\\\\'b\\\\\\\', float)]\\\\n    >>> a = np.array([(1, 1), (2, 2)], dtype=ndtype)\\\\n    >>> flatten_structured_array(a)\\\\n    array([[1., 1.],\\\\n           [2., 2.]])\\\\n\\\\n    c\\\\x01\\\\x00\\\\x00\\\\x00\\\\x03\\\\x00\\\\x00\\\\x00\\\\x04\\\\x00\\\\x00\\\\x003`\\\\x01\\\\x00sN\\\\x00\\\\x00\\\\x00xG\\\\x00t\\\\x00\\\\x00|\\\\x00\\\\x00\\\\x83\\\\x01\\\\x00D]9\\\\x00}\\\\x01\\\\x00t\\\\x01\\\\x00|\\\\x01\\\\x00d\\\\x01\\\\x00\\\\x83\\\\x02\\\\x00rA\\\\x00x!\\\\x00\\\\x88\\\\x00\\\\x00|\\\\x01\\\\x00\\\\x83\\\\x01\\\\x00D]\\\\x0b\\\\x00}\\\\x02\\\\x00|\\\\x02\\\\x00V\\\\x01q/\\\\x00Wq\\\\r\\\\x00|\\\\x01\\\\x00V\\\\x01q\\\\r\\\\x00Wd\\\\x02\\\\x00S(\\\\x03\\\\x00\\\\x00\\\\x00s;\\\\x00\\\\x00\\\\x00\\\\n        Flattens a compound of nested iterables.\\\\n\\\\n        R\\\\x82\\\\x01\\\\x00\\\\x00N(\\\\x02\\\\x00\\\\x00\\\\x00t\\\\x04\\\\x00\\\\x00\\\\x00iterR\\\\xeb\\\\x00\\\\x00\\\\x00(\\\\x03\\\\x00\\\\x00\\\\x00t\\\\x08\\\\x00\\\\x00\\\\x00iterablet\\\\x03\\\\x00\\\\x00\\\\x00elmR\\\\xd1\\\\x00\\\\x00\\\\x00(\\\\x01\\\\x00\\\\x00\\\\x00t\\\\x10\\\\x00\\\\x00\\\\x00flatten_sequence(\\\\x00\\\\x00\\\\x00\\\\x00s,\\\\x00\\\\x00\\\\x00lib/python2.7/site-packages/numpy/ma/core.pyR\\\\xad\\\\x01\\\\x00\\\\x00\\\\xbc\\\\t\\\\x00\\\\x00s\\\\n\\\\x00\\\\x00\\\\x00\\\\x00\\\\x05\\\\x13\\\\x01\\\\x0f\\\\x01\\\\x13\\\\x01\\\\x0c\\\\x02i\\\\x01\\\\x00\\\\x00\\\\x00i\\\\x00\\\\x00\\\\x00\\\\x00(\\\\x0f\\\\x00\\\\x00\\\\x00R\\\\xee\\\\x00\\\\x00\\\\x00R/\\\\x00\\\\x00\\\\x00R\\\\xab\\\\x00\\\\x00\\\\x00R\\\\xa2\\\\x00\\\\x00\\\\x00R\\\\xed\\\\x00\\\\x00\\\\x00R\\\\x17\\\\x00\\\\x00\\\\x00R\\\\n\\\\x00\\\\x00\\\\x00R/\\\\x01\\\\x00\\\\x00R\\\\xfa\\\\x00\\\\x00\\\\x00R\\\\x0e\\\\x01\\\\x00\\\\x00R1\\\\x01\\\\x00\\\\x00RZ\\\\x00\\\\x00\\\\x00R6\\\\x01\\\\x00\\\\x00R\\\\x0b\\\\x01\\\\x00\\\\x00Rq\\\\x01\\\\x00\\\\x00(\\\\x05\\\\x00\\\\x00\\\\x00R\\\\x1f\\\\x01\\\\x00\\\\x00t\\\\x08\\\\x00\\\\x00\\\\x00inishapeRT\\\\x01\\\\x00\\\\x00t\\\\x03\\\\x00\\\\x00\\\\x00outRx\\\\x01\\\\x00\\\\x00(\\\\x00\\\\x00\\\\x00\\\\x00(\\\\x01\\\\x00\\\\x00\\\\x00R\\\\xad\\\\x01\\\\x00\\\\x00s,\\\\x00\\\\x00\\\\x00lib/python2.7/site-packages/numpy/ma/core.pyRQ\\\\x00\\\\x00\\\\x00\\\\xa1\\\\t\\\\x00\\\\x00s\\\\x1e\\\\x00\\\\x00\\\\x00\\\\x00\\\\x1b\\\\x0f\\\\x0c\\\\x0f\\\\x01\\\\t\\\\x01\\\\x0c\\\\x01\\\\x0f\\\\x017\\\\x01\\\\x0f\\\\x01\\\\t\\\\x017\\\\x024\\\\x01\\\\x12\\\\x01\\\\x0f\\\\x01\\\\n\\\\x01\\\\x18\\\\x01c\\\\x02\\\\x00\\\\x00\\\\x00\\\\x04\\\\x00\\\\x00\\\\x00\\\\x04\\\\x00\\\\x00\\\\x00\\\\x03`\\\\x01\\\\x00s^\\\\x00\\\\x00\\\\x00\\\\x87\\\\x00\\\\x00\\\\x87\\\\x01\\\\x00f\\\\x02\\\\x00d\\\\x01\\\\x00\\\\x86\\\\x00\\\\x00}\\\\x02\\\\x00t\\\\x00\\\\x00t\\\\x01\\\\x00\\\\x88\\\\x00\\\\x00d\\\\x02\\\\x00\\\\x83\\\\x03\\\\x00p3\\\\x00t\\\\x00\\\\x00t\\\\x03\\\\x00\\\\x88\\\\x00\\\\x00d\\\\x02\\\\x00\\\\x83\\\\x03\\\\x00}\\\\x03\\\\x00|\\\\x03\\\\x00d\\\\x02\\\\x00k\\\\t\\\\x00rQ\\\\x00|\\\\x03\\\\x00j\\\\x04\\\\x00|\\\\x02\\\\x00_\\\\x04\\\\x00n\\\\x00\\\\x00\\\\x88\\\\x00\\\\x00|\\\\x02\\\\x00_\\\\x05\\\\x00|\\\\x02\\\\x00S(\\\\x03\\\\x00\\\\x00\\\\x00s\\\\x1f\\\\x03\\\\x00\\\\x00\\\\n    Return a class method wrapper around a basic array method.\\\\n\\\\n    Creates a class method which returns a masked array, where the new\\\\n    ``_data`` array is the output of the corresponding basic method called\\\\n    on the original ``_data``.\\\\n\\\\n    If `onmask` is True, the new mask is the output of the method called\\\\n    on the initial mask. Otherwise, the new mask is just a reference\\\\n    to the initial mask.\\\\n\\\\n    Parameters\\\\n    ----------\\\\n    funcname : str\\\\n        Name of the function to apply on data.\\\\n    onmask : bool\\\\n        Whether the mask must be processed also (True) or left\\\\n        alone (False). Default is True. Make available as `_onmask`\\\\n        attribute.\\\\n\\\\n    Returns\\\\n    -------\\\\n    method : instancemethod\\\\n        Class method wrapper of the specified basic array method.\\\\n\\\\n    c\\\\x01\\\\x00\\\\x00\\\\x00\\\\x05\\\\x00\\\\x00\\\\x00\\\\x04\\\\x00\\\\x00\\\\x00\\\\x1f`\\\\x01\\\\x00s\\\\xc0\\\\x00\\\\x00\\\\x00t\\\\x00\\\\x00|\\\\x00\\\\x00j\\\\x01\\\\x00\\\\x88\\\\x00\\\\x00\\\\x83\\\\x02\\\\x00|\\\\x01\\\\x00|\\\\x02\\\\x00\\\\x8e\\\\x00\\\\x00}\\\\x03\\\\x00|\\\\x03\\\\x00j\\\\x02\\\\x00t\\\\x03\\\\x00|\\\\x00\\\\x00\\\\x83\\\\x01\\\\x00\\\\x83\\\\x01\\\\x00}\\\\x03\\\\x00|\\\\x03\\\\x00j\\\\x04\\\\x00|\\\\x00\\\\x00\\\\x83\\\\x01\\\\x00\\\\x01|\\\\x00\\\\x00j\\\\x05\\\\x00}\\\\x04\\\\x00|\\\\x03\\\\x00j\\\\x06\\\\x00r\\\\x96\\\\x00\\\\x88\\\\x01\\\\x00se\\\\x00|\\\\x03\\\\x00j\\\\x07\\\\x00|\\\\x04\\\\x00\\\\x83\\\\x01\\\\x00\\\\x01q\\\\xbc\\\\x00|\\\\x04\\\\x00t\\\\x08\\\\x00k\\\\t\\\\x00r\\\\xbc\\\\x00|\\\\x03\\\\x00j\\\\x07\\\\x00t\\\\x00\\\\x00|\\\\x04\\\\x00\\\\x88\\\\x00\\\\x00\\\\x83\\\\x02\\\\x00|\\\\x01\\\\x00|\\\\x02\\\\x00\\\\x8e\\\\x00\\\\x00\\\\x83\\\\x01\\\\x00\\\\x01q\\\\xbc\\\\x00n&\\\\x00|\\\\x04\\\\x00j\\\\x06\\\\x00r\\\\xbc\\\\x00|\\\\x04\\\\x00j\\\\t\\\\x00j\\\\n\\\\x00\\\\x0cr\\\\xbc\\\\x00|\\\\x04\\\\x00j\\\\x0b\\\\x00\\\\x83\\\\x00\\\\x00r\\\\xbc\\\\x00t\\\\x0c\\\\x00S|\\\\x03\\\\x00S(\\\\x01\\\\x00\\\\x00\\\\x00N(\\\\r\\\\x00\\\\x00\\\\x00RJ\\\\x01\\\\x00\\\\x00R/\\\\x01\\\\x00\\\\x00R1\\\\x01\\\\x00\\\\x00R&\\\\x01\\\\x00\\\\x00RQ\\\\x01\\\\x00\\\\x00R6\\\\x01\\\\x00\\\\x00R\\\\x93\\\\x00\\\\x00\\\\x00t\\\\x0b\\\\x00\\\\x00\\\\x00__setmask__R\\\\x95\\\\x00\\\\x00\\\\x00R\\\\xe9\\\\x00\\\\x00\\\\x00R\\\\xf8\\\\x00\\\\x00\\\\x00R\\\\x1b\\\\x00\\\\x00\\\\x00Ry\\\\x00\\\\x00\\\\x00(\\\\x05\\\\x00\\\\x00\\\\x00R9\\\\x01\\\\x00\\\\x00RR\\\\x01\\\\x00\\\\x00t\\\\x06\\\\x00\\\\x00\\\\x00paramsR \\\\x01\\\\x00\\\\x00R3\\\\x01\\\\x00\\\\x00(\\\\x02\\\\x00\\\\x00\\\\x00t\\\\x08\\\\x00\\\\x00\\\\x00funcnamet\\\\x06\\\\x00\\\\x00\\\\x00onmask(\\\\x00\\\\x00\\\\x00\\\\x00s,\\\\x00\\\\x00\\\\x00lib/python2.7/site-packages/numpy/ma/core.pyt\\\\x0e\\\\x00\\\\x00\\\\x00wrapped_method\\\\xf4\\\\t\\\\x00\\\\x00s\\\\x18\\\\x00\\\\x00\\\\x00\\\\x00\\\\x01\\\\x1b\\\\x01\\\\x15\\\\x01\\\\r\\\\x01\\\\t\\\\x01\\\\t\\\\x01\\\\x06\\\\x01\\\\x10\\\\x01\\\\x0c\\\\x01%\\\\x02"\\\\x01\\\\x04\\\\x01N(\\\\x06\\\\x00\\\\x00\\\\x00RJ\\\\x01\\\\x00\\\\x00R\\\\x04\\\\x00\\\\x00\\\\x00R\\\\xc4\\\\x00\\\\x00\\\\x00R\\\\xee\\\\x00\\\\x00\\\\x00R\\\\xce\\\\x00\\\\x00\\\\x00R\\\\xc2\\\\x00\\\\x00\\\\x00(\\\\x04\\\\x00\\\\x00\\\\x00R\\\\xb2\\\\x01\\\\x00\\\\x00R\\\\xb3\\\\x01\\\\x00\\\\x00R\\\\xb4\\\\x01\\\\x00\\\\x00t\\\\x07\\\\x00\\\\x00\\\\x00methdoc(\\\\x00\\\\x00\\\\x00\\\\x00(\\\\x02\\\\x00\\\\x00\\\\x00R\\\\xb2\\\\x01\\\\x00\\\\x00R\\\\xb3\\\\x01\\\\x00\\\\x00s,\\\\x00\\\\x00\\\\x00lib/python2.7/site-packages/numpy/ma/core.pyt\\\\x0c\\\\x00\\\\x00\\\\x00_arraymethod\\\\xd9\\\\t\\\\x00\\\\x00s\\\\x0c\\\\x00\\\\x00\\\\x00\\\\x00\\\\x1b\\\\x12\\\\x0e$\\\\x01\\\\x0c\\\\x01\\\\x0f\\\\x01\\\\t\\\\x01t\\\\x0e\\\\x00\\\\x00\\\\x00MaskedIteratorc\\\\x00\\\\x00\\\\x00\\\\x00\\\\x00\\\\x00\\\\x00\\\\x00\\\\x01\\\\x00\\\\x00\\\\x00B`\\\\x01\\\\x00sA\\\\x00\\\\x00\\\\x00e\\\\x00\\\\x00Z\\\\x01\\\\x00d\\\\x00\\\\x00Z\\\\x02\\\\x00d\\\\x01\\\\x00\\\\x84\\\\x00\\\\x00Z\\\\x03\\\\x00d\\\\x02\\\\x00\\\\x84\\\\x00\\\\x00Z\\\\x04\\\\x00d\\\\x03\\\\x00\\\\x84\\\\x00\\\\x00Z\\\\x05\\\\x00d\\\\x04\\\\x00\\\\x84\\\\x00\\\\x00Z\\\\x06\\\\x00d\\\\x05\\\\x00\\\\x84\\\\x00\\\\x00Z\\\\x07\\\\x00e\\\\x07\\\\x00Z\\\\x08\\\\x00RS(\\\\x06\\\\x00\\\\x00\\\\x00s\\\\xbf\\\\x04\\\\x00\\\\x00\\\\n    Flat iterator object to iterate over masked arrays.\\\\n\\\\n    A `MaskedIterator` iterator is returned by ``x.flat`` for any masked array\\\\n    `x`. It allows iterating over the array as if it were a 1-D array,\\\\n    either in a for-loop or by calling its `next` method.\\\\n\\\\n    Iteration is done in C-contiguous style, with the last index varying the\\\\n    fastest. The iterator can also be indexed using basic slicing or\\\\n    advanced indexing.\\\\n\\\\n    See Also\\\\n    --------\\\\n    MaskedArray.flat : Return a flat iterator over an array.\\\\n    MaskedArray.flatten : Returns a flattened copy of an array.\\\\n\\\\n    Notes\\\\n    -----\\\\n    `MaskedIterator` is not exported by the `ma` module. Instead of\\\\n    instantiating a `MaskedIterator` directly, use `MaskedArray.flat`.\\\\n\\\\n    Examples\\\\n    --------\\\\n    >>> x = np.ma.array(arange(6).reshape(2, 3))\\\\n    >>> fl = x.flat\\\\n    >>> type(fl)\\\\n    <class \\\\\\\'numpy.ma.core.MaskedIterator\\\\\\\'>\\\\n    >>> for item in fl:\\\\n    ...     print(item)\\\\n    ...\\\\n    0\\\\n    1\\\\n    2\\\\n    3\\\\n    4\\\\n    5\\\\n\\\\n    Extracting more than a single element b indexing the `MaskedIterator`\\\\n    returns a masked array:\\\\n\\\\n    >>> fl[2:4]\\\\n    masked_array(data = [2 3],\\\\n                 mask = False,\\\\n           fill_value = 999999)\\\\n\\\\n    c\\\\x02\\\\x00\\\\x00\\\\x00\\\\x02\\\\x00\\\\x00\\\\x00\\\\x02\\\\x00\\\\x00\\\\x00C`\\\\x01\\\\x00sF\\\\x00\\\\x00\\\\x00|\\\\x01\\\\x00|\\\\x00\\\\x00_\\\\x00\\\\x00|\\\\x01\\\\x00j\\\\x01\\\\x00j\\\\x02\\\\x00|\\\\x00\\\\x00_\\\\x03\\\\x00|\\\\x01\\\\x00j\\\\x04\\\\x00t\\\\x05\\\\x00k\\\\x08\\\\x00r3\\\\x00d\\\\x00\\\\x00|\\\\x00\\\\x00_\\\\x07\\\\x00n\\\\x0f\\\\x00|\\\\x01\\\\x00j\\\\x04\\\\x00j\\\\x02\\\\x00|\\\\x00\\\\x00_\\\\x07\\\\x00d\\\\x00\\\\x00S(\\\\x01\\\\x00\\\\x00\\\\x00N(\\\\x08\\\\x00\\\\x00\\\\x00Rb\\\\x01\\\\x00\\\\x00R/\\\\x01\\\\x00\\\\x00t\\\\x04\\\\x00\\\\x00\\\\x00flatt\\\\x08\\\\x00\\\\x00\\\\x00dataiterR6\\\\x01\\\\x00\\\\x00R\\\\x95\\\\x00\\\\x00\\\\x00R\\\\xc4\\\\x00\\\\x00\\\\x00t\\\\x08\\\\x00\\\\x00\\\\x00maskiter(\\\\x02\\\\x00\\\\x00\\\\x00R9\\\\x01\\\\x00\\\\x00Rb\\\\x01\\\\x00\\\\x00(\\\\x00\\\\x00\\\\x00\\\\x00(\\\\x00\\\\x00\\\\x00\\\\x00s,\\\\x00\\\\x00\\\\x00lib/python2.7/site-packages/numpy/ma/core.pyR:\\\\x01\\\\x00\\\\x009\\\\n\\\\x00\\\\x00s\\\\n\\\\x00\\\\x00\\\\x00\\\\x00\\\\x01\\\\t\\\\x01\\\\x0f\\\\x02\\\\x0f\\\\x01\\\\x0c\\\\x02c\\\\x01\\\\x00\\\\x00\\\\x00\\\\x01\\\\x00\\\\x00\\\\x00\\\\x01\\\\x00\\\\x00\\\\x00C`\\\\x01\\\\x00s\\\\x04\\\\x00\\\\x00\\\\x00|\\\\x00\\\\x00S(\\\\x01\\\\x00\\\\x00\\\\x00N(\\\\x00\\\\x00\\\\x00\\\\x00(\\\\x01\\\\x00\\\\x00\\\\x00R9\\\\x01\\\\x00\\\\x00(\\\\x00\\\\x00\\\\x00\\\\x00(\\\\x00\\\\x00\\\\x00\\\\x00s,\\\\x00\\\\x00\\\\x00lib/python2.7/site-packages/numpy/ma/core.pyR\\\\x82\\\\x01\\\\x00\\\\x00B\\\\n\\\\x00\\\\x00s\\\\x02\\\\x00\\\\x00\\\\x00\\\\x00\\\\x01c\\\\x02\\\\x00\\\\x00\\\\x00\\\\x04\\\\x00\\\\x00\\\\x00\\\\x06\\\\x00\\\\x00\\\\x00C`\\\\x01\\\\x00s\\\\xab\\\\x00\\\\x00\\\\x00|\\\\x00\\\\x00j\\\\x00\\\\x00j\\\\x01\\\\x00|\\\\x01\\\\x00\\\\x83\\\\x01\\\\x00j\\\\x02\\\\x00t\\\\x03\\\\x00|\\\\x00\\\\x00j\\\\x04\\\\x00\\\\x83\\\\x01\\\\x00\\\\x83\\\\x01\\\\x00}\\\\x02\\\\x00|\\\\x00\\\\x00j\\\\x05\\\\x00d\\\\x00\\\\x00k\\\\t\\\\x00r\\\\xa7\\\\x00|\\\\x00\\\\x00j\\\\x05\\\\x00j\\\\x01\\\\x00|\\\\x01\\\\x00\\\\x83\\\\x01\\\\x00}\\\\x03\\\\x00t\\\\x07\\\\x00|\\\\x03\\\\x00t\\\\x08\\\\x00\\\\x83\\\\x02\\\\x00rl\\\\x00|\\\\x02\\\\x00j\\\\t\\\\x00|\\\\x03\\\\x00_\\\\t\\\\x00|\\\\x03\\\\x00|\\\\x02\\\\x00_\\\\n\\\\x00q\\\\xa7\\\\x00t\\\\x07\\\\x00|\\\\x03\\\\x00t\\\\x0b\\\\x00j\\\\x0c\\\\x00\\\\x83\\\\x02\\\\x00r\\\\x9a\\\\x00t\\\\r\\\\x00|\\\\x02\\\\x00d\\\\x01\\\\x00|\\\\x03\\\\x00d\\\\x02\\\\x00|\\\\x00\\\\x00j\\\\x04\\\\x00j\\\\x0e\\\\x00\\\\x83\\\\x01\\\\x02S|\\\\x03\\\\x00r\\\\xa7\\\\x00t\\\\x0f\\\\x00Sn\\\\x00\\\\x00|\\\\x02\\\\x00S(\\\\x03\\\\x00\\\\x00\\\\x00NR3\\\\x01\\\\x00\\\\x00t\\\\x08\\\\x00\\\\x00\\\\x00hardmask(\\\\x10\\\\x00\\\\x00\\\\x00R\\\\xb9\\\\x01\\\\x00\\\\x00t\\\\x0b\\\\x00\\\\x00\\\\x00__getitem__R1\\\\x01\\\\x00\\\\x00R&\\\\x01\\\\x00\\\\x00Rb\\\\x01\\\\x00\\\\x00R\\\\xba\\\\x01\\\\x00\\\\x00R\\\\xc4\\\\x00\\\\x00\\\\x00R\\\\xed\\\\x00\\\\x00\\\\x00R\\\\x04\\\\x00\\\\x00\\\\x00R\\\\xab\\\\x00\\\\x00\\\\x00R6\\\\x01\\\\x00\\\\x00R\\\\xee\\\\x00\\\\x00\\\\x00R\\\\x15\\\\x01\\\\x00\\\\x00R\\\\x92\\\\x00\\\\x00\\\\x00t\\\\t\\\\x00\\\\x00\\\\x00_hardmaskRy\\\\x00\\\\x00\\\\x00(\\\\x04\\\\x00\\\\x00\\\\x00R9\\\\x01\\\\x00\\\\x00t\\\\x04\\\\x00\\\\x00\\\\x00indxR \\\\x01\\\\x00\\\\x00R6\\\\x01\\\\x00\\\\x00(\\\\x00\\\\x00\\\\x00\\\\x00(\\\\x00\\\\x00\\\\x00\\\\x00s,\\\\x00\\\\x00\\\\x00lib/python2.7/site-packages/numpy/ma/core.pyR\\\\xbc\\\\x01\\\\x00\\\\x00E\\\\n\\\\x00\\\\x00s\\\\x16\\\\x00\\\\x00\\\\x00\\\\x00\\\\x01$\\\\x01\\\\x0f\\\\x01\\\\x12\\\\x01\\\\x0f\\\\x02\\\\x0c\\\\x01\\\\x0c\\\\x01\\\\x12\\\\x01\\\\x1c\\\\x01\\\\x06\\\\x01\\\\x07\\\\x01c\\\\x03\\\\x00\\\\x00\\\\x00\\\\x03\\\\x00\\\\x00\\\\x00\\\\x03\\\\x00\\\\x00\\\\x00C`\\\\x01\\\\x00s<\\\\x00\\\\x00\\\\x00t\\\\x00\\\\x00|\\\\x02\\\\x00\\\\x83\\\\x01\\\\x00|\\\\x00\\\\x00j\\\\x01\\\\x00|\\\\x01\\\\x00<|\\\\x00\\\\x00j\\\\x02\\\\x00d\\\\x00\\\\x00k\\\\t\\\\x00r8\\\\x00t\\\\x04\\\\x00|\\\\x02\\\\x00\\\\x83\\\\x01\\\\x00|\\\\x00\\\\x00j\\\\x02\\\\x00|\\\\x01\\\\x00<n\\\\x00\\\\x00d\\\\x00\\\\x00S(\\\\x01\\\\x00\\\\x00\\\\x00N(\\\\x05\\\\x00\\\\x00\\\\x00RX\\\\x00\\\\x00\\\\x00R\\\\xb9\\\\x01\\\\x00\\\\x00R\\\\xba\\\\x01\\\\x00\\\\x00R\\\\xc4\\\\x00\\\\x00\\\\x00RZ\\\\x00\\\\x00\\\\x00(\\\\x03\\\\x00\\\\x00\\\\x00R9\\\\x01\\\\x00\\\\x00t\\\\x05\\\\x00\\\\x00\\\\x00indexR\\\\x8e\\\\x01\\\\x00\\\\x00(\\\\x00\\\\x00\\\\x00\\\\x00(\\\\x00\\\\x00\\\\x00\\\\x00s,\\\\x00\\\\x00\\\\x00lib/python2.7/site-packages/numpy/ma/core.pyt\\\\x0b\\\\x00\\\\x00\\\\x00__setitem__T\\\\n\\\\x00\\\\x00s\\\\x06\\\\x00\\\\x00\\\\x00\\\\x00\\\\x01\\\\x13\\\\x01\\\\x0f\\\\x01c\\\\x01\\\\x00\\\\x00\\\\x00\\\\x03\\\\x00\\\\x00\\\\x00\\\\x06\\\\x00\\\\x00\\\\x00C`\\\\x01\\\\x00sl\\\\x00\\\\x00\\\\x00t\\\\x00\\\\x00|\\\\x00\\\\x00j\\\\x01\\\\x00\\\\x83\\\\x01\\\\x00}\\\\x01\\\\x00|\\\\x00\\\\x00j\\\\x02\\\\x00d\\\\x03\\\\x00k\\\\t\\\\x00rh\\\\x00t\\\\x00\\\\x00|\\\\x00\\\\x00j\\\\x02\\\\x00\\\\x83\\\\x01\\\\x00}\\\\x02\\\\x00t\\\\x04\\\\x00|\\\\x02\\\\x00t\\\\x05\\\\x00j\\\\x06\\\\x00\\\\x83\\\\x02\\\\x00r[\\\\x00t\\\\x07\\\\x00|\\\\x01\\\\x00d\\\\x01\\\\x00|\\\\x02\\\\x00d\\\\x02\\\\x00|\\\\x00\\\\x00j\\\\x08\\\\x00j\\\\t\\\\x00\\\\x83\\\\x01\\\\x02S|\\\\x02\\\\x00rh\\\\x00t\\\\n\\\\x00Sn\\\\x00\\\\x00|\\\\x01\\\\x00S(\\\\x04\\\\x00\\\\x00\\\\x00s@\\\\x02\\\\x00\\\\x00\\\\n        Return the next value, or raise StopIteration.\\\\n\\\\n        Examples\\\\n        --------\\\\n        >>> x = np.ma.array([3, 2], mask=[0, 1])\\\\n        >>> fl = x.flat\\\\n        >>> fl.next()\\\\n        3\\\\n        >>> fl.next()\\\\n        masked_array(data = --,\\\\n                     mask = True,\\\\n               fill_value = 1e+20)\\\\n        >>> fl.next()\\\\n        Traceback (most recent call last):\\\\n          File "<stdin>", line 1, in <module>\\\\n          File "/home/ralf/python/numpy/numpy/ma/core.py", line 2243, in next\\\\n            d = self.dataiter.next()\\\\n        StopIteration\\\\n\\\\n        R3\\\\x01\\\\x00\\\\x00R\\\\xbb\\\\x01\\\\x00\\\\x00N(\\\\x0b\\\\x00\\\\x00\\\\x00t\\\\x04\\\\x00\\\\x00\\\\x00nextR\\\\xb9\\\\x01\\\\x00\\\\x00R\\\\xba\\\\x01\\\\x00\\\\x00R\\\\xc4\\\\x00\\\\x00\\\\x00R\\\\xed\\\\x00\\\\x00\\\\x00R\\\\xee\\\\x00\\\\x00\\\\x00R\\\\x15\\\\x01\\\\x00\\\\x00R\\\\x92\\\\x00\\\\x00\\\\x00Rb\\\\x01\\\\x00\\\\x00R\\\\xbd\\\\x01\\\\x00\\\\x00Ry\\\\x00\\\\x00\\\\x00(\\\\x03\\\\x00\\\\x00\\\\x00R9\\\\x01\\\\x00\\\\x00RT\\\\x01\\\\x00\\\\x00R\\\\xde\\\\x00\\\\x00\\\\x00(\\\\x00\\\\x00\\\\x00\\\\x00(\\\\x00\\\\x00\\\\x00\\\\x00s,\\\\x00\\\\x00\\\\x00lib/python2.7/site-packages/numpy/ma/core.pyt\\\\x08\\\\x00\\\\x00\\\\x00__next__Y\\\\n\\\\x00\\\\x00s\\\\x10\\\\x00\\\\x00\\\\x00\\\\x00\\\\x16\\\\x0f\\\\x01\\\\x0f\\\\x01\\\\x0f\\\\x01\\\\x12\\\\x01\\\\x1c\\\\x01\\\\x06\\\\x01\\\\x07\\\\x01(\\\\t\\\\x00\\\\x00\\\\x00R\\\\xc2\\\\x00\\\\x00\\\\x00R\\\\xc3\\\\x00\\\\x00\\\\x00R\\\\xce\\\\x00\\\\x00\\\\x00R:\\\\x01\\\\x00\\\\x00R\\\\x82\\\\x01\\\\x00\\\\x00R\\\\xbc\\\\x01\\\\x00\\\\x00R\\\\xc0\\\\x01\\\\x00\\\\x00R\\\\xc2\\\\x01\\\\x00\\\\x00R\\\\xc1\\\\x01\\\\x00\\\\x00(\\\\x00\\\\x00\\\\x00\\\\x00(\\\\x00\\\\x00\\\\x00\\\\x00(\\\\x00\\\\x00\\\\x00\\\\x00s,\\\\x00\\\\x00\\\\x00lib/python2.7/site-packages/numpy/ma/core.pyR\\\\xb7\\\\x01\\\\x00\\\\x00\\\\t\\\\n\\\\x00\\\\x00s\\\\x0e\\\\x00\\\\x00\\\\x00\\\\x06.\\\\x06\\\\x02\\\\t\\\\t\\\\t\\\\x03\\\\t\\\\x0f\\\\t\\\\x05\\\\t\\\\x1fc\\\\x00\\\\x00\\\\x00\\\\x00\\\\x00\\\\x00\\\\x00\\\\x00\\\\x0c\\\\x00\\\\x00\\\\x00B`\\\\x01\\\\x00s\\\\xa1\\\\x06\\\\x00\\\\x00e\\\\x00\\\\x00Z\\\\x01\\\\x00d\\\\x00\\\\x00Z\\\\x02\\\\x00d\\\\x01\\\\x00Z\\\\x03\\\\x00e\\\\x04\\\\x00Z\\\\x05\\\\x00e\\\\x06\\\\x00Z\\\\x07\\\\x00e\\\\x08\\\\x00Z\\\\t\\\\x00d\\\\x02\\\\x00Z\\\\n\\\\x00d\\\\x03\\\\x00Z\\\\x0b\\\\x00d\\\\x83\\\\x00e\\\\x04\\\\x00d\\\\x83\\\\x00e\\\\x06\\\\x00e\\\\r\\\\x00d\\\\x04\\\\x00d\\\\x83\\\\x00e\\\\r\\\\x00d\\\\x83\\\\x00e\\\\r\\\\x00d\\\\x83\\\\x00d\\\\x05\\\\x00\\\\x84\\\\x0b\\\\x00Z\\\\x0e\\\\x00d\\\\x06\\\\x00\\\\x84\\\\x00\\\\x00Z\\\\x0f\\\\x00d\\\\x07\\\\x00\\\\x84\\\\x00\\\\x00Z\\\\x10\\\\x00d\\\\x83\\\\x00d\\\\x08\\\\x00\\\\x84\\\\x01\\\\x00Z\\\\x11\\\\x00d\\\\x83\\\\x00d\\\\x83\\\\x00d\\\\x83\\\\x00d\\\\t\\\\x00\\\\x84\\\\x03\\\\x00Z\\\\x12\\\\x00e\\\\x08\\\\x00j\\\\x12\\\\x00j\\\\x02\\\\x00e\\\\x12\\\\x00_\\\\x02\\\\x00d\\\\n\\\\x00\\\\x84\\\\x00\\\\x00Z\\\\x13\\\\x00d\\\\x0b\\\\x00\\\\x84\\\\x00\\\\x00Z\\\\x14\\\\x00d\\\\x0c\\\\x00\\\\x84\\\\x00\\\\x00Z\\\\x15\\\\x00d\\\\r\\\\x00\\\\x84\\\\x00\\\\x00Z\\\\x16\\\\x00d\\\\x0e\\\\x00\\\\x84\\\\x00\\\\x00Z\\\\x17\\\\x00d\\\\x0f\\\\x00\\\\x84\\\\x00\\\\x00Z\\\\x18\\\\x00e\\\\x06\\\\x00d\\\\x10\\\\x00\\\\x84\\\\x01\\\\x00Z\\\\x19\\\\x00e\\\\x19\\\\x00Z\\\\x1a\\\\x00d\\\\x11\\\\x00\\\\x84\\\\x00\\\\x00Z\\\\x1b\\\\x00e\\\\x1c\\\\x00d\\\\x12\\\\x00e\\\\x1b\\\\x00d\\\\x13\\\\x00e\\\\x19\\\\x00d\\\\x14\\\\x00d\\\\x15\\\\x00\\\\x83\\\\x00\\\\x03Z\\\\x1d\\\\x00d\\\\x16\\\\x00\\\\x84\\\\x00'
tb.